
sensorless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a07c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  00020664  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b4  0800a5b4  00020664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5b8  0800a5b8  0001a5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000664  20000000  0800a5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001708  20000664  0800ac20  00020664  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d6c  0800ac20  00021d6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020664  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004c5d2  00000000  00000000  00020694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00064dbe  00000000  00000000  0006cc66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000092c4  00000000  00000000  000d1a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f78  00000000  00000000  000dace8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00107bbf  00000000  00000000  000dcc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000071c8  00000000  00000000  001e4820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00034ee8  00000000  00000000  001eb9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d68d  00000000  00000000  002208d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  0024df5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006470  00000000  00000000  0024e030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000664 	.word	0x20000664
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a23c 	.word	0x0800a23c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000668 	.word	0x20000668
 8000214:	0800a23c 	.word	0x0800a23c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0b      	ldr	r4, [pc, #44]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053a:	f003 fddb 	bl	80040f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053e:	f009 fe43 	bl	800a1c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f000 fc0d 	bl	8000d60 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000664 	.word	0x20000664
  ldr r2, =_sidata
 8000554:	0800a5bc 	.word	0x0800a5bc
  ldr r2, =_sbss
 8000558:	20000664 	.word	0x20000664
  ldr r4, =_ebss
 800055c:	20001d6c 	.word	0x20001d6c

08000560 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <BusFault_Handler>
	...

08000564 <ASPEP_start>:

    return crc == 0;
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000564:	b510      	push	{r4, lr}
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000566:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8000568:	4604      	mov	r4, r0
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 800056a:	6940      	ldr	r0, [r0, #20]
 800056c:	4798      	blx	r3
  pHandle->ASPEP_State = ASPEP_IDLE;
 800056e:	2300      	movs	r3, #0
 8000570:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pHandle->ASPEP_TL_State = WAITING_PACKET;
  pHandle -> syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000574:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

  /* Configure UART to receive first packet*/
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000578:	6960      	ldr	r0, [r4, #20]
 800057a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800057c:	f104 011c 	add.w	r1, r4, #28
 8000580:	2204      	movs	r2, #4
}
 8000582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000586:	4718      	bx	r3

08000588 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon (ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000588:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t * packet = (uint32_t*) pHandle->ctrlBuffer.buffer;
  *packet =( BEACON |
           (capabilities->version <<4) |
           (capabilities->DATA_CRC << 7) |
 800058a:	780b      	ldrb	r3, [r1, #0]
           (capabilities->version <<4) |
 800058c:	790a      	ldrb	r2, [r1, #4]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 800058e:	788c      	ldrb	r4, [r1, #2]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
 8000590:	784f      	ldrb	r7, [r1, #1]
           (((uint32_t)capabilities->TXA_maxSize) << 21));
 8000592:	78ce      	ldrb	r6, [r1, #3]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000594:	4d1b      	ldr	r5, [pc, #108]	; (8000604 <ASPEP_sendBeacon+0x7c>)
           (capabilities->DATA_CRC << 7) |
 8000596:	01db      	lsls	r3, r3, #7
           (capabilities->version <<4) |
 8000598:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800059c:	f043 0205 	orr.w	r2, r3, #5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 80005a0:	03a3      	lsls	r3, r4, #14
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 80005a2:	f002 01f5 	and.w	r1, r2, #245	; 0xf5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 80005a6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80005aa:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 80005ae:	4313      	orrs	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80005b0:	5c69      	ldrb	r1, [r5, r1]
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80005b2:	4c15      	ldr	r4, [pc, #84]	; (8000608 <ASPEP_sendBeacon+0x80>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80005b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80005b8:	404a      	eors	r2, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 80005ba:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80005be:	5caa      	ldrb	r2, [r5, r2]
 80005c0:	4051      	eors	r1, r2
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80005c2:	f3c3 6603 	ubfx	r6, r3, #24, #4
 80005c6:	5c6a      	ldrb	r2, [r5, r1]
 80005c8:	4072      	eors	r2, r6
    *headerPtr |= (uint32_t)crc << 28;
 80005ca:	5ca2      	ldrb	r2, [r4, r2]
 80005cc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005d0:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d2:	b672      	cpsid	i
uint8_t ASPEP_TXframeProcess (ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
  uint8_t result = ASPEP_OK;
  ASPEP_ComputeHeaderCRC  ((uint32_t*)txBuffer); /* Insert CRC header in the packet to send */
  __disable_irq(); /*TODO: Disable High frequency task is enough */
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 80005d4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005d6:	b143      	cbz	r3, 80005ea <ASPEP_sendBeacon+0x62>
  __ASM volatile ("cpsie i" : : : "memory");
 80005d8:	b662      	cpsie	i
        pHandle -> syncBuffer.length = bufferLength;
      }
    }
    else  if ( dataType == ASPEP_CTRL )
    {
     if ( pHandle -> ctrlBuffer.state != free ) {
 80005da:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005de:	b913      	cbnz	r3, 80005e6 <ASPEP_sendBeacon+0x5e>
        result = ASPEP_BUFFER_ERROR;
      }
      else {
        pHandle -> ctrlBuffer.state = pending;
 80005e0:	2302      	movs	r3, #2
 80005e2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005e6:	bcf0      	pop	{r4, r5, r6, r7}
 80005e8:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005ea:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 80005ee:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80005f0:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 80005f2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80005f6:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80005f8:	2204      	movs	r2, #4
 80005fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80005fc:	6940      	ldr	r0, [r0, #20]
}
 80005fe:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000600:	4718      	bx	r3
 8000602:	bf00      	nop
 8000604:	0800a264 	.word	0x0800a264
 8000608:	0800a254 	.word	0x0800a254

0800060c <ASPEP_sendPing>:
{
 800060c:	b470      	push	{r4, r5, r6}
  uint8_t ipID = pHandle->liid &0xF;
 800060e:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
  uint8_t Nbit = pHandle->syncPacketCount & 0x1; /* Keep only LSB */
 8000612:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 8000616:	014c      	lsls	r4, r1, #5
 8000618:	f003 060f 	and.w	r6, r3, #15
 800061c:	ea44 1301 	orr.w	r3, r4, r1, lsl #4
 8000620:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8000624:	f005 0401 	and.w	r4, r5, #1
 8000628:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800062c:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 8000630:	f043 0306 	orr.w	r3, r3, #6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000634:	4c16      	ldr	r4, [pc, #88]	; (8000690 <ASPEP_sendPing+0x84>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000636:	4d17      	ldr	r5, [pc, #92]	; (8000694 <ASPEP_sendPing+0x88>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000638:	f003 01f6 	and.w	r1, r3, #246	; 0xf6
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 800063c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000640:	5c61      	ldrb	r1, [r4, r1]
 8000642:	ea81 2112 	eor.w	r1, r1, r2, lsr #8
 8000646:	b2c9      	uxtb	r1, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000648:	5c63      	ldrb	r3, [r4, r1]
 800064a:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 800064e:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000650:	5ce3      	ldrb	r3, [r4, r3]
 8000652:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    *headerPtr |= (uint32_t)crc << 28;
 8000656:	5ceb      	ldrb	r3, [r5, r3]
 8000658:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
 800065c:	6202      	str	r2, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800065e:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000660:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000662:	b143      	cbz	r3, 8000676 <ASPEP_sendPing+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000664:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000666:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800066a:	b913      	cbnz	r3, 8000672 <ASPEP_sendPing+0x66>
        pHandle -> ctrlBuffer.state = pending;
 800066c:	2302      	movs	r3, #2
 800066e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000672:	bc70      	pop	{r4, r5, r6}
 8000674:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000676:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 800067a:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 800067c:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 800067e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000682:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8000684:	2204      	movs	r2, #4
 8000686:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000688:	6940      	ldr	r0, [r0, #20]
}
 800068a:	bc70      	pop	{r4, r5, r6}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 800068c:	4718      	bx	r3
 800068e:	bf00      	nop
 8000690:	0800a264 	.word	0x0800a264
 8000694:	0800a254 	.word	0x0800a254

08000698 <ASPEP_getBuffer>:
  if (syncAsync == MCTL_SYNC)
 8000698:	2a0a      	cmp	r2, #10
{
 800069a:	b410      	push	{r4}
 800069c:	4603      	mov	r3, r0
  if (syncAsync == MCTL_SYNC)
 800069e:	d00b      	beq.n	80006b8 <ASPEP_getBuffer+0x20>
    if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock ))
 80006a0:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80006a4:	2a01      	cmp	r2, #1
 80006a6:	d921      	bls.n	80006ec <ASPEP_getBuffer+0x54>
 80006a8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80006ac:	2a01      	cmp	r2, #1
 80006ae:	d911      	bls.n	80006d4 <ASPEP_getBuffer+0x3c>
      result = false;
 80006b0:	2000      	movs	r0, #0
}
 80006b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006b6:	4770      	bx	lr
    if (pHandle->syncBuffer.state <= writeLock ) /* Possible values are free or writeLock*/
 80006b8:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006bc:	2a01      	cmp	r2, #1
 80006be:	d8f7      	bhi.n	80006b0 <ASPEP_getBuffer+0x18>
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
      pHandle->syncBuffer.state = writeLock;
 80006c2:	2401      	movs	r4, #1
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006c4:	3204      	adds	r2, #4
 80006c6:	600a      	str	r2, [r1, #0]
      pHandle->syncBuffer.state = writeLock;
 80006c8:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006cc:	4620      	mov	r0, r4
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006d2:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006d4:	6b82      	ldr	r2, [r0, #56]	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 80006d6:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006d8:	f103 0438 	add.w	r4, r3, #56	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 80006dc:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006e0:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006e2:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006e4:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006e8:	600a      	str	r2, [r1, #0]
}
 80006ea:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006ec:	6b02      	ldr	r2, [r0, #48]	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 80006ee:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006f0:	f103 0430 	add.w	r4, r3, #48	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 80006f4:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006f8:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006fa:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000700:	600a      	str	r2, [r1, #0]
}
 8000702:	4770      	bx	lr

08000704 <ASPEP_sendPacket>:
{
 8000704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pHandle-> ASPEP_State == ASPEP_CONNECTED)
 8000706:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 800070a:	2c02      	cmp	r4, #2
 800070c:	d002      	beq.n	8000714 <ASPEP_sendPacket+0x10>
    result = ASPEP_NOT_CONNECTED;
 800070e:	2102      	movs	r1, #2
}
 8000710:	4608      	mov	r0, r1
 8000712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpHeader =  (txDataLength << 4) | syncAsync;
 8000714:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
    *header = tmpHeader;
 8000718:	f841 4c04 	str.w	r4, [r1, #-4]
    if (pHandle->Capabilities.DATA_CRC == 1)
 800071c:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
 8000720:	2c01      	cmp	r4, #1
    packet = packet - ASPEP_HEADER_SIZE; /* Header ues 4*8 bits on top of txBuffer*/
 8000722:	f1a1 0504 	sub.w	r5, r1, #4
    if (pHandle->Capabilities.DATA_CRC == 1)
 8000726:	d106      	bne.n	8000736 <ASPEP_sendPacket+0x32>
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000728:	18ac      	adds	r4, r5, r2
      *(packet+ASPEP_HEADER_SIZE+txDataLength) = (uint8_t) 0xCA; /* Dummy CRC */
 800072a:	26ca      	movs	r6, #202	; 0xca
 800072c:	548e      	strb	r6, [r1, r2]
      txDataLength+=ASPEP_DATACRC_SIZE;
 800072e:	1c97      	adds	r7, r2, #2
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000730:	26fe      	movs	r6, #254	; 0xfe
      txDataLength+=ASPEP_DATACRC_SIZE;
 8000732:	b2ba      	uxth	r2, r7
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8000734:	7166      	strb	r6, [r4, #5]
    if (syncAsync == MCTL_SYNC )
 8000736:	2b0a      	cmp	r3, #10
 8000738:	d103      	bne.n	8000742 <ASPEP_sendPacket+0x3e>
      if ( pSupHandle->MCP_PacketAvailable)
 800073a:	7c04      	ldrb	r4, [r0, #16]
 800073c:	b37c      	cbz	r4, 800079e <ASPEP_sendPacket+0x9a>
        pSupHandle-> MCP_PacketAvailable = false; /* CMD from master is processed*/
 800073e:	2400      	movs	r4, #0
 8000740:	7404      	strb	r4, [r0, #16]
    uint32_t header = *headerPtr;
 8000742:	f851 4c04 	ldr.w	r4, [r1, #-4]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000746:	4f34      	ldr	r7, [pc, #208]	; (8000818 <ASPEP_sendPacket+0x114>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000748:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 800081c <ASPEP_sendPacket+0x118>
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 800074c:	b2e6      	uxtb	r6, r4
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 800074e:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 8000752:	5dbe      	ldrb	r6, [r7, r6]
 8000754:	ea8e 0e06 	eor.w	lr, lr, r6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000758:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800075c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8000760:	ea86 060e 	eor.w	r6, r6, lr
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 8000764:	3204      	adds	r2, #4
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000766:	5dbe      	ldrb	r6, [r7, r6]
 8000768:	f3c4 6703 	ubfx	r7, r4, #24, #4
 800076c:	407e      	eors	r6, r7
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 800076e:	b292      	uxth	r2, r2
    *headerPtr |= (uint32_t)crc << 28;
 8000770:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8000774:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 8000778:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 800077e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000780:	b1e9      	cbz	r1, 80007be <ASPEP_sendPacket+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 8000782:	b662      	cpsie	i
    if ( dataType == MCTL_ASYNC )
 8000784:	2b09      	cmp	r3, #9
 8000786:	d00d      	beq.n	80007a4 <ASPEP_sendPacket+0xa0>
    else if (dataType == MCTL_SYNC )
 8000788:	2b0a      	cmp	r3, #10
 800078a:	d02f      	beq.n	80007ec <ASPEP_sendPacket+0xe8>
    else  if ( dataType == ASPEP_CTRL )
 800078c:	2b00      	cmp	r3, #0
 800078e:	d133      	bne.n	80007f8 <ASPEP_sendPacket+0xf4>
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000790:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8000794:	bb71      	cbnz	r1, 80007f4 <ASPEP_sendPacket+0xf0>
        pHandle -> ctrlBuffer.state = pending;
 8000796:	2302      	movs	r3, #2
 8000798:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800079c:	e7b8      	b.n	8000710 <ASPEP_sendPacket+0xc>
        result = MCTL_SYNC_NOT_EXPECTED;
 800079e:	2101      	movs	r1, #1
}
 80007a0:	4608      	mov	r0, r1
 80007a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (pHandle->asyncNextBuffer == NULL)
 80007a4:	e9d0 3410 	ldrd	r3, r4, [r0, #64]	; 0x40
      if ( txBuffer != (uint8_t *) pHandle->lastRequestedAsyncBuff->buffer)
 80007a8:	6819      	ldr	r1, [r3, #0]
        result = ASPEP_BUFFER_ERROR;
 80007aa:	428d      	cmp	r5, r1
 80007ac:	bf14      	ite	ne
 80007ae:	2103      	movne	r1, #3
 80007b0:	2100      	moveq	r1, #0
      if (pHandle->asyncNextBuffer == NULL)
 80007b2:	b37c      	cbz	r4, 8000814 <ASPEP_sendPacket+0x110>
      pHandle->lastRequestedAsyncBuff->state = pending;
 80007b4:	2402      	movs	r4, #2
 80007b6:	719c      	strb	r4, [r3, #6]
      pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007ba:	809a      	strh	r2, [r3, #4]
 80007bc:	e7a8      	b.n	8000710 <ASPEP_sendPacket+0xc>
    if (dataType == MCTL_ASYNC )
 80007be:	2b09      	cmp	r3, #9
 80007c0:	d022      	beq.n	8000808 <ASPEP_sendPacket+0x104>
    else if (dataType == MCTL_SYNC )
 80007c2:	2b0a      	cmp	r3, #10
      pHandle->syncBuffer.state = readLock;
 80007c4:	f04f 0103 	mov.w	r1, #3
      pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80007c8:	bf0b      	itete	eq
 80007ca:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80007ce:	f100 0320 	addne.w	r3, r0, #32
      pHandle->syncBuffer.state = readLock;
 80007d2:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = readLock;
 80007d6:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80007da:	6483      	str	r3, [r0, #72]	; 0x48
 80007dc:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80007de:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80007e0:	6940      	ldr	r0, [r0, #20]
 80007e2:	4629      	mov	r1, r5
 80007e4:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 80007e6:	2100      	movs	r1, #0
}
 80007e8:	4608      	mov	r0, r1
 80007ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle -> syncBuffer.state != writeLock ) {
 80007ec:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d003      	beq.n	80007fc <ASPEP_sendPacket+0xf8>
        result = ASPEP_BUFFER_ERROR;
 80007f4:	2103      	movs	r1, #3
 80007f6:	e78b      	b.n	8000710 <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 80007f8:	2100      	movs	r1, #0
 80007fa:	e789      	b.n	8000710 <ASPEP_sendPacket+0xc>
        pHandle -> syncBuffer.state = pending;
 80007fc:	2302      	movs	r3, #2
        pHandle -> syncBuffer.length = bufferLength;
 80007fe:	8582      	strh	r2, [r0, #44]	; 0x2c
        pHandle -> syncBuffer.state = pending;
 8000800:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  uint8_t result = ASPEP_OK;
 8000804:	2100      	movs	r1, #0
 8000806:	e783      	b.n	8000710 <ASPEP_sendPacket+0xc>
      pHandle->lastRequestedAsyncBuff->state = readLock;
 8000808:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800080a:	2103      	movs	r1, #3
 800080c:	7199      	strb	r1, [r3, #6]
      pHandle->lockBuffer = (void *) pHandle->lastRequestedAsyncBuff;
 800080e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000810:	6483      	str	r3, [r0, #72]	; 0x48
 8000812:	e7e3      	b.n	80007dc <ASPEP_sendPacket+0xd8>
        pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000814:	6443      	str	r3, [r0, #68]	; 0x44
 8000816:	e7cd      	b.n	80007b4 <ASPEP_sendPacket+0xb0>
 8000818:	0800a264 	.word	0x0800a264
 800081c:	0800a254 	.word	0x0800a254

08000820 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT (ASPEP_Handle_t *pHandle )
{
 8000820:	b538      	push	{r3, r4, r5, lr}
  /* First free previous readLock buffer */
  if (pHandle->ctrlBuffer.state == readLock)
 8000822:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000826:	2b03      	cmp	r3, #3
{
 8000828:	4604      	mov	r4, r0
  if (pHandle->ctrlBuffer.state == readLock)
 800082a:	d015      	beq.n	8000858 <ASPEP_HWDataTransmittedIT+0x38>
  {
    pHandle -> ctrlBuffer.state = free;
  }
  else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
  {
    MCTL_Buff_t * tempBuff = (MCTL_Buff_t *) pHandle -> lockBuffer;
 800082c:	6c83      	ldr	r3, [r0, #72]	; 0x48
    tempBuff->state = free;
 800082e:	2200      	movs	r2, #0
 8000830:	719a      	strb	r2, [r3, #6]
  }
  if ( pHandle -> syncBuffer.state == pending )
 8000832:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000836:	2b02      	cmp	r3, #2
 8000838:	d015      	beq.n	8000866 <ASPEP_HWDataTransmittedIT+0x46>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
    pHandle ->syncBuffer.state = readLock;
  }
  /* Second prepare transfer of pending buffer */
  else if ( pHandle -> ctrlBuffer.state == pending )
 800083a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800083e:	2b02      	cmp	r3, #2
 8000840:	d11d      	bne.n	800087e <ASPEP_HWDataTransmittedIT+0x5e>
  {
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000842:	f100 0120 	add.w	r1, r0, #32
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000846:	6d83      	ldr	r3, [r0, #88]	; 0x58
    pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000848:	6481      	str	r1, [r0, #72]	; 0x48
    pHandle->fASPEP_send (pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800084a:	2204      	movs	r2, #4
 800084c:	6940      	ldr	r0, [r0, #20]
 800084e:	4798      	blx	r3
    pHandle -> ctrlBuffer.state = readLock;
 8000850:	2303      	movs	r3, #3
 8000852:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    {
      pHandle->lockBuffer = NULL;
    }
    __enable_irq();
  }
}
 8000856:	bd38      	pop	{r3, r4, r5, pc}
  if ( pHandle -> syncBuffer.state == pending )
 8000858:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    pHandle -> ctrlBuffer.state = free;
 800085c:	2200      	movs	r2, #0
  if ( pHandle -> syncBuffer.state == pending )
 800085e:	2b02      	cmp	r3, #2
    pHandle -> ctrlBuffer.state = free;
 8000860:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if ( pHandle -> syncBuffer.state == pending )
 8000864:	d10b      	bne.n	800087e <ASPEP_HWDataTransmittedIT+0x5e>
    pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000866:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800086a:	64a3      	str	r3, [r4, #72]	; 0x48
    pHandle->fASPEP_send (pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800086c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800086e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000870:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000872:	6960      	ldr	r0, [r4, #20]
 8000874:	4798      	blx	r3
    pHandle ->syncBuffer.state = readLock;
 8000876:	2303      	movs	r3, #3
 8000878:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 800087c:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800087e:	b672      	cpsid	i
    if ( pHandle->asyncNextBuffer != NULL )
 8000880:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000882:	b1d3      	cbz	r3, 80008ba <ASPEP_HWDataTransmittedIT+0x9a>
      pHandle->asyncNextBuffer->state = readLock;
 8000884:	2203      	movs	r2, #3
      pHandle->lockBuffer = (void *) pHandle->asyncNextBuffer;
 8000886:	64a3      	str	r3, [r4, #72]	; 0x48
      pHandle->asyncNextBuffer->state = readLock;
 8000888:	719a      	strb	r2, [r3, #6]
      pHandle->fASPEP_send (pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800088a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800088c:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800088e:	889a      	ldrh	r2, [r3, #4]
 8000890:	6819      	ldr	r1, [r3, #0]
 8000892:	6960      	ldr	r0, [r4, #20]
 8000894:	47a8      	blx	r5
      if ( (pHandle->asyncBufferA.state == pending ) || (pHandle->asyncBufferB.state == pending))
 8000896:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800089a:	2b02      	cmp	r3, #2
 800089c:	d007      	beq.n	80008ae <ASPEP_HWDataTransmittedIT+0x8e>
 800089e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d003      	beq.n	80008ae <ASPEP_HWDataTransmittedIT+0x8e>
        pHandle->asyncNextBuffer = NULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80008aa:	b662      	cpsie	i
}
 80008ac:	bd38      	pop	{r3, r4, r5, pc}
        uint32_t temp = (uint32_t) &pHandle->asyncBufferA + (uint32_t) &pHandle->asyncBufferB - (uint32_t)  pHandle->asyncNextBuffer;
 80008ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008b0:	0063      	lsls	r3, r4, #1
 80008b2:	3368      	adds	r3, #104	; 0x68
 80008b4:	1a9b      	subs	r3, r3, r2
        pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp;
 80008b6:	6463      	str	r3, [r4, #68]	; 0x44
      {
 80008b8:	e7f7      	b.n	80008aa <ASPEP_HWDataTransmittedIT+0x8a>
      pHandle->lockBuffer = NULL;
 80008ba:	64a3      	str	r3, [r4, #72]	; 0x48
 80008bc:	e7f5      	b.n	80008aa <ASPEP_HWDataTransmittedIT+0x8a>
 80008be:	bf00      	nop

080008c0 <ASPEP_RXframeProcess>:
  bool validCRCData = true;
  uint16_t packetNumber;
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);

  *packetLength = 0;
  if (pHandle->NewPacketAvailable)
 80008c0:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);
 80008c4:	69c2      	ldr	r2, [r0, #28]
{
 80008c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *packetLength = 0;
 80008ca:	2500      	movs	r5, #0
{
 80008cc:	4604      	mov	r4, r0
  *packetLength = 0;
 80008ce:	800d      	strh	r5, [r1, #0]
  if (pHandle->NewPacketAvailable)
 80008d0:	b193      	cbz	r3, 80008f8 <ASPEP_RXframeProcess+0x38>
  {
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
    switch (pHandle->ASPEP_State)
 80008d2:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
 80008d6:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
    switch (pHandle->ASPEP_State)
 80008da:	2e01      	cmp	r6, #1
 80008dc:	d056      	beq.n	800098c <ASPEP_RXframeProcess+0xcc>
 80008de:	2e02      	cmp	r6, #2
 80008e0:	d03f      	beq.n	8000962 <ASPEP_RXframeProcess+0xa2>
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d033      	beq.n	800094e <ASPEP_RXframeProcess+0x8e>
      }

      break;
    }
    /* The valid received packet is now safely consumes, we are ready to receive a new packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 80008e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008e8:	6960      	ldr	r0, [r4, #20]
 80008ea:	2204      	movs	r2, #4
 80008ec:	f104 011c 	add.w	r1, r4, #28
 80008f0:	4798      	blx	r3
  else
  {
    /* Nothing to do, no response is due to the master */
  }
  return result;
}
 80008f2:	4628      	mov	r0, r5
 80008f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (pHandle->badPacketFlag > ASPEP_OK )
 80008f8:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d0f8      	beq.n	80008f2 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 8000900:	042b      	lsls	r3, r5, #16
 8000902:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000906:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800090a:	4a96      	ldr	r2, [pc, #600]	; (8000b64 <ASPEP_RXframeProcess+0x2a4>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 800090c:	4996      	ldr	r1, [pc, #600]	; (8000b68 <ASPEP_RXframeProcess+0x2a8>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 800090e:	f083 0309 	eor.w	r3, r3, #9
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000912:	5cd3      	ldrb	r3, [r2, r3]
 8000914:	ea83 4315 	eor.w	r3, r3, r5, lsr #16
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 8000918:	f045 050f 	orr.w	r5, r5, #15
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 800091c:	5cd3      	ldrb	r3, [r2, r3]
    *headerPtr |= (uint32_t)crc << 28;
 800091e:	5ccb      	ldrb	r3, [r1, r3]
 8000920:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
 8000924:	6205      	str	r5, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000926:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8000928:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800092a:	2b00      	cmp	r3, #0
 800092c:	d03d      	beq.n	80009aa <ASPEP_RXframeProcess+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
 800092e:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 8000930:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000934:	b913      	cbnz	r3, 800093c <ASPEP_RXframeProcess+0x7c>
        pHandle -> ctrlBuffer.state = pending;
 8000936:	2302      	movs	r3, #2
 8000938:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    pHandle->badPacketFlag = ASPEP_OK;
 800093c:	2500      	movs	r5, #0
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 800093e:	6960      	ldr	r0, [r4, #20]
 8000940:	6d23      	ldr	r3, [r4, #80]	; 0x50
    pHandle->badPacketFlag = ASPEP_OK;
 8000942:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 8000946:	4798      	blx	r3
}
 8000948:	4628      	mov	r0, r5
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (pHandle->rxPacketType == beacon )
 800094e:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000952:	2b05      	cmp	r3, #5
 8000954:	f000 8097 	beq.w	8000a86 <ASPEP_RXframeProcess+0x1c6>
      else if (pHandle->rxPacketType == ping)
 8000958:	2b06      	cmp	r3, #6
 800095a:	f000 80d7 	beq.w	8000b0c <ASPEP_RXframeProcess+0x24c>
  uint8_t* result = NULL;
 800095e:	4635      	mov	r5, r6
 8000960:	e7c1      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 8000962:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000966:	2b05      	cmp	r3, #5
 8000968:	d060      	beq.n	8000a2c <ASPEP_RXframeProcess+0x16c>
      else if (pHandle->rxPacketType == ping )
 800096a:	2b06      	cmp	r3, #6
 800096c:	f000 80d5 	beq.w	8000b1a <ASPEP_RXframeProcess+0x25a>
      else if (pHandle->rxPacketType == data )
 8000970:	2b09      	cmp	r3, #9
 8000972:	d1b8      	bne.n	80008e6 <ASPEP_RXframeProcess+0x26>
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000974:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
          *packetLength = pHandle->rxLength;
 8000978:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
          result = pHandle->rxBuffer;
 800097c:	6985      	ldr	r5, [r0, #24]
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 800097e:	3301      	adds	r3, #1
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000980:	2001      	movs	r0, #1
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8000982:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000986:	7420      	strb	r0, [r4, #16]
          *packetLength = pHandle->rxLength;
 8000988:	800a      	strh	r2, [r1, #0]
          result = pHandle->rxBuffer;
 800098a:	e7ac      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 800098c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8000990:	2b05      	cmp	r3, #5
 8000992:	d016      	beq.n	80009c2 <ASPEP_RXframeProcess+0x102>
      else if (pHandle->rxPacketType == ping)
 8000994:	2b06      	cmp	r3, #6
 8000996:	d1a6      	bne.n	80008e6 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8000998:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800099c:	4631      	mov	r1, r6
 800099e:	f7ff fe35 	bl	800060c <ASPEP_sendPing>
        pHandle->ASPEP_State = ASPEP_CONNECTED;
 80009a2:	2302      	movs	r3, #2
 80009a4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009a8:	e79d      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009aa:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 80009ae:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80009b0:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 80009b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80009b6:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80009b8:	2204      	movs	r2, #4
 80009ba:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80009bc:	6940      	ldr	r0, [r0, #20]
 80009be:	4798      	blx	r3
 80009c0:	e7bc      	b.n	800093c <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80009c2:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009c4:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80009c8:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ca:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009ce:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009d2:	f894 c06a 	ldrb.w	ip, [r4, #106]	; 0x6a
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80009d6:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80009d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009dc:	42ab      	cmp	r3, r5
 80009de:	4698      	mov	r8, r3
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 80009e0:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e4:	bf28      	it	cs
 80009e6:	46a8      	movcs	r8, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009e8:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 80009ea:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ee:	bf28      	it	cs
 80009f0:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009f2:	42b7      	cmp	r7, r6
 80009f4:	46b9      	mov	r9, r7
 80009f6:	bf28      	it	cs
 80009f8:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009fa:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009fc:	f884 8067 	strb.w	r8, [r4, #103]	; 0x67
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a00:	46f0      	mov	r8, lr
 8000a02:	bf28      	it	cs
 8000a04:	46e0      	movcs	r8, ip
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a06:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a08:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a0c:	f884 9069 	strb.w	r9, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a10:	f884 806a 	strb.w	r8, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a14:	f240 8086 	bls.w	8000b24 <ASPEP_RXframeProcess+0x264>
          pHandle->ASPEP_State = ASPEP_IDLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        ASPEP_sendBeacon (pHandle, &pHandle->Capabilities);
 8000a1e:	f104 0167 	add.w	r1, r4, #103	; 0x67
 8000a22:	4620      	mov	r0, r4
 8000a24:	f7ff fdb0 	bl	8000588 <ASPEP_sendBeacon>
  uint8_t* result = NULL;
 8000a28:	2500      	movs	r5, #0
 8000a2a:	e75c      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a2c:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a2e:	f894 6067 	ldrb.w	r6, [r4, #103]	; 0x67
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a32:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a34:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a38:	f894 7069 	ldrb.w	r7, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a3c:	f894 e06a 	ldrb.w	lr, [r4, #106]	; 0x6a
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a40:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a42:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a46:	42b3      	cmp	r3, r6
 8000a48:	4699      	mov	r9, r3
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8000a4a:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a4e:	bf28      	it	cs
 8000a50:	46b1      	movcs	r9, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a52:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8000a54:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a58:	bf28      	it	cs
 8000a5a:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a5c:	45bc      	cmp	ip, r7
 8000a5e:	46e2      	mov	sl, ip
 8000a60:	bf28      	it	cs
 8000a62:	46ba      	movcs	sl, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a64:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a66:	f884 9067 	strb.w	r9, [r4, #103]	; 0x67
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a6a:	46c1      	mov	r9, r8
 8000a6c:	bf28      	it	cs
 8000a6e:	46f1      	movcs	r9, lr
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a70:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a72:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a76:	f884 a069 	strb.w	sl, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a7a:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000a7e:	d962      	bls.n	8000b46 <ASPEP_RXframeProcess+0x286>
 8000a80:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a84:	e7cb      	b.n	8000a1e <ASPEP_RXframeProcess+0x15e>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a86:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a88:	f890 7067 	ldrb.w	r7, [r0, #103]	; 0x67
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a8c:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a8e:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a92:	f890 c069 	ldrb.w	ip, [r0, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a96:	f890 806a 	ldrb.w	r8, [r0, #106]	; 0x6a
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8000a9a:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8000a9c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aa0:	42bb      	cmp	r3, r7
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8000aa2:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aa6:	469a      	mov	sl, r3
 8000aa8:	bf28      	it	cs
 8000aaa:	46ba      	movcs	sl, r7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aac:	42a9      	cmp	r1, r5
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 8000aae:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab2:	bf28      	it	cs
 8000ab4:	4629      	movcs	r1, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ab6:	45e6      	cmp	lr, ip
 8000ab8:	4670      	mov	r0, lr
 8000aba:	bf28      	it	cs
 8000abc:	4660      	movcs	r0, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000abe:	45c1      	cmp	r9, r8
 8000ac0:	464e      	mov	r6, r9
 8000ac2:	bf28      	it	cs
 8000ac4:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000ac6:	42bb      	cmp	r3, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac8:	f884 a067 	strb.w	sl, [r4, #103]	; 0x67
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000acc:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ad0:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ad4:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000ad8:	d8a1      	bhi.n	8000a1e <ASPEP_RXframeProcess+0x15e>
 8000ada:	428d      	cmp	r5, r1
 8000adc:	d89f      	bhi.n	8000a1e <ASPEP_RXframeProcess+0x15e>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000ade:	45e6      	cmp	lr, ip
 8000ae0:	d89d      	bhi.n	8000a1e <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000ae2:	45c1      	cmp	r9, r8
 8000ae4:	d89b      	bhi.n	8000a1e <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000ae6:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
 8000aea:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000aee:	429d      	cmp	r5, r3
 8000af0:	d195      	bne.n	8000a1e <ASPEP_RXframeProcess+0x15e>
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000af2:	1c4b      	adds	r3, r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000af4:	1c42      	adds	r2, r0, #1
 8000af6:	0152      	lsls	r2, r2, #5
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000af8:	015b      	lsls	r3, r3, #5
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8000afa:	01b6      	lsls	r6, r6, #6
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000afc:	2101      	movs	r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8000afe:	81a2      	strh	r2, [r4, #12]
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8000b00:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 8000b04:	81e6      	strh	r6, [r4, #14]
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b06:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000b0a:	e788      	b.n	8000a1e <ASPEP_RXframeProcess+0x15e>
        ASPEP_sendPing (pHandle,ASPEP_PING_RESET,packetNumber);
 8000b0c:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b10:	4631      	mov	r1, r6
 8000b12:	f7ff fd7b 	bl	800060c <ASPEP_sendPing>
  uint8_t* result = NULL;
 8000b16:	4635      	mov	r5, r6
 8000b18:	e6e5      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8000b1a:	7f42      	ldrb	r2, [r0, #29]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	f7ff fd75 	bl	800060c <ASPEP_sendPing>
 8000b22:	e6e0      	b.n	80008e6 <ASPEP_RXframeProcess+0x26>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000b24:	4288      	cmp	r0, r1
 8000b26:	f63f af77 	bhi.w	8000a18 <ASPEP_RXframeProcess+0x158>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000b2a:	42b7      	cmp	r7, r6
 8000b2c:	f63f af74 	bhi.w	8000a18 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000b30:	45e6      	cmp	lr, ip
 8000b32:	f63f af71 	bhi.w	8000a18 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000b36:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8000b3a:	f3c2 1302 	ubfx	r3, r2, #4, #3
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f47f af6a 	bne.w	8000a18 <ASPEP_RXframeProcess+0x158>
 8000b44:	e76b      	b.n	8000a1e <ASPEP_RXframeProcess+0x15e>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8000b46:	4288      	cmp	r0, r1
 8000b48:	d89a      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1c0>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 8000b4a:	45bc      	cmp	ip, r7
 8000b4c:	d898      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8000b4e:	45f0      	cmp	r8, lr
 8000b50:	d896      	bhi.n	8000a80 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8000b52:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
 8000b56:	f3c2 1302 	ubfx	r3, r2, #4, #3
          pHandle->ASPEP_State = ASPEP_IDLE;
 8000b5a:	1aeb      	subs	r3, r5, r3
 8000b5c:	425d      	negs	r5, r3
 8000b5e:	415d      	adcs	r5, r3
 8000b60:	e78e      	b.n	8000a80 <ASPEP_RXframeProcess+0x1c0>
 8000b62:	bf00      	nop
 8000b64:	0800a264 	.word	0x0800a264
 8000b68:	0800a254 	.word	0x0800a254

08000b6c <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT (ASPEP_Handle_t *pHandle)
{
 8000b6c:	b538      	push	{r3, r4, r5, lr}
/* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.*/
/* This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_RXframeProcess*/
/* If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.*/
  switch (pHandle->ASPEP_TL_State) {
 8000b6e:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b72:	4604      	mov	r4, r0
  switch (pHandle->ASPEP_TL_State) {
 8000b74:	b13b      	cbz	r3, 8000b86 <ASPEP_HWDataReceivedIT+0x1a>
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d104      	bne.n	8000b84 <ASPEP_HWDataReceivedIT+0x18>
    {
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
    }
    break;
  case WAITING_PAYLOAD:
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b7a:	2200      	movs	r2, #0
    // Payload received,
    pHandle->NewPacketAvailable = true;
 8000b7c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b80:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    /*The receiver is not reconfigure right now on purpose to avoid race condition when the packet will be processed in ASPEP_RXframeProcess */
    break;
  }
}
 8000b84:	bd38      	pop	{r3, r4, r5, pc}
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8000b86:	69c2      	ldr	r2, [r0, #28]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000b88:	491f      	ldr	r1, [pc, #124]	; (8000c08 <ASPEP_HWDataReceivedIT+0x9c>)
 8000b8a:	b2d3      	uxtb	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000b8c:	5ccb      	ldrb	r3, [r1, r3]
 8000b8e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8000b92:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000b94:	5ccb      	ldrb	r3, [r1, r3]
 8000b96:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 8000b9a:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 24) & 0xff) ];
 8000b9c:	5ccb      	ldrb	r3, [r1, r3]
 8000b9e:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8000ba2:	5ccb      	ldrb	r3, [r1, r3]
 8000ba4:	b963      	cbnz	r3, 8000bc0 <ASPEP_HWDataReceivedIT+0x54>
       pHandle->rxPacketType = (ASPEP_packetType_def) (pHandle->rxHeader[0] & ID_MASK);
 8000ba6:	7f03      	ldrb	r3, [r0, #28]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
       switch (pHandle->rxPacketType) {
 8000bb2:	d809      	bhi.n	8000bc8 <ASPEP_HWDataReceivedIT+0x5c>
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d81e      	bhi.n	8000bf6 <ASPEP_HWDataReceivedIT+0x8a>
         pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000bbe:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
 8000bc8:	2b09      	cmp	r3, #9
 8000bca:	d1f5      	bne.n	8000bb8 <ASPEP_HWDataReceivedIT+0x4c>
         pHandle->rxLength = (*((uint32_t *)pHandle->rxHeader) & 0x0001FFF0) >> 4;
 8000bcc:	f3c2 120c 	ubfx	r2, r2, #4, #13
 8000bd0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
         if (pHandle->rxLength == 0) /* data packet with length 0 is a valid packet*/
 8000bd4:	b17a      	cbz	r2, 8000bf6 <ASPEP_HWDataReceivedIT+0x8a>
         else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000bd6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d30f      	bcc.n	8000bfe <ASPEP_HWDataReceivedIT+0x92>
           pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer , pHandle->rxLength+ASPEP_DATACRC_SIZE*pHandle->Capabilities.DATA_CRC); /* need to read + 2 bytes CRC*/
 8000bde:	f890 5067 	ldrb.w	r5, [r0, #103]	; 0x67
 8000be2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000be4:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 8000be8:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
 8000bec:	4798      	blx	r3
           pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000bf4:	bd38      	pop	{r3, r4, r5, pc}
         pHandle->NewPacketAvailable = true;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
           pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000c04:	bd38      	pop	{r3, r4, r5, pc}
 8000c06:	bf00      	nop
 8000c08:	0800a264 	.word	0x0800a264

08000c0c <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset (ASPEP_Handle_t *pHandle)
{ /* We must reset the RX state machine to be sure to not be in Waiting packet state */
 8000c0c:	4601      	mov	r1, r0
  /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
  /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
  pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000c14:	311c      	adds	r1, #28
 8000c16:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c18:	6940      	ldr	r0, [r0, #20]
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	4718      	bx	r3
 8000c1e:	bf00      	nop

08000c20 <DAC_Init>:
/**
  * @brief  Hardware and software initialization of the DAC object.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Init(DAC_Handle_t *pHandle)
{
 8000c20:	b538      	push	{r3, r4, r5, lr}
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000c22:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <DAC_Init+0x2c>)
  /* Enable DAC Channel1 */
  RI_GetPtrReg ((MC_REG_I_A + 0x1) , (void *) &pHandle->ptrDataCh[DAC_CH1]); /*By default send Ia motor 1 */
 8000c24:	4601      	mov	r1, r0
{
 8000c26:	4605      	mov	r5, r0
  RI_GetPtrReg ((MC_REG_I_A + 0x1) , (void *) &pHandle->ptrDataCh[DAC_CH1]); /*By default send Ia motor 1 */
 8000c28:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8000c2c:	f002 fbe8 	bl	8003400 <RI_GetPtrReg>
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6023      	str	r3, [r4, #0]
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
  /* Enable DAC Channel2 */
  RI_GetPtrReg ((MC_REG_I_B + 0x1) , (void *) &pHandle->ptrDataCh[DAC_CH2]); /*By default send Ib motor 1 */
 8000c38:	1d29      	adds	r1, r5, #4
 8000c3a:	f640 0011 	movw	r0, #2065	; 0x811
 8000c3e:	f002 fbdf 	bl	8003400 <RI_GetPtrReg>
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c48:	6023      	str	r3, [r4, #0]
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_2);

}
 8000c4a:	bd38      	pop	{r3, r4, r5, pc}
 8000c4c:	50000800 	.word	0x50000800

08000c50 <DAC_Exec>:
  *         variables will be provided in the related output channels.
  * @param  pHandle pointer on related component instance.
  */

__weak void DAC_Exec(DAC_Handle_t *pHandle)
{
 8000c50:	b470      	push	{r4, r5, r6}

  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                                  DACOFF + *((int16_t*) pHandle-> ptrDataCh[DAC_CH1]));
 8000c52:	6803      	ldr	r3, [r0, #0]
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8000c54:	4c0f      	ldr	r4, [pc, #60]	; (8000c94 <DAC_Exec+0x44>)
 8000c56:	f9b3 2000 	ldrsh.w	r2, [r3]
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8000c5a:	6865      	ldr	r5, [r4, #4]
 8000c5c:	4e0e      	ldr	r6, [pc, #56]	; (8000c98 <DAC_Exec+0x48>)
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);

  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_2,
                                  DACOFF + ((int16_t)* pHandle->ptrDataCh[DAC_CH2]));
 8000c5e:	6843      	ldr	r3, [r0, #4]
  SET_BIT(DACx->SWTRIGR,
 8000c60:	490e      	ldr	r1, [pc, #56]	; (8000c9c <DAC_Exec+0x4c>)
 8000c62:	f9b3 3000 	ldrsh.w	r3, [r3]
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8000c66:	ea05 0006 	and.w	r0, r5, r6
                                  DACOFF + *((int16_t*) pHandle-> ptrDataCh[DAC_CH1]));
 8000c6a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8000c6e:	4302      	orrs	r2, r0
 8000c70:	6062      	str	r2, [r4, #4]
  SET_BIT(DACx->SWTRIGR,
 8000c72:	6848      	ldr	r0, [r1, #4]
 8000c74:	f040 0001 	orr.w	r0, r0, #1
 8000c78:	6048      	str	r0, [r1, #4]
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8000c7a:	6922      	ldr	r2, [r4, #16]
                                  DACOFF + ((int16_t)* pHandle->ptrDataCh[DAC_CH2]));
 8000c7c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000c80:	4032      	ands	r2, r6
 8000c82:	4313      	orrs	r3, r2
 8000c84:	6123      	str	r3, [r4, #16]
  SET_BIT(DACx->SWTRIGR,
 8000c86:	684b      	ldr	r3, [r1, #4]
 8000c88:	f043 0302 	orr.w	r3, r3, #2
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_2);
}
 8000c8c:	bc70      	pop	{r4, r5, r6}
 8000c8e:	604b      	str	r3, [r1, #4]
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	50000808 	.word	0x50000808
 8000c98:	ffff000f 	.word	0xffff000f
 8000c9c:	50000800 	.word	0x50000800

08000ca0 <DAC_SetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A.
  * @retval none.
  */
__weak void DAC_SetChannelConfig(DAC_Handle_t *pHandle, DAC_Channel_t bChannel, uint16_t regID)
{
  pHandle->dataCh[bChannel] = regID;
 8000ca0:	1d0b      	adds	r3, r1, #4
  RI_GetPtrReg (regID, (void *) &pHandle->ptrDataCh[bChannel]);
 8000ca2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  pHandle->dataCh[bChannel] = regID;
 8000ca6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
  RI_GetPtrReg (regID, (void *) &pHandle->ptrDataCh[bChannel]);
 8000caa:	4610      	mov	r0, r2
 8000cac:	f002 bba8 	b.w	8003400 <RI_GetPtrReg>

08000cb0 <DAC_GetChannelConfig>:
}

uint16_t DAC_GetChannelConfig(DAC_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  return (pHandle->dataCh[bChannel]);
 8000cb0:	3104      	adds	r1, #4
}
 8000cb2:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8000cb6:	4770      	bx	lr

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	2100      	movs	r1, #0
{
 8000cbc:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbe:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc0:	2238      	movs	r2, #56	; 0x38
 8000cc2:	a806      	add	r0, sp, #24
 8000cc4:	f009 fab2 	bl	800a22c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	4621      	mov	r1, r4
 8000cca:	2244      	movs	r2, #68	; 0x44
 8000ccc:	a814      	add	r0, sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cce:	e9cd 4400 	strd	r4, r4, [sp]
 8000cd2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000cd6:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd8:	f009 faa8 	bl	800a22c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f005 f89f 	bl	8005e20 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce2:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cea:	2503      	movs	r5, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000cec:	2406      	movs	r4, #6
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cee:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000cf0:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf4:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf8:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000cfc:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000d00:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d06:	f005 f911 	bl	8005f2c <HAL_RCC_OscConfig>
 8000d0a:	b108      	cbz	r0, 8000d10 <SystemClock_Config+0x58>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <SystemClock_Config+0x56>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d10:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	2200      	movs	r2, #0
 8000d16:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d18:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1a:	240f      	movs	r4, #15
 8000d1c:	2503      	movs	r5, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d1e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d24:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d28:	f005 fb84 	bl	8006434 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b108      	cbz	r0, 8000d34 <SystemClock_Config+0x7c>
 8000d30:	b672      	cpsid	i
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C3
 8000d34:	f248 1401 	movw	r4, #33025	; 0x8101
 8000d38:	2500      	movs	r5, #0
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3e:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C3
 8000d40:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d44:	931c      	str	r3, [sp, #112]	; 0x70
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000d46:	9223      	str	r2, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f005 fcb8 	bl	80066bc <HAL_RCCEx_PeriphCLKConfig>
 8000d4c:	b108      	cbz	r0, 8000d52 <SystemClock_Config+0x9a>
 8000d4e:	b672      	cpsid	i
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <SystemClock_Config+0x98>
  HAL_RCC_EnableCSS();
 8000d52:	f005 fcab 	bl	80066ac <HAL_RCC_EnableCSS>
}
 8000d56:	b027      	add	sp, #156	; 0x9c
 8000d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	0000      	movs	r0, r0
	...

08000d60 <main>:
{
 8000d60:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	2600      	movs	r6, #0
{
 8000d66:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8000d68:	f003 f9f4 	bl	8004154 <HAL_Init>
  SystemClock_Config();
 8000d6c:	f7ff ffa4 	bl	8000cb8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	e9cd 661c 	strd	r6, r6, [sp, #112]	; 0x70
 8000d74:	e9cd 661e 	strd	r6, r6, [sp, #120]	; 0x78
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d78:	4db1      	ldr	r5, [pc, #708]	; (8001040 <main+0x2e0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	9620      	str	r6, [sp, #128]	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8000d7e:	48b1      	ldr	r0, [pc, #708]	; (8001044 <main+0x2e4>)
  hadc1.Instance = ADC1;
 8000d80:	4fb1      	ldr	r7, [pc, #708]	; (8001048 <main+0x2e8>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d82:	f042 0220 	orr.w	r2, r2, #32
 8000d86:	64ea      	str	r2, [r5, #76]	; 0x4c
 8000d88:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8000d8a:	f002 0220 	and.w	r2, r2, #32
 8000d8e:	9205      	str	r2, [sp, #20]
 8000d90:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8000d94:	f042 0204 	orr.w	r2, r2, #4
 8000d98:	64ea      	str	r2, [r5, #76]	; 0x4c
 8000d9a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8000d9c:	f002 0204 	and.w	r2, r2, #4
 8000da0:	9206      	str	r2, [sp, #24]
 8000da2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	64ea      	str	r2, [r5, #76]	; 0x4c
 8000dac:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8000dae:	f002 0201 	and.w	r2, r2, #1
 8000db2:	9207      	str	r2, [sp, #28]
 8000db4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8000db8:	f042 0202 	orr.w	r2, r2, #2
 8000dbc:	64ea      	str	r2, [r5, #76]	; 0x4c
 8000dbe:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8000dc0:	f002 0202 	and.w	r2, r2, #2
 8000dc4:	9208      	str	r2, [sp, #32]
 8000dc6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc8:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8000dca:	f042 0210 	orr.w	r2, r2, #16
 8000dce:	64ea      	str	r2, [r5, #76]	; 0x4c
 8000dd0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8000dd2:	f002 0210 	and.w	r2, r2, #16
 8000dd6:	9209      	str	r2, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	2201      	movs	r2, #1
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 8000ddc:	f04f 0800 	mov.w	r8, #0
 8000de0:	f04f 0900 	mov.w	r9, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 8000de6:	f04f 0a80 	mov.w	sl, #128	; 0x80
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8000dea:	f004 fbd9 	bl	80055a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 8000dee:	f04f 0b01 	mov.w	fp, #1
 8000df2:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000df6:	4893      	ldr	r0, [pc, #588]	; (8001044 <main+0x2e4>)
 8000df8:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = GD_READY_Pin|GD_NFAULT_Pin;
 8000dfa:	f44f 4840 	mov.w	r8, #49152	; 0xc000
 8000dfe:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e02:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 8000e04:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f004 fad6 	bl	80053b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GD_READY_Pin|GD_NFAULT_Pin;
 8000e0c:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e10:	488c      	ldr	r0, [pc, #560]	; (8001044 <main+0x2e4>)
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000e12:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8001068 <main+0x308>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e18:	a91c      	add	r1, sp, #112	; 0x70
 8000e1a:	f004 facd 	bl	80053b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000e1e:	f44f 6880 	mov.w	r8, #1024	; 0x400
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000e22:	488a      	ldr	r0, [pc, #552]	; (800104c <main+0x2ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	961e      	str	r6, [sp, #120]	; 0x78
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000e28:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f004 fac4 	bl	80053b8 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e30:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000e32:	f042 0204 	orr.w	r2, r2, #4
 8000e36:	64aa      	str	r2, [r5, #72]	; 0x48
 8000e38:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000e3a:	f002 0204 	and.w	r2, r2, #4
 8000e3e:	9203      	str	r2, [sp, #12]
 8000e40:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e42:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000e44:	4322      	orrs	r2, r4
 8000e46:	64aa      	str	r2, [r5, #72]	; 0x48
 8000e48:	6caa      	ldr	r2, [r5, #72]	; 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8000e4a:	960e      	str	r6, [sp, #56]	; 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4c:	4022      	ands	r2, r4
 8000e4e:	9204      	str	r2, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e50:	4631      	mov	r1, r6
 8000e52:	223c      	movs	r2, #60	; 0x3c
 8000e54:	a81c      	add	r0, sp, #112	; 0x70
  ADC_MultiModeTypeDef multimode = {0};
 8000e56:	e9cd 660f 	strd	r6, r6, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	9d04      	ldr	r5, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e5c:	f009 f9e6 	bl	800a22c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e60:	2220      	movs	r2, #32
 8000e62:	4631      	mov	r1, r6
 8000e64:	a814      	add	r0, sp, #80	; 0x50
 8000e66:	f009 f9e1 	bl	800a22c <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e6a:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
  hadc1.Instance = ADC1;
 8000e6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hadc1.Init.NbrOfConversion = 2;
 8000e72:	f04f 0b02 	mov.w	fp, #2
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e76:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e78:	4638      	mov	r0, r7
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e7a:	83be      	strh	r6, [r7, #28]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e7c:	e9c7 6601 	strd	r6, r6, [r7, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e80:	e9c7 6404 	strd	r6, r4, [r7, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e84:	e9c7 660b 	strd	r6, r6, [r7, #44]	; 0x2c
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e88:	f887 6024 	strb.w	r6, [r7, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e8c:	f887 6038 	strb.w	r6, [r7, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e90:	63fe      	str	r6, [r7, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e92:	f887 6040 	strb.w	r6, [r7, #64]	; 0x40
  hadc1.Instance = ADC1;
 8000e96:	603a      	str	r2, [r7, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000e98:	f8c7 a00c 	str.w	sl, [r7, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e9c:	61bb      	str	r3, [r7, #24]
  hadc1.Init.NbrOfConversion = 2;
 8000e9e:	f8c7 b020 	str.w	fp, [r7, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea2:	f003 f98b 	bl	80041bc <HAL_ADC_Init>
 8000ea6:	b108      	cbz	r0, 8000eac <main+0x14c>
 8000ea8:	b672      	cpsid	i
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <main+0x14a>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eac:	4602      	mov	r2, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eae:	a90e      	add	r1, sp, #56	; 0x38
 8000eb0:	4638      	mov	r0, r7
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eb2:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eb4:	f003 fff6 	bl	8004ea4 <HAL_ADCEx_MultiModeConfigChannel>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	b108      	cbz	r0, 8000ec0 <main+0x160>
 8000ebc:	b672      	cpsid	i
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <main+0x15e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ec0:	237f      	movs	r3, #127	; 0x7f
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ec2:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000ec6:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000eca:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000ed4:	f8df 8194 	ldr.w	r8, [pc, #404]	; 800106c <main+0x30c>
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000ed8:	9424      	str	r4, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000eda:	2204      	movs	r2, #4
 8000edc:	2300      	movs	r3, #0
 8000ede:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000ee2:	f04f 0909 	mov.w	r9, #9
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000eea:	a91c      	add	r1, sp, #112	; 0x70
 8000eec:	4638      	mov	r0, r7
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000eee:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000ef2:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000ef6:	f003 fcd1 	bl	800489c <HAL_ADCEx_InjectedConfigChannel>
 8000efa:	b108      	cbz	r0, 8000f00 <main+0x1a0>
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <main+0x19e>
  sConfig.Channel = ADC_CHANNEL_7;
 8000f00:	a34b      	add	r3, pc, #300	; (adr r3, 8001030 <main+0x2d0>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	2504      	movs	r5, #4
 8000f08:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	2204      	movs	r2, #4
 8000f10:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f12:	a914      	add	r1, sp, #80	; 0x50
 8000f14:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_7;
 8000f16:	e9cd 5618 	strd	r5, r6, [sp, #96]	; 0x60
 8000f1a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	f003 fa53 	bl	80043c8 <HAL_ADC_ConfigChannel>
 8000f22:	b108      	cbz	r0, 8000f28 <main+0x1c8>
 8000f24:	b672      	cpsid	i
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <main+0x1c6>
  sConfig.Channel = ADC_CHANNEL_9;
 8000f28:	a343      	add	r3, pc, #268	; (adr r3, 8001038 <main+0x2d8>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	a914      	add	r1, sp, #80	; 0x50
 8000f30:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_9;
 8000f32:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f36:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	f003 fa46 	bl	80043c8 <HAL_ADC_ConfigChannel>
 8000f3c:	4601      	mov	r1, r0
 8000f3e:	b108      	cbz	r0, 8000f44 <main+0x1e4>
 8000f40:	b672      	cpsid	i
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <main+0x1e2>
  hadc2.Instance = ADC2;
 8000f44:	4d42      	ldr	r5, [pc, #264]	; (8001050 <main+0x2f0>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000f46:	9001      	str	r0, [sp, #4]
 8000f48:	223c      	movs	r2, #60	; 0x3c
 8000f4a:	a81c      	add	r0, sp, #112	; 0x70
 8000f4c:	f009 f96e 	bl	800a22c <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f50:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000f52:	4a40      	ldr	r2, [pc, #256]	; (8001054 <main+0x2f4>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f54:	83a9      	strh	r1, [r5, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f56:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f58:	4628      	mov	r0, r5
  hadc2.Instance = ADC2;
 8000f5a:	602a      	str	r2, [r5, #0]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000f5c:	e9c5 1a02 	strd	r1, sl, [r5, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f60:	e9c5 1104 	strd	r1, r1, [r5, #16]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f64:	6069      	str	r1, [r5, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f66:	61ab      	str	r3, [r5, #24]
  hadc2.Init.NbrOfConversion = 1;
 8000f68:	622c      	str	r4, [r5, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f6e:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f72:	63e9      	str	r1, [r5, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f74:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f78:	f003 f920 	bl	80041bc <HAL_ADC_Init>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	b108      	cbz	r0, 8000f84 <main+0x224>
 8000f80:	b672      	cpsid	i
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <main+0x222>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f84:	267f      	movs	r6, #127	; 0x7f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f86:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f88:	2501      	movs	r5, #1
 8000f8a:	e9cd 561e 	strd	r5, r6, [sp, #120]	; 0x78
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f8e:	9424      	str	r4, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f90:	2504      	movs	r5, #4
 8000f92:	2600      	movs	r6, #0
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	2480      	movs	r4, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000f98:	a91c      	add	r1, sp, #112	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f9a:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8000f9e:	e9cd 5620 	strd	r5, r6, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000fa2:	e9cd 3426 	strd	r3, r4, [sp, #152]	; 0x98
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000fa6:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000faa:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000fae:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000fb2:	f003 fc73 	bl	800489c <HAL_ADCEx_InjectedConfigChannel>
 8000fb6:	b108      	cbz	r0, 8000fbc <main+0x25c>
 8000fb8:	b672      	cpsid	i
  while (1)
 8000fba:	e7fe      	b.n	8000fba <main+0x25a>
  hcordic.Instance = CORDIC;
 8000fbc:	4826      	ldr	r0, [pc, #152]	; (8001058 <main+0x2f8>)
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <main+0x2fc>)
 8000fc0:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000fc2:	f003 ffd5 	bl	8004f70 <HAL_CORDIC_Init>
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	b108      	cbz	r0, 8000fce <main+0x26e>
 8000fca:	b672      	cpsid	i
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0x26c>
  hdac1.Instance = DAC1;
 8000fce:	4c24      	ldr	r4, [pc, #144]	; (8001060 <main+0x300>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000fd0:	2230      	movs	r2, #48	; 0x30
 8000fd2:	a81c      	add	r0, sp, #112	; 0x70
 8000fd4:	f009 f92a 	bl	800a22c <memset>
  hdac1.Instance = DAC1;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <main+0x304>)
 8000fda:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f004 f85b 	bl	8005098 <HAL_DAC_Init>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	b108      	cbz	r0, 8000fea <main+0x28a>
 8000fe6:	b672      	cpsid	i
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x288>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fea:	2502      	movs	r5, #2
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fec:	4620      	mov	r0, r4
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fee:	2400      	movs	r4, #0
 8000ff0:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8000ff4:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ff8:	a91c      	add	r1, sp, #112	; 0x70
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ffa:	2401      	movs	r4, #1
 8000ffc:	2500      	movs	r5, #0
 8000ffe:	e9cd 4522 	strd	r4, r5, [sp, #136]	; 0x88
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001002:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001006:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800100a:	f004 f85b 	bl	80050c4 <HAL_DAC_ConfigChannel>
 800100e:	b108      	cbz	r0, 8001014 <main+0x2b4>
 8001010:	b672      	cpsid	i
  while (1)
 8001012:	e7fe      	b.n	8001012 <main+0x2b2>
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001014:	2300      	movs	r3, #0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001016:	4812      	ldr	r0, [pc, #72]	; (8001060 <main+0x300>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001018:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800101a:	2210      	movs	r2, #16
 800101c:	a91c      	add	r1, sp, #112	; 0x70
 800101e:	f004 f851 	bl	80050c4 <HAL_DAC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	b320      	cbz	r0, 8001070 <main+0x310>
 8001026:	b672      	cpsid	i
  while (1)
 8001028:	e7fe      	b.n	8001028 <main+0x2c8>
 800102a:	bf00      	nop
 800102c:	f3af 8000 	nop.w
 8001030:	1d500080 	.word	0x1d500080
 8001034:	00000006 	.word	0x00000006
 8001038:	25b00200 	.word	0x25b00200
 800103c:	0000000c 	.word	0x0000000c
 8001040:	40021000 	.word	0x40021000
 8001044:	48001000 	.word	0x48001000
 8001048:	20000844 	.word	0x20000844
 800104c:	48000400 	.word	0x48000400
 8001050:	2000073c 	.word	0x2000073c
 8001054:	50000100 	.word	0x50000100
 8001058:	200009a0 	.word	0x200009a0
 800105c:	40020c00 	.word	0x40020c00
 8001060:	20000728 	.word	0x20000728
 8001064:	50000800 	.word	0x50000800
 8001068:	10110000 	.word	0x10110000
 800106c:	0c900008 	.word	0x0c900008
  hi2c3.Instance = I2C3;
 8001070:	4c9e      	ldr	r4, [pc, #632]	; (80012ec <main+0x58c>)
 8001072:	499f      	ldr	r1, [pc, #636]	; (80012f0 <main+0x590>)
  hi2c3.Init.Timing = 0x00802172;
 8001074:	4a9f      	ldr	r2, [pc, #636]	; (80012f4 <main+0x594>)
  hi2c3.Init.OwnAddress1 = 0;
 8001076:	60a0      	str	r0, [r4, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	2601      	movs	r6, #1
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800107a:	4620      	mov	r0, r4
  hi2c3.Init.Timing = 0x00802172;
 800107c:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c3.Init.OwnAddress2 = 0;
 8001080:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001084:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001088:	6223      	str	r3, [r4, #32]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108a:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800108c:	f004 fb38 	bl	8005700 <HAL_I2C_Init>
 8001090:	4601      	mov	r1, r0
 8001092:	b108      	cbz	r0, 8001098 <main+0x338>
 8001094:	b672      	cpsid	i
  while (1)
 8001096:	e7fe      	b.n	8001096 <main+0x336>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001098:	4620      	mov	r0, r4
 800109a:	f004 fde5 	bl	8005c68 <HAL_I2CEx_ConfigAnalogFilter>
 800109e:	4601      	mov	r1, r0
 80010a0:	b108      	cbz	r0, 80010a6 <main+0x346>
 80010a2:	b672      	cpsid	i
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <main+0x344>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010a6:	4620      	mov	r0, r4
 80010a8:	f004 fe0a 	bl	8005cc0 <HAL_I2CEx_ConfigDigitalFilter>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b108      	cbz	r0, 80010b4 <main+0x354>
 80010b0:	b672      	cpsid	i
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <main+0x352>
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C3);
 80010b4:	4990      	ldr	r1, [pc, #576]	; (80012f8 <main+0x598>)
  hopamp1.Instance = OPAMP1;
 80010b6:	4891      	ldr	r0, [pc, #580]	; (80012fc <main+0x59c>)
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C3);
 80010b8:	684a      	ldr	r2, [r1, #4]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80010ba:	6043      	str	r3, [r0, #4]
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C3);
 80010bc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80010c0:	604a      	str	r2, [r1, #4]
  hopamp1.Instance = OPAMP1;
 80010c2:	4a8f      	ldr	r2, [pc, #572]	; (8001300 <main+0x5a0>)
 80010c4:	6002      	str	r2, [r0, #0]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 80010c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80010ca:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80010cc:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80010ce:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80010d0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80010d2:	f004 fe1f 	bl	8005d14 <HAL_OPAMP_Init>
 80010d6:	4602      	mov	r2, r0
 80010d8:	b108      	cbz	r0, 80010de <main+0x37e>
 80010da:	b672      	cpsid	i
  while (1)
 80010dc:	e7fe      	b.n	80010dc <main+0x37c>
  hopamp2.Instance = OPAMP2;
 80010de:	4889      	ldr	r0, [pc, #548]	; (8001304 <main+0x5a4>)
 80010e0:	4989      	ldr	r1, [pc, #548]	; (8001308 <main+0x5a8>)
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80010e2:	6102      	str	r2, [r0, #16]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO1;
 80010e4:	2720      	movs	r7, #32
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 80010e6:	e9c0 2201 	strd	r2, r2, [r0, #4]
  hopamp2.Init.InternalOutput = DISABLE;
 80010ea:	7502      	strb	r2, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80010ec:	6182      	str	r2, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80010ee:	62c2      	str	r2, [r0, #44]	; 0x2c
  hopamp2.Instance = OPAMP2;
 80010f0:	6001      	str	r1, [r0, #0]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO1;
 80010f2:	60c7      	str	r7, [r0, #12]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80010f4:	f004 fe0e 	bl	8005d14 <HAL_OPAMP_Init>
 80010f8:	4604      	mov	r4, r0
 80010fa:	b108      	cbz	r0, 8001100 <main+0x3a0>
 80010fc:	b672      	cpsid	i
  while (1)
 80010fe:	e7fe      	b.n	80010fe <main+0x39e>
  htim1.Instance = TIM1;
 8001100:	4d82      	ldr	r5, [pc, #520]	; (800130c <main+0x5ac>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001102:	900e      	str	r0, [sp, #56]	; 0x38
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001104:	4601      	mov	r1, r0
 8001106:	2234      	movs	r2, #52	; 0x34
 8001108:	a81c      	add	r0, sp, #112	; 0x70
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800110a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800110e:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001112:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8001116:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 800111a:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001122:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001126:	f009 f881 	bl	800a22c <memset>
  htim1.Instance = TIM1;
 800112a:	4979      	ldr	r1, [pc, #484]	; (8001310 <main+0x5b0>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800112c:	606c      	str	r4, [r5, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800112e:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001132:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001136:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	e9c5 6405 	strd	r6, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800113c:	e9c5 2303 	strd	r2, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001140:	60af      	str	r7, [r5, #8]
  htim1.Instance = TIM1;
 8001142:	6029      	str	r1, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001144:	f005 fcc4 	bl	8006ad0 <HAL_TIM_Base_Init>
 8001148:	b108      	cbz	r0, 800114e <main+0x3ee>
 800114a:	b672      	cpsid	i
  while (1)
 800114c:	e7fe      	b.n	800114c <main+0x3ec>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800114e:	4628      	mov	r0, r5
 8001150:	f005 fd44 	bl	8006bdc <HAL_TIM_PWM_Init>
 8001154:	b108      	cbz	r0, 800115a <main+0x3fa>
 8001156:	b672      	cpsid	i
  while (1)
 8001158:	e7fe      	b.n	8001158 <main+0x3f8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800115a:	2310      	movs	r3, #16
 800115c:	2206      	movs	r2, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800115e:	a90e      	add	r1, sp, #56	; 0x38
 8001160:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001162:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001166:	f005 fdbd 	bl	8006ce4 <HAL_TIM_SlaveConfigSynchro>
 800116a:	4603      	mov	r3, r0
 800116c:	b108      	cbz	r0, 8001172 <main+0x412>
 800116e:	b672      	cpsid	i
  while (1)
 8001170:	e7fe      	b.n	8001170 <main+0x410>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001172:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001174:	2470      	movs	r4, #112	; 0x70
 8001176:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001178:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800117a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001180:	f005 ff6c 	bl	800705c <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	b108      	cbz	r0, 800118a <main+0x42a>
 8001186:	b672      	cpsid	i
  while (1)
 8001188:	e7fe      	b.n	8001188 <main+0x428>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118a:	2460      	movs	r4, #96	; 0x60
 800118c:	2500      	movs	r5, #0
 800118e:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001192:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001194:	2400      	movs	r4, #0
 8001196:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001198:	485c      	ldr	r0, [pc, #368]	; (800130c <main+0x5ac>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800119a:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	a914      	add	r1, sp, #80	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119e:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 80011a2:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	f005 fe5f 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 80011aa:	b108      	cbz	r0, 80011b0 <main+0x450>
 80011ac:	b672      	cpsid	i
  while (1)
 80011ae:	e7fe      	b.n	80011ae <main+0x44e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b0:	4856      	ldr	r0, [pc, #344]	; (800130c <main+0x5ac>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	a914      	add	r1, sp, #80	; 0x50
 80011b6:	f005 fe57 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 80011ba:	b108      	cbz	r0, 80011c0 <main+0x460>
 80011bc:	b672      	cpsid	i
  while (1)
 80011be:	e7fe      	b.n	80011be <main+0x45e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c0:	4852      	ldr	r0, [pc, #328]	; (800130c <main+0x5ac>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	a914      	add	r1, sp, #80	; 0x50
 80011c6:	f005 fe4f 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 80011ca:	b108      	cbz	r0, 80011d0 <main+0x470>
 80011cc:	b672      	cpsid	i
  while (1)
 80011ce:	e7fe      	b.n	80011ce <main+0x46e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011d0:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011d2:	484e      	ldr	r0, [pc, #312]	; (800130c <main+0x5ac>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80011d4:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011d6:	a914      	add	r1, sp, #80	; 0x50
 80011d8:	220c      	movs	r2, #12
 80011da:	f005 fe45 	bl	8006e68 <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	b108      	cbz	r0, 80011e6 <main+0x486>
 80011e2:	b672      	cpsid	i
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <main+0x484>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e6:	9328      	str	r3, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ec:	2344      	movs	r3, #68	; 0x44
 80011ee:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 80011f2:	e9cd 4522 	strd	r4, r5, [sp, #136]	; 0x88
 80011f6:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80011fa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80011fe:	2205      	movs	r2, #5
 8001200:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001202:	4842      	ldr	r0, [pc, #264]	; (800130c <main+0x5ac>)
 8001204:	a91c      	add	r1, sp, #112	; 0x70
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001206:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800120a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800120e:	2400      	movs	r4, #0
 8001210:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
 8001214:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 8001218:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800121c:	f005 ff66 	bl	80070ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001220:	4605      	mov	r5, r0
 8001222:	b108      	cbz	r0, 8001228 <main+0x4c8>
 8001224:	b672      	cpsid	i
  while (1)
 8001226:	e7fe      	b.n	8001226 <main+0x4c6>
  huart1.Instance = USART1;
 8001228:	4c3a      	ldr	r4, [pc, #232]	; (8001314 <main+0x5b4>)
  HAL_TIM_MspPostInit(&htim1);
 800122a:	4838      	ldr	r0, [pc, #224]	; (800130c <main+0x5ac>)
 800122c:	f002 fda2 	bl	8003d74 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8001230:	4a39      	ldr	r2, [pc, #228]	; (8001318 <main+0x5b8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	60a5      	str	r5, [r4, #8]
  huart1.Init.BaudRate = 1843200;
 8001234:	f44f 13e1 	mov.w	r3, #1843200	; 0x1c2000
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001238:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800123a:	4620      	mov	r0, r4
  huart1.Init.Parity = UART_PARITY_NONE;
 800123c:	e9c4 5503 	strd	r5, r5, [r4, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001244:	e9c4 5508 	strd	r5, r5, [r4, #32]
  huart1.Init.BaudRate = 1843200;
 8001248:	e9c4 2300 	strd	r2, r3, [r4]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124c:	62a5      	str	r5, [r4, #40]	; 0x28
  huart1.Init.Mode = UART_MODE_TX_RX;
 800124e:	6166      	str	r6, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001250:	f006 f856 	bl	8007300 <HAL_UART_Init>
 8001254:	4601      	mov	r1, r0
 8001256:	b108      	cbz	r0, 800125c <main+0x4fc>
 8001258:	b672      	cpsid	i
  while (1)
 800125a:	e7fe      	b.n	800125a <main+0x4fa>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125c:	4620      	mov	r0, r4
 800125e:	f006 fa25 	bl	80076ac <HAL_UARTEx_SetTxFifoThreshold>
 8001262:	4601      	mov	r1, r0
 8001264:	b108      	cbz	r0, 800126a <main+0x50a>
 8001266:	b672      	cpsid	i
  while (1)
 8001268:	e7fe      	b.n	8001268 <main+0x508>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126a:	4620      	mov	r0, r4
 800126c:	f006 fa5c 	bl	8007728 <HAL_UARTEx_SetRxFifoThreshold>
 8001270:	b108      	cbz	r0, 8001276 <main+0x516>
 8001272:	b672      	cpsid	i
  while (1)
 8001274:	e7fe      	b.n	8001274 <main+0x514>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001276:	4620      	mov	r0, r4
 8001278:	f006 f9fa 	bl	8007670 <HAL_UARTEx_DisableFifoMode>
 800127c:	4604      	mov	r4, r0
 800127e:	b108      	cbz	r0, 8001284 <main+0x524>
 8001280:	b672      	cpsid	i
  while (1)
 8001282:	e7fe      	b.n	8001282 <main+0x522>
  MX_MotorControl_Init();
 8001284:	f000 ff0a 	bl	800209c <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	2104      	movs	r1, #4
 800128c:	2018      	movs	r0, #24
 800128e:	f003 fe9d 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001292:	2018      	movs	r0, #24
 8001294:	f003 fed2 	bl	800503c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001298:	4622      	mov	r2, r4
 800129a:	4621      	mov	r1, r4
 800129c:	2019      	movs	r0, #25
 800129e:	f003 fe95 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012a2:	2019      	movs	r0, #25
 80012a4:	f003 feca 	bl	800503c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80012a8:	4622      	mov	r2, r4
 80012aa:	2102      	movs	r1, #2
 80012ac:	2012      	movs	r0, #18
 80012ae:	f003 fe8d 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012b2:	2012      	movs	r0, #18
 80012b4:	f003 fec2 	bl	800503c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2103      	movs	r1, #3
 80012bc:	2025      	movs	r0, #37	; 0x25
 80012be:	f003 fe85 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012c2:	2025      	movs	r0, #37	; 0x25
 80012c4:	f003 feba 	bl	800503c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80012c8:	4622      	mov	r2, r4
 80012ca:	2103      	movs	r1, #3
 80012cc:	2028      	movs	r0, #40	; 0x28
 80012ce:	f003 fe7d 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012d2:	2028      	movs	r0, #40	; 0x28
 80012d4:	f003 feb2 	bl	800503c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012d8:	4630      	mov	r0, r6
 80012da:	4622      	mov	r2, r4
 80012dc:	4621      	mov	r1, r4
 80012de:	f003 fe75 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012e2:	4630      	mov	r0, r6
 80012e4:	f003 feaa 	bl	800503c <HAL_NVIC_EnableIRQ>
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <main+0x588>
 80012ea:	bf00      	nop
 80012ec:	200006dc 	.word	0x200006dc
 80012f0:	40007800 	.word	0x40007800
 80012f4:	00802172 	.word	0x00802172
 80012f8:	40010000 	.word	0x40010000
 80012fc:	200007a8 	.word	0x200007a8
 8001300:	40010300 	.word	0x40010300
 8001304:	200006a0 	.word	0x200006a0
 8001308:	40010304 	.word	0x40010304
 800130c:	200009c8 	.word	0x200009c8
 8001310:	40012c00 	.word	0x40012c00
 8001314:	20000910 	.word	0x20000910
 8001318:	40013800 	.word	0x40013800

0800131c <Error_Handler>:
 800131c:	b672      	cpsid	i
  while (1)
 800131e:	e7fe      	b.n	800131e <Error_Handler+0x2>

08001320 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001320:	4b01      	ldr	r3, [pc, #4]	; (8001328 <MC_StartMotor1+0x8>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	f000 b83c 	b.w	80013a0 <MCI_StartMotor>
 8001328:	20001d10 	.word	0x20001d10

0800132c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 800132c:	4b01      	ldr	r3, [pc, #4]	; (8001334 <MC_StopMotor1+0x8>)
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	f000 b840 	b.w	80013b4 <MCI_StopMotor>
 8001334:	20001d10 	.word	0x20001d10

08001338 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001338:	4b01      	ldr	r3, [pc, #4]	; (8001340 <MC_GetSTMStateMotor1+0x8>)
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	f000 b882 	b.w	8001444 <MCI_GetSTMState>
 8001340:	20001d10 	.word	0x20001d10

08001344 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8001344:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001346:	2400      	movs	r4, #0
 8001348:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 800134a:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 800134c:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 800134e:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001350:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8001352:	e9c0 1200 	strd	r1, r2, [r0]
}
 8001356:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 800135a:	6083      	str	r3, [r0, #8]
}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop

08001360 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8001360:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001362:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001366:	2401      	movs	r4, #1
 8001368:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 800136a:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 800136c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8001370:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001372:	8303      	strh	r3, [r0, #24]
}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop

08001378 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8001378:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800137a:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800137c:	2402      	movs	r4, #2
 800137e:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8001380:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8001382:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8001386:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001388:	8303      	strh	r3, [r0, #24]
}
 800138a:	4770      	bx	lr

0800138c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 800138c:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800138e:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001390:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8001392:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001396:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001398:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800139a:	b002      	add	sp, #8
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop

080013a0 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80013a0:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80013a2:	2103      	movs	r1, #3
{
 80013a4:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80013a6:	6800      	ldr	r0, [r0, #0]
 80013a8:	f007 ff20 	bl	80091ec <STM_NextState>

  if ( RetVal == true )
 80013ac:	b108      	cbz	r0, 80013b2 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80013ae:	2301      	movs	r3, #1
 80013b0:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 80013b2:	bd10      	pop	{r4, pc}

080013b4 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80013b4:	6800      	ldr	r0, [r0, #0]
 80013b6:	2107      	movs	r1, #7
 80013b8:	f007 bf18 	b.w	80091ec <STM_NextState>

080013bc <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 80013bc:	6800      	ldr	r0, [r0, #0]
 80013be:	f007 bf8b 	b.w	80092d8 <STM_FaultAcknowledged>
 80013c2:	bf00      	nop

080013c4 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 80013c4:	6800      	ldr	r0, [r0, #0]
 80013c6:	2101      	movs	r1, #1
 80013c8:	f007 bf10 	b.w	80091ec <STM_NextState>

080013cc <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 80013cc:	b178      	cbz	r0, 80013ee <MCI_ExecBufferedCommands+0x22>
{
 80013ce:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80013d0:	7e03      	ldrb	r3, [r0, #24]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	4604      	mov	r4, r0
 80013d6:	d000      	beq.n	80013da <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80013d8:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 80013da:	7b01      	ldrb	r1, [r0, #12]
 80013dc:	2902      	cmp	r1, #2
 80013de:	d020      	beq.n	8001422 <MCI_ExecBufferedCommands+0x56>
 80013e0:	2903      	cmp	r1, #3
 80013e2:	d005      	beq.n	80013f0 <MCI_ExecBufferedCommands+0x24>
 80013e4:	2901      	cmp	r1, #1
 80013e6:	d00c      	beq.n	8001402 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80013e8:	2303      	movs	r3, #3
 80013ea:	7623      	strb	r3, [r4, #24]
}
 80013ec:	bd10      	pop	{r4, pc}
 80013ee:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013f0:	6882      	ldr	r2, [r0, #8]
 80013f2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80013f6:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80013fa:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80013fc:	2302      	movs	r3, #2
 80013fe:	7623      	strb	r3, [r4, #24]
}
 8001400:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001402:	6883      	ldr	r3, [r0, #8]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 800140a:	6840      	ldr	r0, [r0, #4]
 800140c:	f007 fe2e 	bl	800906c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001410:	8ae2      	ldrh	r2, [r4, #22]
 8001412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001416:	6860      	ldr	r0, [r4, #4]
 8001418:	f007 fe2c 	bl	8009074 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800141c:	2800      	cmp	r0, #0
 800141e:	d0e3      	beq.n	80013e8 <MCI_ExecBufferedCommands+0x1c>
 8001420:	e7ec      	b.n	80013fc <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001422:	6883      	ldr	r3, [r0, #8]
 8001424:	2100      	movs	r1, #0
 8001426:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800142a:	6840      	ldr	r0, [r0, #4]
 800142c:	f007 fe1e 	bl	800906c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001430:	8ae2      	ldrh	r2, [r4, #22]
 8001432:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001436:	6860      	ldr	r0, [r4, #4]
 8001438:	f007 fe1c 	bl	8009074 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 800143c:	2800      	cmp	r0, #0
 800143e:	d0d3      	beq.n	80013e8 <MCI_ExecBufferedCommands+0x1c>
 8001440:	e7dc      	b.n	80013fc <MCI_ExecBufferedCommands+0x30>
 8001442:	bf00      	nop

08001444 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8001444:	6800      	ldr	r0, [r0, #0]
 8001446:	f007 bf45 	b.w	80092d4 <STM_GetState>
 800144a:	bf00      	nop

0800144c <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 800144c:	7e40      	ldrb	r0, [r0, #25]
 800144e:	4770      	bx	lr

08001450 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8001450:	7b03      	ldrb	r3, [r0, #12]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d005      	beq.n	8001462 <MCI_GetImposedMotorDirection+0x12>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d013      	beq.n	8001482 <MCI_GetImposedMotorDirection+0x32>
 800145a:	2b01      	cmp	r3, #1
 800145c:	d009      	beq.n	8001472 <MCI_GetImposedMotorDirection+0x22>
 800145e:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8001460:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8001462:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8001466:	2b00      	cmp	r3, #0
        retVal = -1;
 8001468:	bfac      	ite	ge
 800146a:	2001      	movge	r0, #1
 800146c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001470:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8001472:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8001476:	2b00      	cmp	r3, #0
        retVal = -1;
 8001478:	bfac      	ite	ge
 800147a:	2001      	movge	r0, #1
 800147c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001480:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8001482:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8001486:	2b00      	cmp	r3, #0
        retVal = -1;
 8001488:	bfac      	ite	ge
 800148a:	2001      	movge	r0, #1
 800148c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <MCI_GetLastRampFinalSpeed>:
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
 {
   return  pHandle->hFinalSpeed;
 }
 8001494:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop

0800149c <MCI_GetLastRampFinalTorque>:
  * @retval int16_t last ramp final torque sent by the user expressed in digit
  */
__weak int16_t MCI_GetLastRampFinalTorque( MCI_Handle_t * pHandle )
{
    return pHandle->hFinalTorque;
}
 800149c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <MCI_GetLastRampFinalDuration>:
  * @retval uint16_t last ramp final torque sent by the user expressed in digit
  */
__weak uint16_t MCI_GetLastRampFinalDuration( MCI_Handle_t * pHandle )
{
    return pHandle->hDurationms;
}
 80014a4:	8ac0      	ldrh	r0, [r0, #22]
 80014a6:	4770      	bx	lr

080014a8 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 80014a8:	6840      	ldr	r0, [r0, #4]
 80014aa:	f007 be2b 	b.w	8009104 <STC_StopRamp>
 80014ae:	bf00      	nop

080014b0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 80014b0:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 80014b2:	6840      	ldr	r0, [r0, #4]
 80014b4:	f007 fdc0 	bl	8009038 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 80014b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80014bc:	f007 bd68 	b.w	8008f90 <SPD_GetAvrgMecSpeedUnit>

080014c0 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80014c0:	6840      	ldr	r0, [r0, #4]
 80014c2:	f007 bdc3 	b.w	800904c <STC_GetMecSpeedRefUnit>
 80014c6:	bf00      	nop

080014c8 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 80014c8:	6882      	ldr	r2, [r0, #8]
 80014ca:	6810      	ldr	r0, [r2, #0]
 80014cc:	2300      	movs	r3, #0
 80014ce:	b282      	uxth	r2, r0
 80014d0:	f362 030f 	bfi	r3, r2, #0, #16
 80014d4:	0c00      	lsrs	r0, r0, #16
 80014d6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80014da:	b082      	sub	sp, #8
}
 80014dc:	4618      	mov	r0, r3
 80014de:	b002      	add	sp, #8
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 80014e4:	6882      	ldr	r2, [r0, #8]
 80014e6:	6850      	ldr	r0, [r2, #4]
 80014e8:	2300      	movs	r3, #0
 80014ea:	b282      	uxth	r2, r0
 80014ec:	f362 030f 	bfi	r3, r2, #0, #16
 80014f0:	0c00      	lsrs	r0, r0, #16
 80014f2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80014f6:	b082      	sub	sp, #8
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	b002      	add	sp, #8
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8001500:	6882      	ldr	r2, [r0, #8]
 8001502:	68d0      	ldr	r0, [r2, #12]
 8001504:	2300      	movs	r3, #0
 8001506:	b282      	uxth	r2, r0
 8001508:	f362 030f 	bfi	r3, r2, #0, #16
 800150c:	0c00      	lsrs	r0, r0, #16
 800150e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001512:	b082      	sub	sp, #8
}
 8001514:	4618      	mov	r0, r3
 8001516:	b002      	add	sp, #8
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 800151c:	6882      	ldr	r2, [r0, #8]
 800151e:	6910      	ldr	r0, [r2, #16]
 8001520:	2300      	movs	r3, #0
 8001522:	b282      	uxth	r2, r0
 8001524:	f362 030f 	bfi	r3, r2, #0, #16
 8001528:	0c00      	lsrs	r0, r0, #16
 800152a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800152e:	b082      	sub	sp, #8
}
 8001530:	4618      	mov	r0, r3
 8001532:	b002      	add	sp, #8
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8001538:	6882      	ldr	r2, [r0, #8]
 800153a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 800153e:	2300      	movs	r3, #0
 8001540:	b282      	uxth	r2, r0
 8001542:	f362 030f 	bfi	r3, r2, #0, #16
 8001546:	0c00      	lsrs	r0, r0, #16
 8001548:	f360 431f 	bfi	r3, r0, #16, #16
{
 800154c:	b082      	sub	sp, #8
}
 800154e:	4618      	mov	r0, r3
 8001550:	b002      	add	sp, #8
 8001552:	4770      	bx	lr

08001554 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8001554:	6882      	ldr	r2, [r0, #8]
 8001556:	f8d2 001a 	ldr.w	r0, [r2, #26]
 800155a:	2300      	movs	r3, #0
 800155c:	b282      	uxth	r2, r0
 800155e:	f362 030f 	bfi	r3, r2, #0, #16
 8001562:	0c00      	lsrs	r0, r0, #16
 8001564:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001568:	b082      	sub	sp, #8
}
 800156a:	4618      	mov	r0, r3
 800156c:	b002      	add	sp, #8
 800156e:	4770      	bx	lr

08001570 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8001570:	6883      	ldr	r3, [r0, #8]
}
 8001572:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001576:	4770      	bx	lr

08001578 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001578:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 800157a:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 800157e:	f007 fdfb 	bl	8009178 <STC_GetDefaultIqdref>
 8001582:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001586:	8220      	strh	r0, [r4, #16]
 8001588:	8263      	strh	r3, [r4, #18]
}
 800158a:	bd10      	pop	{r4, pc}

0800158c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 800158c:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800158e:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001592:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8001596:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800159a:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 800159e:	4250      	negs	r0, r2
 80015a0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 80015a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 80015a8:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 80015aa:	da05      	bge.n	80015b8 <MCM_Clarke+0x2c>
 80015ac:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 80015ae:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80015b2:	da0c      	bge.n	80015ce <MCM_Clarke+0x42>
 80015b4:	4a09      	ldr	r2, [pc, #36]	; (80015dc <MCM_Clarke+0x50>)
 80015b6:	e001      	b.n	80015bc <MCM_Clarke+0x30>
 80015b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2000      	movs	r0, #0
 80015c0:	b292      	uxth	r2, r2
 80015c2:	f363 000f 	bfi	r0, r3, #0, #16
 80015c6:	f362 401f 	bfi	r0, r2, #16, #16
}
 80015ca:	b004      	add	sp, #16
 80015cc:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <MCM_Clarke+0x50>)
 80015d0:	b20a      	sxth	r2, r1
 80015d2:	4282      	cmp	r2, r0
 80015d4:	bfb8      	it	lt
 80015d6:	4602      	movlt	r2, r0
 80015d8:	e7f0      	b.n	80015bc <MCM_Clarke+0x30>
 80015da:	bf00      	nop
 80015dc:	ffff8001 	.word	0xffff8001

080015e0 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MCM_Trig_Functions+0x28>)
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 80015e2:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 80015e6:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80015ea:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
 80015ee:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 80015f0:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80015f2:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 80015f4:	2000      	movs	r0, #0
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f362 000f 	bfi	r0, r2, #0, #16
 80015fc:	0c1b      	lsrs	r3, r3, #16
{
 80015fe:	b082      	sub	sp, #8
  return (CosSin.Components);
 8001600:	f363 401f 	bfi	r0, r3, #16, #16

}
 8001604:	b002      	add	sp, #8
 8001606:	4770      	bx	lr
 8001608:	40020c00 	.word	0x40020c00

0800160c <MCM_Park>:
{
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	4605      	mov	r5, r0
 8001612:	9001      	str	r0, [sp, #4]
 8001614:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001616:	4608      	mov	r0, r1
 8001618:	f7ff ffe2 	bl	80015e0 <MCM_Trig_Functions>
 800161c:	b22d      	sxth	r5, r5
 800161e:	b204      	sxth	r4, r0
 8001620:	1436      	asrs	r6, r6, #16
 8001622:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001624:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001628:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 800162c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001630:	da12      	bge.n	8001658 <MCM_Park+0x4c>
 8001632:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8001634:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001638:	4914      	ldr	r1, [pc, #80]	; (800168c <MCM_Park+0x80>)
 800163a:	da21      	bge.n	8001680 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 800163c:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001640:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8001644:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001648:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 800164c:	da07      	bge.n	800165e <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 800164e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001652:	da0f      	bge.n	8001674 <MCM_Park+0x68>
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <MCM_Park+0x80>)
 8001656:	e004      	b.n	8001662 <MCM_Park+0x56>
 8001658:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800165c:	e7ee      	b.n	800163c <MCM_Park+0x30>
 800165e:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8001662:	b28a      	uxth	r2, r1
 8001664:	2000      	movs	r0, #0
 8001666:	b29b      	uxth	r3, r3
 8001668:	f362 000f 	bfi	r0, r2, #0, #16
 800166c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001670:	b004      	add	sp, #16
 8001672:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <MCM_Park+0x80>)
 8001676:	b213      	sxth	r3, r2
 8001678:	4283      	cmp	r3, r0
 800167a:	bfb8      	it	lt
 800167c:	4603      	movlt	r3, r0
 800167e:	e7f0      	b.n	8001662 <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001680:	b21a      	sxth	r2, r3
 8001682:	4291      	cmp	r1, r2
 8001684:	bfb8      	it	lt
 8001686:	4611      	movlt	r1, r2
 8001688:	e7d8      	b.n	800163c <MCM_Park+0x30>
 800168a:	bf00      	nop
 800168c:	ffff8001 	.word	0xffff8001

08001690 <MCM_Rev_Park>:
{
 8001690:	b530      	push	{r4, r5, lr}
 8001692:	b085      	sub	sp, #20
 8001694:	4604      	mov	r4, r0
 8001696:	9001      	str	r0, [sp, #4]
 8001698:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800169a:	4608      	mov	r0, r1
 800169c:	f7ff ffa0 	bl	80015e0 <MCM_Trig_Functions>
 80016a0:	142d      	asrs	r5, r5, #16
 80016a2:	1403      	asrs	r3, r0, #16
 80016a4:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 80016a6:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80016aa:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 80016ac:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 80016b0:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 80016b4:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 80016b8:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 80016bc:	2000      	movs	r0, #0
 80016be:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80016c2:	f362 000f 	bfi	r0, r2, #0, #16
 80016c6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80016ca:	b005      	add	sp, #20
 80016cc:	bd30      	pop	{r4, r5, pc}
 80016ce:	bf00      	nop

080016d0 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 80016d0:	2800      	cmp	r0, #0
 80016d2:	dd09      	ble.n	80016e8 <MCM_Sqrt+0x18>
 80016d4:	b672      	cpsid	i
  {

    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <MCM_Sqrt+0x1c>)
 80016d8:	f240 1269 	movw	r2, #361	; 0x169
 80016dc:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80016de:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80016e0:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, (uint32_t) (wInput));
    /* Read sqrt and return */
    wtemprootnew = ((int32_t) (LL_CORDIC_ReadData(CORDIC))>>15);
 80016e2:	13c0      	asrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 80016e4:	b662      	cpsie	i
}
 80016e6:	4770      	bx	lr
	__enable_irq();

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 80016e8:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 80016ea:	4770      	bx	lr
 80016ec:	40020c00 	.word	0x40020c00

080016f0 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <FOC_Clear+0x74>)
 80016f8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80016fc:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001700:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8001702:	2500      	movs	r5, #0
{
 8001704:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 8001706:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 800170a:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 800170c:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 800170e:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001712:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 8001716:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 800171a:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 800171e:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8001724:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001726:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 800172a:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800172e:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001730:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001732:	50d5      	str	r5, [r2, r3]
 8001734:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001738:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800173a:	f006 fb43 	bl	8007dc4 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <FOC_Clear+0x7c>)
 8001740:	4629      	mov	r1, r5
 8001742:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001746:	f006 fb3d 	bl	8007dc4 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <FOC_Clear+0x80>)
 800174c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001750:	f007 fc74 	bl	800903c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <FOC_Clear+0x84>)
 8001756:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800175a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800175e:	f000 bde7 	b.w	8002330 <PWMC_SwitchOffPWM>
 8001762:	bf00      	nop
 8001764:	20000a54 	.word	0x20000a54
 8001768:	2000056c 	.word	0x2000056c
 800176c:	20000568 	.word	0x20000568
 8001770:	20000570 	.word	0x20000570
 8001774:	20000a4c 	.word	0x20000a4c

08001778 <MCboot>:
{
 8001778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 800177c:	f8df b178 	ldr.w	fp, [pc, #376]	; 80018f8 <MCboot+0x180>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001780:	4e4a      	ldr	r6, [pc, #296]	; (80018ac <MCboot+0x134>)
  bMCBootCompleted = 0;
 8001782:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80018fc <MCboot+0x184>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001786:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8001900 <MCboot+0x188>
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 800178a:	4c49      	ldr	r4, [pc, #292]	; (80018b0 <MCboot+0x138>)
  VSS_Init (&VirtualSpeedSensorM1);
 800178c:	4d49      	ldr	r5, [pc, #292]	; (80018b4 <MCboot+0x13c>)
  RVBS_Init(&BusVoltageSensor_M1);
 800178e:	f8df a174 	ldr.w	sl, [pc, #372]	; 8001904 <MCboot+0x18c>
{
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8001796:	4658      	mov	r0, fp
{
 8001798:	9303      	str	r3, [sp, #12]
  STM_Init(&STM[M1]);
 800179a:	f007 fd03 	bl	80091a4 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <MCboot+0x140>)
 80017a0:	4946      	ldr	r1, [pc, #280]	; (80018bc <MCboot+0x144>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017a2:	4847      	ldr	r0, [pc, #284]	; (80018c0 <MCboot+0x148>)
  pCLM[M1] = &CircleLimitationM1;
 80017a4:	6019      	str	r1, [r3, #0]
  bMCBootCompleted = 0;
 80017a6:	2700      	movs	r7, #0
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80017a8:	6030      	str	r0, [r6, #0]
  bMCBootCompleted = 0;
 80017aa:	f889 7000 	strb.w	r7, [r9]
  R3_2_Init(&PWM_Handle_M1);
 80017ae:	f006 ff23 	bl	80085f8 <R3_2_Init>
  ASPEP_start (&aspepOverUartA);
 80017b2:	4844      	ldr	r0, [pc, #272]	; (80018c4 <MCboot+0x14c>)
 80017b4:	f7fe fed6 	bl	8000564 <ASPEP_start>
  startTimers();
 80017b8:	f006 fbb8 	bl	8007f2c <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80017bc:	4640      	mov	r0, r8
 80017be:	f006 faed 	bl	8007d9c <PID_HandleInit>
  STO_PLL_Init (&STO_PLL_M1);
 80017c2:	4a41      	ldr	r2, [pc, #260]	; (80018c8 <MCboot+0x150>)
 80017c4:	4610      	mov	r0, r2
 80017c6:	f008 fc1f 	bl	800a008 <STO_PLL_Init>
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80017ca:	4641      	mov	r1, r8
 80017cc:	4a3e      	ldr	r2, [pc, #248]	; (80018c8 <MCboot+0x150>)
 80017ce:	6820      	ldr	r0, [r4, #0]
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80017d0:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8001908 <MCboot+0x190>
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80017d4:	f007 fc1a 	bl	800900c <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 80017d8:	4628      	mov	r0, r5
 80017da:	f008 f84f 	bl	800987c <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80017de:	6833      	ldr	r3, [r6, #0]
 80017e0:	6821      	ldr	r1, [r4, #0]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	462a      	mov	r2, r5
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <MCboot+0x154>)
 80017e8:	4839      	ldr	r0, [pc, #228]	; (80018d0 <MCboot+0x158>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80017ea:	4d3a      	ldr	r5, [pc, #232]	; (80018d4 <MCboot+0x15c>)
    STSPIN32G4_init( &HdlSTSPING4 );
 80017ec:	4e3a      	ldr	r6, [pc, #232]	; (80018d8 <MCboot+0x160>)
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80017ee:	f008 f93b 	bl	8009a68 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80017f2:	483a      	ldr	r0, [pc, #232]	; (80018dc <MCboot+0x164>)
 80017f4:	f006 fad2 	bl	8007d9c <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80017f8:	4839      	ldr	r0, [pc, #228]	; (80018e0 <MCboot+0x168>)
 80017fa:	f006 facf 	bl	8007d9c <PID_HandleInit>
  RVBS_Init(&BusVoltageSensor_M1);
 80017fe:	4650      	mov	r0, sl
 8001800:	f007 faec 	bl	8008ddc <RVBS_Init>
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001804:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <MCboot+0x16c>)
  NTC_Init(&TempSensor_M1);
 8001806:	4838      	ldr	r0, [pc, #224]	; (80018e8 <MCboot+0x170>)
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001808:	681b      	ldr	r3, [r3, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800180a:	e9c3 5a43 	strd	r5, sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensor_M1);
 800180e:	f006 fa81 	bl	8007d14 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001812:	4b36      	ldr	r3, [pc, #216]	; (80018ec <MCboot+0x174>)
 8001814:	4836      	ldr	r0, [pc, #216]	; (80018f0 <MCboot+0x178>)
 8001816:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001818:	f04f 0a01 	mov.w	sl, #1
  REMNG_Init(pREMNG[M1]);
 800181c:	f007 fb2c 	bl	8008e78 <REMNG_Init>
  FOC_Clear(M1);
 8001820:	4638      	mov	r0, r7
 8001822:	f7ff ff65 	bl	80016f0 <FOC_Clear>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001826:	6820      	ldr	r0, [r4, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001828:	f885 a024 	strb.w	sl, [r5, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800182c:	f007 fca4 	bl	8009178 <STC_GetDefaultIqdref>
 8001830:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001834:	8228      	strh	r0, [r5, #16]
 8001836:	826b      	strh	r3, [r5, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	f007 fc9d 	bl	8009178 <STC_GetDefaultIqdref>
 800183e:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001842:	462b      	mov	r3, r5
 8001844:	6822      	ldr	r2, [r4, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001846:	82a8      	strh	r0, [r5, #20]
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001848:	4659      	mov	r1, fp
 800184a:	4640      	mov	r0, r8
 800184c:	f7ff fd7a 	bl	8001344 <MCI_Init>
  MCI_ExecSpeedRamp(&Mci[M1],
 8001850:	6820      	ldr	r0, [r4, #0]
 8001852:	f007 fc8d 	bl	8009170 <STC_GetMecSpeedRefUnitDefault>
 8001856:	463a      	mov	r2, r7
 8001858:	4601      	mov	r1, r0
 800185a:	4640      	mov	r0, r8
 800185c:	f7ff fd80 	bl	8001360 <MCI_ExecSpeedRamp>
  pMCIList[M1] = &Mci[M1];
 8001860:	9b03      	ldr	r3, [sp, #12]
  DAC_Init(&DAC_Handle);
 8001862:	4824      	ldr	r0, [pc, #144]	; (80018f4 <MCboot+0x17c>)
  pMCIList[M1] = &Mci[M1];
 8001864:	f8c3 8000 	str.w	r8, [r3]
  DAC_Init(&DAC_Handle);
 8001868:	f7ff f9da 	bl	8000c20 <DAC_Init>
    STSPIN32G4_init( &HdlSTSPING4 );
 800186c:	4630      	mov	r0, r6
 800186e:	f007 fd45 	bl	80092fc <STSPIN32G4_init>
    STSPIN32G4_reset( &HdlSTSPING4 );
 8001872:	4630      	mov	r0, r6
 8001874:	f007 ff98 	bl	80097a8 <STSPIN32G4_reset>
    STSPIN32G4_setVCC( &HdlSTSPING4, (STSPIN32G4_confVCC){ .voltage = _12V,
 8001878:	f240 1303 	movw	r3, #259	; 0x103
 800187c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8001880:	f88d 701a 	strb.w	r7, [sp, #26]
 8001884:	9906      	ldr	r1, [sp, #24]
 8001886:	4630      	mov	r0, r6
 8001888:	f007 fd80 	bl	800938c <STSPIN32G4_setVCC>
    STSPIN32G4_setVDSP( &HdlSTSPING4, (STSPIN32G4_confVDSP){ .deglitchTime = _4us,
 800188c:	f240 1301 	movw	r3, #257	; 0x101
 8001890:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001894:	9905      	ldr	r1, [sp, #20]
 8001896:	4630      	mov	r0, r6
 8001898:	f007 fe94 	bl	80095c4 <STSPIN32G4_setVDSP>
    STSPIN32G4_clearFaults( &HdlSTSPING4 );
 800189c:	4630      	mov	r0, r6
 800189e:	f007 ff6d 	bl	800977c <STSPIN32G4_clearFaults>
  bMCBootCompleted = 1;
 80018a2:	f889 a000 	strb.w	sl, [r9]
}
 80018a6:	b009      	add	sp, #36	; 0x24
 80018a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018ac:	20000a4c 	.word	0x20000a4c
 80018b0:	20000570 	.word	0x20000570
 80018b4:	2000052c 	.word	0x2000052c
 80018b8:	20000a7c 	.word	0x20000a7c
 80018bc:	20000028 	.word	0x20000028
 80018c0:	20000274 	.word	0x20000274
 80018c4:	200005d8 	.word	0x200005d8
 80018c8:	200003a8 	.word	0x200003a8
 80018cc:	20000394 	.word	0x20000394
 80018d0:	2000031c 	.word	0x2000031c
 80018d4:	20000a54 	.word	0x20000a54
 80018d8:	20000a38 	.word	0x20000a38
 80018dc:	20000108 	.word	0x20000108
 80018e0:	200000dc 	.word	0x200000dc
 80018e4:	20000564 	.word	0x20000564
 80018e8:	20000504 	.word	0x20000504
 80018ec:	20000a80 	.word	0x20000a80
 80018f0:	20000304 	.word	0x20000304
 80018f4:	20000694 	.word	0x20000694
 80018f8:	20000a30 	.word	0x20000a30
 80018fc:	20000680 	.word	0x20000680
 8001900:	20000134 	.word	0x20000134
 8001904:	20000000 	.word	0x20000000
 8001908:	20000a14 	.word	0x20000a14

0800190c <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001910:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <FOC_CalcCurrRef+0x24>)
 8001914:	2426      	movs	r4, #38	; 0x26
 8001916:	fb04 3400 	mla	r4, r4, r0, r3
 800191a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800191e:	b103      	cbz	r3, 8001922 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001920:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <FOC_CalcCurrRef+0x28>)
 8001924:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001928:	f007 fbf0 	bl	800910c <STC_CalcTorqueReference>
 800192c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800192e:	8220      	strh	r0, [r4, #16]
}
 8001930:	bd10      	pop	{r4, pc}
 8001932:	bf00      	nop
 8001934:	20000a54 	.word	0x20000a54
 8001938:	20000570 	.word	0x20000570

0800193c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800193c:	4b01      	ldr	r3, [pc, #4]	; (8001944 <TSK_SetChargeBootCapDelayM1+0x8>)
 800193e:	8018      	strh	r0, [r3, #0]
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000682 	.word	0x20000682

08001948 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800194a:	8818      	ldrh	r0, [r3, #0]
 800194c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800194e:	fab0 f080 	clz	r0, r0
 8001952:	0940      	lsrs	r0, r0, #5
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000682 	.word	0x20000682

0800195c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800195c:	4b01      	ldr	r3, [pc, #4]	; (8001964 <TSK_SetStopPermanencyTimeM1+0x8>)
 800195e:	8018      	strh	r0, [r3, #0]
}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000686 	.word	0x20000686

08001968 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800196a:	8818      	ldrh	r0, [r3, #0]
 800196c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800196e:	fab0 f080 	clz	r0, r0
 8001972:	0940      	lsrs	r0, r0, #5
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000686 	.word	0x20000686

0800197c <TSK_MediumFrequencyTaskM1>:
{
 800197c:	b530      	push	{r4, r5, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 800197e:	4c96      	ldr	r4, [pc, #600]	; (8001bd8 <TSK_MediumFrequencyTaskM1+0x25c>)
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001980:	4896      	ldr	r0, [pc, #600]	; (8001bdc <TSK_MediumFrequencyTaskM1+0x260>)
{
 8001982:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001984:	2300      	movs	r3, #0
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001986:	4669      	mov	r1, sp
  int16_t wAux = 0;
 8001988:	f8ad 3000 	strh.w	r3, [sp]
  (void) STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800198c:	f008 fa44 	bl	8009e18 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001990:	6820      	ldr	r0, [r4, #0]
 8001992:	f006 fa97 	bl	8007ec4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001996:	4892      	ldr	r0, [pc, #584]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001998:	f007 fc9c 	bl	80092d4 <STM_GetState>
  switch ( StateM1 )
 800199c:	3803      	subs	r0, #3
 800199e:	2810      	cmp	r0, #16
 80019a0:	d85a      	bhi.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
 80019a2:	e8df f010 	tbh	[pc, r0, lsl #1]
 80019a6:	007c      	.short	0x007c
 80019a8:	008f0011 	.word	0x008f0011
 80019ac:	00ac00a5 	.word	0x00ac00a5
 80019b0:	00c800bf 	.word	0x00c800bf
 80019b4:	00590059 	.word	0x00590059
 80019b8:	00590059 	.word	0x00590059
 80019bc:	00590059 	.word	0x00590059
 80019c0:	00e400d5 	.word	0x00e400d5
 80019c4:	005b00f1 	.word	0x005b00f1
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80019c8:	4886      	ldr	r0, [pc, #536]	; (8001be4 <TSK_MediumFrequencyTaskM1+0x268>)
 80019ca:	f008 f8d3 	bl	8009b74 <RUC_Exec>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	f000 80f5 	beq.w	8001bbe <TSK_MediumFrequencyTaskM1+0x242>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 80019d4:	4b84      	ldr	r3, [pc, #528]	; (8001be8 <TSK_MediumFrequencyTaskM1+0x26c>)
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	f007 fb98 	bl	800910c <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 80019dc:	4b83      	ldr	r3, [pc, #524]	; (8001bec <TSK_MediumFrequencyTaskM1+0x270>)
 80019de:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 80019e2:	8218      	strh	r0, [r3, #16]
 80019e4:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 80019e6:	4882      	ldr	r0, [pc, #520]	; (8001bf0 <TSK_MediumFrequencyTaskM1+0x274>)
 80019e8:	f10d 0102 	add.w	r1, sp, #2
 80019ec:	f007 ff9a 	bl	8009924 <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 80019f0:	487c      	ldr	r0, [pc, #496]	; (8001be4 <TSK_MediumFrequencyTaskM1+0x268>)
 80019f2:	f008 f8f9 	bl	8009be8 <RUC_FirstAccelerationStageReached>
 80019f6:	b378      	cbz	r0, 8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 80019f8:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80019fc:	4877      	ldr	r0, [pc, #476]	; (8001bdc <TSK_MediumFrequencyTaskM1+0x260>)
 80019fe:	f008 fb3d 	bl	800a07c <STO_PLL_IsObserverConverged>
 8001a02:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 8001a04:	487b      	ldr	r0, [pc, #492]	; (8001bf4 <TSK_MediumFrequencyTaskM1+0x278>)
 8001a06:	f7ff fd23 	bl	8001450 <MCI_GetImposedMotorDirection>
 8001a0a:	b2c1      	uxtb	r1, r0
 8001a0c:	4873      	ldr	r0, [pc, #460]	; (8001bdc <TSK_MediumFrequencyTaskM1+0x260>)
 8001a0e:	f008 fbd7 	bl	800a1c0 <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8001a12:	4877      	ldr	r0, [pc, #476]	; (8001bf0 <TSK_MediumFrequencyTaskM1+0x274>)
 8001a14:	4621      	mov	r1, r4
 8001a16:	f008 f815 	bl	8009a44 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8001a1a:	b1ec      	cbz	r4, 8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001a1c:	486f      	ldr	r0, [pc, #444]	; (8001bdc <TSK_MediumFrequencyTaskM1+0x260>)
 8001a1e:	4d73      	ldr	r5, [pc, #460]	; (8001bec <TSK_MediumFrequencyTaskM1+0x270>)
        REMNG_Init( pREMNG[M1] );
 8001a20:	4c75      	ldr	r4, [pc, #468]	; (8001bf8 <TSK_MediumFrequencyTaskM1+0x27c>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001a22:	f007 fab1 	bl	8008f88 <SPD_GetElAngle>
 8001a26:	4601      	mov	r1, r0
 8001a28:	6868      	ldr	r0, [r5, #4]
 8001a2a:	f7ff fdef 	bl	800160c <MCM_Park>
 8001a2e:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 8001a30:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001a32:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8001a34:	f007 fa20 	bl	8008e78 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8001a38:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8001a3c:	6820      	ldr	r0, [r4, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f007 fa60 	bl	8008f04 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8001a44:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001a48:	6820      	ldr	r0, [r4, #0]
 8001a4a:	2219      	movs	r2, #25
 8001a4c:	f007 fa5a 	bl	8008f04 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8001a50:	4863      	ldr	r0, [pc, #396]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001a52:	2113      	movs	r1, #19
 8001a54:	f007 fbca 	bl	80091ec <STM_NextState>
}
 8001a58:	b003      	add	sp, #12
 8001a5a:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001a5c:	4861      	ldr	r0, [pc, #388]	; (8001be4 <TSK_MediumFrequencyTaskM1+0x268>)
 8001a5e:	f008 f889 	bl	8009b74 <RUC_Exec>
 8001a62:	2800      	cmp	r0, #0
 8001a64:	f000 80b1 	beq.w	8001bca <TSK_MediumFrequencyTaskM1+0x24e>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 8001a68:	4861      	ldr	r0, [pc, #388]	; (8001bf0 <TSK_MediumFrequencyTaskM1+0x274>)
 8001a6a:	a901      	add	r1, sp, #4
 8001a6c:	f007 ff5a 	bl	8009924 <VSS_CalcAvrgMecSpeedUnit>
 8001a70:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8001a72:	485f      	ldr	r0, [pc, #380]	; (8001bf0 <TSK_MediumFrequencyTaskM1+0x274>)
 8001a74:	f007 fff4 	bl	8009a60 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 8001a78:	b90c      	cbnz	r4, 8001a7e <TSK_MediumFrequencyTaskM1+0x102>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d0ec      	beq.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(&PIDSpeedHandle_M1) /
 8001a7e:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <TSK_MediumFrequencyTaskM1+0x270>)
 8001a80:	485e      	ldr	r0, [pc, #376]	; (8001bfc <TSK_MediumFrequencyTaskM1+0x280>)
 8001a82:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 8001a86:	f006 f9a9 	bl	8007ddc <PID_GetKIDivisor>
          PID_SetIntegralTerm( &PIDSpeedHandle_M1,
 8001a8a:	fb04 f100 	mul.w	r1, r4, r0
 8001a8e:	485b      	ldr	r0, [pc, #364]	; (8001bfc <TSK_MediumFrequencyTaskM1+0x280>)
 8001a90:	f006 f998 	bl	8007dc4 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8001a94:	2105      	movs	r1, #5
 8001a96:	4852      	ldr	r0, [pc, #328]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001a98:	f007 fba8 	bl	80091ec <STM_NextState>
    break;
 8001a9c:	e7dc      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( &Mci[M1] ) );
 8001a9e:	4855      	ldr	r0, [pc, #340]	; (8001bf4 <TSK_MediumFrequencyTaskM1+0x278>)
 8001aa0:	f7ff fcd6 	bl	8001450 <MCI_GetImposedMotorDirection>
 8001aa4:	4601      	mov	r1, r0
 8001aa6:	484f      	ldr	r0, [pc, #316]	; (8001be4 <TSK_MediumFrequencyTaskM1+0x268>)
 8001aa8:	f008 f81c 	bl	8009ae4 <RUC_Clear>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001aac:	4b54      	ldr	r3, [pc, #336]	; (8001c00 <TSK_MediumFrequencyTaskM1+0x284>)
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	f006 fc08 	bl	80082c4 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001ab4:	2014      	movs	r0, #20
 8001ab6:	f7ff ff41 	bl	800193c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001aba:	2110      	movs	r1, #16
 8001abc:	4848      	ldr	r0, [pc, #288]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001abe:	f007 fb95 	bl	80091ec <STM_NextState>
    break;
 8001ac2:	e7c9      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001ac4:	4c48      	ldr	r4, [pc, #288]	; (8001be8 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001ac6:	4945      	ldr	r1, [pc, #276]	; (8001bdc <TSK_MediumFrequencyTaskM1+0x260>)
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	f007 fab3 	bl	8009034 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff ff1c 	bl	800190c <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff ff1b 	bl	8001910 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001ada:	2106      	movs	r1, #6
 8001adc:	4840      	ldr	r0, [pc, #256]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001ade:	f007 fb85 	bl	80091ec <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001ae2:	6820      	ldr	r0, [r4, #0]
 8001ae4:	f007 fb56 	bl	8009194 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001ae8:	4842      	ldr	r0, [pc, #264]	; (8001bf4 <TSK_MediumFrequencyTaskM1+0x278>)
 8001aea:	f7ff fc6f 	bl	80013cc <MCI_ExecBufferedCommands>
    break;
 8001aee:	e7b3      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
    MCI_ExecBufferedCommands( &Mci[M1] );
 8001af0:	4840      	ldr	r0, [pc, #256]	; (8001bf4 <TSK_MediumFrequencyTaskM1+0x278>)
 8001af2:	f7ff fc6b 	bl	80013cc <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff ff0a 	bl	8001910 <FOC_CalcCurrRef>
    break;
 8001afc:	e7ac      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <TSK_MediumFrequencyTaskM1+0x284>)
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f006 fc53 	bl	80083ac <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8001b06:	2000      	movs	r0, #0
 8001b08:	f7ff fdf2 	bl	80016f0 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001b0c:	6820      	ldr	r0, [r4, #0]
 8001b0e:	f006 f8bd 	bl	8007c8c <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001b12:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b16:	f7ff ff21 	bl	800195c <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001b1a:	2108      	movs	r1, #8
 8001b1c:	4830      	ldr	r0, [pc, #192]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001b1e:	f007 fb65 	bl	80091ec <STM_NextState>
    break;
 8001b22:	e799      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001b24:	f7ff ff20 	bl	8001968 <TSK_StopPermanencyTimeHasElapsedM1>
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d095      	beq.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001b2c:	2109      	movs	r1, #9
 8001b2e:	482c      	ldr	r0, [pc, #176]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001b30:	f007 fb5c 	bl	80091ec <STM_NextState>
 8001b34:	e790      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <TSK_MediumFrequencyTaskM1+0x26c>)
 8001b38:	492d      	ldr	r1, [pc, #180]	; (8001bf0 <TSK_MediumFrequencyTaskM1+0x274>)
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	f007 fa7a 	bl	8009034 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8001b40:	482b      	ldr	r0, [pc, #172]	; (8001bf0 <TSK_MediumFrequencyTaskM1+0x274>)
 8001b42:	f007 fe8d 	bl	8009860 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8001b46:	2100      	movs	r1, #0
 8001b48:	4825      	ldr	r0, [pc, #148]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001b4a:	f007 fb4f 	bl	80091ec <STM_NextState>
}
 8001b4e:	e783      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001b50:	f7ff fefa 	bl	8001948 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	f43f af7f 	beq.w	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <TSK_MediumFrequencyTaskM1+0x284>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f000 fbe8 	bl	8002334 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001b64:	2111      	movs	r1, #17
 8001b66:	481e      	ldr	r0, [pc, #120]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001b68:	f007 fb40 	bl	80091ec <STM_NextState>
 8001b6c:	e774      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <TSK_MediumFrequencyTaskM1+0x284>)
 8001b70:	2101      	movs	r1, #1
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	f000 fbde 	bl	8002334 <PWMC_CurrentReadingCalibr>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	f43f af6d 	beq.w	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
      STM_NextState( &STM[M1], CLEAR );
 8001b7e:	2112      	movs	r1, #18
 8001b80:	4817      	ldr	r0, [pc, #92]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001b82:	f007 fb33 	bl	80091ec <STM_NextState>
 8001b86:	e767      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <TSK_MediumFrequencyTaskM1+0x26c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <TSK_MediumFrequencyTaskM1+0x270>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b8c:	6810      	ldr	r0, [r2, #0]
 8001b8e:	4918      	ldr	r1, [pc, #96]	; (8001bf0 <TSK_MediumFrequencyTaskM1+0x274>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001b96:	f007 fa4d 	bl	8009034 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001b9a:	4810      	ldr	r0, [pc, #64]	; (8001bdc <TSK_MediumFrequencyTaskM1+0x260>)
 8001b9c:	f008 fa06 	bl	8009fac <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001ba0:	480f      	ldr	r0, [pc, #60]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	f007 fb22 	bl	80091ec <STM_NextState>
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	f43f af55 	beq.w	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
      FOC_Clear( M1 );
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff fd9e 	bl	80016f0 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <TSK_MediumFrequencyTaskM1+0x284>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f006 fbac 	bl	8008314 <R3_2_SwitchOnPWM>
 8001bbc:	e74c      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001bc4:	f007 faf4 	bl	80091b0 <STM_FaultProcessing>
 8001bc8:	e70d      	b.n	80019e6 <TSK_MediumFrequencyTaskM1+0x6a>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001bca:	4602      	mov	r2, r0
 8001bcc:	2110      	movs	r1, #16
 8001bce:	4804      	ldr	r0, [pc, #16]	; (8001be0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001bd0:	f007 faee 	bl	80091b0 <STM_FaultProcessing>
 8001bd4:	e740      	b.n	8001a58 <TSK_MediumFrequencyTaskM1+0xdc>
 8001bd6:	bf00      	nop
 8001bd8:	20000564 	.word	0x20000564
 8001bdc:	200003a8 	.word	0x200003a8
 8001be0:	20000a30 	.word	0x20000a30
 8001be4:	2000031c 	.word	0x2000031c
 8001be8:	20000570 	.word	0x20000570
 8001bec:	20000a54 	.word	0x20000a54
 8001bf0:	2000052c 	.word	0x2000052c
 8001bf4:	20000a14 	.word	0x20000a14
 8001bf8:	20000a80 	.word	0x20000a80
 8001bfc:	20000134 	.word	0x20000134
 8001c00:	20000a4c 	.word	0x20000a4c

08001c04 <MC_Scheduler>:
  if (bMCBootCompleted == 1)
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <MC_Scheduler+0x7c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d000      	beq.n	8001c0e <MC_Scheduler+0xa>
 8001c0c:	4770      	bx	lr
{
 8001c0e:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001c10:	4c1c      	ldr	r4, [pc, #112]	; (8001c84 <MC_Scheduler+0x80>)
 8001c12:	8823      	ldrh	r3, [r4, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b1a3      	cbz	r3, 8001c42 <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 8001c18:	8823      	ldrh	r3, [r4, #0]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001c20:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <MC_Scheduler+0x84>)
 8001c22:	8813      	ldrh	r3, [r2, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b11b      	cbz	r3, 8001c30 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001c28:	8813      	ldrh	r3, [r2, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001c30:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <MC_Scheduler+0x88>)
 8001c32:	8813      	ldrh	r3, [r2, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b11b      	cbz	r3, 8001c40 <MC_Scheduler+0x3c>
      hStopPermanencyCounterM1--;
 8001c38:	8813      	ldrh	r3, [r2, #0]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	8013      	strh	r3, [r2, #0]
}
 8001c40:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 8001c42:	4d13      	ldr	r5, [pc, #76]	; (8001c90 <MC_Scheduler+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8001c44:	f7ff fe9a 	bl	800197c <TSK_MediumFrequencyTaskM1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001c4e:	6883      	ldr	r3, [r0, #8]
 8001c50:	4798      	blx	r3
 8001c52:	6068      	str	r0, [r5, #4]
      if (MCP_Over_UartA.rxBuffer)
 8001c54:	b130      	cbz	r0, 8001c64 <MC_Scheduler+0x60>
        if (MCP_Over_UartA.pTransportLayer->fGetBuffer (MCP_Over_UartA.pTransportLayer, (void **) &MCP_Over_UartA.txBuffer, MCTL_SYNC))
 8001c56:	4629      	mov	r1, r5
 8001c58:	220a      	movs	r2, #10
 8001c5a:	f851 0b08 	ldr.w	r0, [r1], #8
 8001c5e:	6803      	ldr	r3, [r0, #0]
 8001c60:	4798      	blx	r3
 8001c62:	b910      	cbnz	r0, 8001c6a <MC_Scheduler+0x66>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001c64:	2301      	movs	r3, #1
 8001c66:	8023      	strh	r3, [r4, #0]
 8001c68:	e7da      	b.n	8001c20 <MC_Scheduler+0x1c>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	f005 fdd2 	bl	8007814 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket (MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer, MCP_Over_UartA.txLength, MCTL_SYNC);
 8001c70:	6828      	ldr	r0, [r5, #0]
 8001c72:	89ea      	ldrh	r2, [r5, #14]
 8001c74:	6846      	ldr	r6, [r0, #4]
 8001c76:	68a9      	ldr	r1, [r5, #8]
 8001c78:	230a      	movs	r3, #10
 8001c7a:	47b0      	blx	r6
 8001c7c:	e7f2      	b.n	8001c64 <MC_Scheduler+0x60>
 8001c7e:	bf00      	nop
 8001c80:	20000680 	.word	0x20000680
 8001c84:	20000684 	.word	0x20000684
 8001c88:	20000682 	.word	0x20000682
 8001c8c:	20000686 	.word	0x20000686
 8001c90:	200005b4 	.word	0x200005b4

08001c94 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8001c98:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <TSK_HighFrequencyTask+0x174>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001c9a:	4c5c      	ldr	r4, [pc, #368]	; (8001e0c <TSK_HighFrequencyTask+0x178>)
  if ( STM[M1].bState == SWITCH_OVER )
 8001c9c:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001c9e:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001ca2:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 8001ca4:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001ca6:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8001ca8:	f000 80a1 	beq.w	8001dee <TSK_HighFrequencyTask+0x15a>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001cac:	4b58      	ldr	r3, [pc, #352]	; (8001e10 <TSK_HighFrequencyTask+0x17c>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001cae:	4f59      	ldr	r7, [pc, #356]	; (8001e14 <TSK_HighFrequencyTask+0x180>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001cb0:	6818      	ldr	r0, [r3, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001cb2:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8001e44 <TSK_HighFrequencyTask+0x1b0>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001cb6:	f007 f9bf 	bl	8009038 <STC_GetSpeedSensor>
 8001cba:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001cbc:	f007 f964 	bl	8008f88 <SPD_GetElAngle>
 8001cc0:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	f007 f968 	bl	8008f98 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001cc8:	a902      	add	r1, sp, #8
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f000 f9fa 	bl	80020c4 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001cd0:	f001 fe8a 	bl	80039e8 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001cd4:	f001 fe3e 	bl	8003954 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001cd8:	9802      	ldr	r0, [sp, #8]
 8001cda:	f7ff fc57 	bl	800158c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001cde:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001ce0:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001ce2:	f7ff fc93 	bl	800160c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001ce6:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <TSK_HighFrequencyTask+0x184>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001ce8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001cec:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001cee:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001cf0:	1ac9      	subs	r1, r1, r3
 8001cf2:	6810      	ldr	r0, [r2, #0]
 8001cf4:	f006 f8a0 	bl	8007e38 <PI_Controller>
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001cf8:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001cfc:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <TSK_HighFrequencyTask+0x188>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001cfe:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001d02:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8001d04:	1a89      	subs	r1, r1, r2
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	f006 f896 	bl	8007e38 <PI_Controller>
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001d0c:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <TSK_HighFrequencyTask+0x18c>)
 8001d0e:	f8ad 9004 	strh.w	r9, [sp, #4]
 8001d12:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001d16:	9901      	ldr	r1, [sp, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	f005 fd4b 	bl	80077b4 <Circle_Limitation>
 8001d1e:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001d20:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001d22:	fa0f f983 	sxth.w	r9, r3
 8001d26:	141d      	asrs	r5, r3, #16
 8001d28:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001d2a:	f007 f935 	bl	8008f98 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001d2e:	4631      	mov	r1, r6
 8001d30:	9801      	ldr	r0, [sp, #4]
 8001d32:	f7ff fcad 	bl	8001690 <MCM_Rev_Park>
 8001d36:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001d38:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001d3a:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001d3c:	f000 f9c4 	bl	80020c8 <PWMC_SetPhaseVoltage>
 8001d40:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 8001d42:	9802      	ldr	r0, [sp, #8]
 8001d44:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001d46:	9803      	ldr	r0, [sp, #12]
 8001d48:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001d4a:	9800      	ldr	r0, [sp, #0]
 8001d4c:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001d4e:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001d50:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8001d52:	f8a4 9016 	strh.w	r9, [r4, #22]
 8001d56:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8001d58:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001d5a:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8001d5e:	d03b      	beq.n	8001dd8 <TSK_HighFrequencyTask+0x144>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001d60:	4830      	ldr	r0, [pc, #192]	; (8001e24 <TSK_HighFrequencyTask+0x190>)
 8001d62:	f007 ff41 	bl	8009be8 <RUC_FirstAccelerationStageReached>
 8001d66:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001d68:	f8d8 0000 	ldr.w	r0, [r8]
 8001d6c:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001d6e:	482e      	ldr	r0, [pc, #184]	; (8001e28 <TSK_HighFrequencyTask+0x194>)
 8001d70:	f005 fd18 	bl	80077a4 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001d74:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001d76:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001d78:	482c      	ldr	r0, [pc, #176]	; (8001e2c <TSK_HighFrequencyTask+0x198>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001d7a:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001d7e:	f007 ff61 	bl	8009c44 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001d82:	482a      	ldr	r0, [pc, #168]	; (8001e2c <TSK_HighFrequencyTask+0x198>)
 8001d84:	f008 f8e8 	bl	8009f58 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8001d88:	b1bc      	cbz	r4, 8001dba <TSK_HighFrequencyTask+0x126>
    hState = STM_GetState(&STM[M1]);
 8001d8a:	481f      	ldr	r0, [pc, #124]	; (8001e08 <TSK_HighFrequencyTask+0x174>)
 8001d8c:	f007 faa2 	bl	80092d4 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001d90:	1f03      	subs	r3, r0, #4
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d914      	bls.n	8001dc2 <TSK_HighFrequencyTask+0x12e>
 8001d98:	2813      	cmp	r0, #19
 8001d9a:	d012      	beq.n	8001dc2 <TSK_HighFrequencyTask+0x12e>
  DAC_Exec(&DAC_Handle);
 8001d9c:	4824      	ldr	r0, [pc, #144]	; (8001e30 <TSK_HighFrequencyTask+0x19c>)
 8001d9e:	f7fe ff57 	bl	8000c50 <DAC_Exec>
  GLOBAL_TIMESTAMP++;
 8001da2:	4a24      	ldr	r2, [pc, #144]	; (8001e34 <TSK_HighFrequencyTask+0x1a0>)
  if (MCPA_UART_A.Mark != 0)
 8001da4:	4824      	ldr	r0, [pc, #144]	; (8001e38 <TSK_HighFrequencyTask+0x1a4>)
  GLOBAL_TIMESTAMP++;
 8001da6:	6813      	ldr	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8001da8:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001dac:	3301      	adds	r3, #1
 8001dae:	6013      	str	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8001db0:	b9b9      	cbnz	r1, 8001de2 <TSK_HighFrequencyTask+0x14e>
}
 8001db2:	2000      	movs	r0, #0
 8001db4:	b009      	add	sp, #36	; 0x24
 8001db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001dba:	481c      	ldr	r0, [pc, #112]	; (8001e2c <TSK_HighFrequencyTask+0x198>)
 8001dbc:	f008 f9e4 	bl	800a188 <STO_ResetPLL>
 8001dc0:	e7e3      	b.n	8001d8a <TSK_HighFrequencyTask+0xf6>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001dc2:	481a      	ldr	r0, [pc, #104]	; (8001e2c <TSK_HighFrequencyTask+0x198>)
 8001dc4:	f007 f8e0 	bl	8008f88 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001dc8:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001dca:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001dcc:	481b      	ldr	r0, [pc, #108]	; (8001e3c <TSK_HighFrequencyTask+0x1a8>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001dce:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001dd2:	f007 fd57 	bl	8009884 <VSS_CalcElAngle>
 8001dd6:	e7e1      	b.n	8001d9c <TSK_HighFrequencyTask+0x108>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	480b      	ldr	r0, [pc, #44]	; (8001e08 <TSK_HighFrequencyTask+0x174>)
 8001ddc:	f007 f9e8 	bl	80091b0 <STM_FaultProcessing>
 8001de0:	e7dc      	b.n	8001d9c <TSK_HighFrequencyTask+0x108>
    MCPA_dataLog (&MCPA_UART_A);
 8001de2:	f005 fded 	bl	80079c0 <MCPA_dataLog>
}
 8001de6:	2000      	movs	r0, #0
 8001de8:	b009      	add	sp, #36	; 0x24
 8001dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001dee:	4d14      	ldr	r5, [pc, #80]	; (8001e40 <TSK_HighFrequencyTask+0x1ac>)
 8001df0:	6828      	ldr	r0, [r5, #0]
 8001df2:	f007 f86b 	bl	8008ecc <REMNG_RampCompleted>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	f47f af58 	bne.w	8001cac <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8001dfc:	6828      	ldr	r0, [r5, #0]
 8001dfe:	f007 f843 	bl	8008e88 <REMNG_Calc>
 8001e02:	8220      	strh	r0, [r4, #16]
 8001e04:	e752      	b.n	8001cac <TSK_HighFrequencyTask+0x18>
 8001e06:	bf00      	nop
 8001e08:	20000a30 	.word	0x20000a30
 8001e0c:	20000a54 	.word	0x20000a54
 8001e10:	20000570 	.word	0x20000570
 8001e14:	20000a4c 	.word	0x20000a4c
 8001e18:	2000056c 	.word	0x2000056c
 8001e1c:	20000568 	.word	0x20000568
 8001e20:	20000a7c 	.word	0x20000a7c
 8001e24:	2000031c 	.word	0x2000031c
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	200003a8 	.word	0x200003a8
 8001e30:	20000694 	.word	0x20000694
 8001e34:	20000690 	.word	0x20000690
 8001e38:	20000588 	.word	0x20000588
 8001e3c:	2000052c 	.word	0x2000052c
 8001e40:	20000a80 	.word	0x20000a80
 8001e44:	20000a58 	.word	0x20000a58

08001e48 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <TSK_SafetyTask_PWMOFF+0x9c>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001e4c:	4e26      	ldr	r6, [pc, #152]	; (8001ee8 <TSK_SafetyTask_PWMOFF+0xa0>)
{
 8001e4e:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001e50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001e54:	f005 ff70 	bl	8007d38 <NTC_CalcAvTemp>
 8001e58:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001e5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001e5e:	f000 fa93 	bl	8002388 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001e62:	f025 050e 	bic.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001e66:	4328      	orrs	r0, r5
 8001e68:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001e6a:	b364      	cbz	r4, 8001ec6 <TSK_SafetyTask_PWMOFF+0x7e>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001e6c:	4f1f      	ldr	r7, [pc, #124]	; (8001eec <TSK_SafetyTask_PWMOFF+0xa4>)
 8001e6e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001e72:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001e76:	43ea      	mvns	r2, r5
 8001e78:	b292      	uxth	r2, r2
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	4638      	mov	r0, r7
 8001e7e:	f007 f997 	bl	80091b0 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001e82:	4638      	mov	r0, r7
 8001e84:	f007 fa26 	bl	80092d4 <STM_GetState>
 8001e88:	280a      	cmp	r0, #10
 8001e8a:	d00a      	beq.n	8001ea2 <TSK_SafetyTask_PWMOFF+0x5a>
 8001e8c:	280b      	cmp	r0, #11
 8001e8e:	d107      	bne.n	8001ea0 <TSK_SafetyTask_PWMOFF+0x58>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001e90:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001e94:	f000 fa4c 	bl	8002330 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001e98:	4815      	ldr	r0, [pc, #84]	; (8001ef0 <TSK_SafetyTask_PWMOFF+0xa8>)
 8001e9a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001e9e:	b9d3      	cbnz	r3, 8001ed6 <TSK_SafetyTask_PWMOFF+0x8e>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ea2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ea6:	f000 fa43 	bl	8002330 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8001eaa:	4811      	ldr	r0, [pc, #68]	; (8001ef0 <TSK_SafetyTask_PWMOFF+0xa8>)
 8001eac:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8001eb0:	b9ab      	cbnz	r3, 8001ede <TSK_SafetyTask_PWMOFF+0x96>
    FOC_Clear(bMotor);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7ff fc1c 	bl	80016f0 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <TSK_SafetyTask_PWMOFF+0xac>)
 8001eba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001ebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001ec2:	f005 bee3 	b.w	8007c8c <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8001ec6:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <TSK_SafetyTask_PWMOFF+0xb0>)
 8001ec8:	f006 ffa0 	bl	8008e0c <RVBS_CalcAvVbus>
 8001ecc:	f020 000e 	bic.w	r0, r0, #14
 8001ed0:	4305      	orrs	r5, r0
 8001ed2:	b2ad      	uxth	r5, r5
 8001ed4:	e7ca      	b.n	8001e6c <TSK_SafetyTask_PWMOFF+0x24>
}
 8001ed6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      MCPA_flushDataLog (&MCPA_UART_A);
 8001eda:	f005 be35 	b.w	8007b48 <MCPA_flushDataLog>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001ede:	f005 fe33 	bl	8007b48 <MCPA_flushDataLog>
 8001ee2:	e7e6      	b.n	8001eb2 <TSK_SafetyTask_PWMOFF+0x6a>
 8001ee4:	20000574 	.word	0x20000574
 8001ee8:	20000a4c 	.word	0x20000a4c
 8001eec:	20000a30 	.word	0x20000a30
 8001ef0:	20000588 	.word	0x20000588
 8001ef4:	20000564 	.word	0x20000564
 8001ef8:	20000000 	.word	0x20000000

08001efc <TSK_SafetyTask>:
{
 8001efc:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <TSK_SafetyTask+0x1c>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d000      	beq.n	8001f08 <TSK_SafetyTask+0xc>
}
 8001f06:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff ff9d 	bl	8001e48 <TSK_SafetyTask_PWMOFF>
}
 8001f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001f12:	f001 bcef 	b.w	80038f4 <RCM_ExecUserConv>
 8001f16:	bf00      	nop
 8001f18:	20000680 	.word	0x20000680

08001f1c <MC_RunMotorControlTasks>:
{
 8001f1c:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <MC_RunMotorControlTasks+0x14>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b903      	cbnz	r3, 8001f26 <MC_RunMotorControlTasks+0xa>
}
 8001f24:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001f26:	f7ff fe6d 	bl	8001c04 <MC_Scheduler>
    TSK_SafetyTask();
 8001f2a:	f7ff ffe7 	bl	8001efc <TSK_SafetyTask>
}
 8001f2e:	bd08      	pop	{r3, pc}
 8001f30:	20000680 	.word	0x20000680

08001f34 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001f34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <TSK_HardwareFaultTask+0x18>)
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	f006 fa37 	bl	80083ac <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001f42:	4803      	ldr	r0, [pc, #12]	; (8001f50 <TSK_HardwareFaultTask+0x1c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	f007 b932 	b.w	80091b0 <STM_FaultProcessing>
 8001f4c:	20000a4c 	.word	0x20000a4c
 8001f50:	20000a30 	.word	0x20000a30

08001f54 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001f54:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8001f56:	f7ff f9ef 	bl	8001338 <MC_GetSTMStateMotor1>
 8001f5a:	b918      	cbnz	r0, 8001f64 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001f5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8001f60:	f7ff b9de 	b.w	8001320 <MC_StartMotor1>
}
 8001f64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8001f68:	f7ff b9e0 	b.w	800132c <MC_StopMotor1>

08001f6c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001f6c:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f6e:	4a42      	ldr	r2, [pc, #264]	; (8002078 <mc_lock_pins+0x10c>)
 8001f70:	4942      	ldr	r1, [pc, #264]	; (800207c <mc_lock_pins+0x110>)
 8001f72:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f74:	2002      	movs	r0, #2
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f7a:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8001f7c:	69d3      	ldr	r3, [r2, #28]
 8001f7e:	930d      	str	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  (void) temp;
 8001f84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f86:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f88:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f8a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f8c:	69d9      	ldr	r1, [r3, #28]
 8001f8e:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 8001f90:	980c      	ldr	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f92:	493b      	ldr	r1, [pc, #236]	; (8002080 <mc_lock_pins+0x114>)
 8001f94:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f96:	2008      	movs	r0, #8
 8001f98:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f9a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f9c:	69d9      	ldr	r1, [r3, #28]
 8001f9e:	910b      	str	r1, [sp, #44]	; 0x2c
  (void) temp;
 8001fa0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fa2:	4938      	ldr	r1, [pc, #224]	; (8002084 <mc_lock_pins+0x118>)
 8001fa4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fa6:	2004      	movs	r0, #4
 8001fa8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001faa:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fac:	69d8      	ldr	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fae:	4936      	ldr	r1, [pc, #216]	; (8002088 <mc_lock_pins+0x11c>)
  temp = READ_REG(GPIOx->LCKR);
 8001fb0:	900a      	str	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fb2:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fb4:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  (void) temp;
 8001fb8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fba:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fbc:	61cc      	str	r4, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fbe:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fc0:	69c9      	ldr	r1, [r1, #28]
 8001fc2:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 8001fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fc6:	4931      	ldr	r1, [pc, #196]	; (800208c <mc_lock_pins+0x120>)
 8001fc8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fca:	2040      	movs	r0, #64	; 0x40
 8001fcc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fce:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fd0:	69d9      	ldr	r1, [r3, #28]
 8001fd2:	9108      	str	r1, [sp, #32]
  (void) temp;
 8001fd4:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fd6:	492e      	ldr	r1, [pc, #184]	; (8002090 <mc_lock_pins+0x124>)
 8001fd8:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fda:	2020      	movs	r0, #32
 8001fdc:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fde:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001fe0:	69d2      	ldr	r2, [r2, #28]
 8001fe2:	9207      	str	r2, [sp, #28]
  (void) temp;
 8001fe4:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fe6:	4a2b      	ldr	r2, [pc, #172]	; (8002094 <mc_lock_pins+0x128>)
 8001fe8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001fee:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	9206      	str	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff8:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ffc:	f44f 7100 	mov.w	r1, #512	; 0x200
  (void) temp;
 8002000:	9806      	ldr	r0, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002002:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002004:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002006:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	9205      	str	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800200c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002010:	f44f 3284 	mov.w	r2, #67584	; 0x10800
  (void) temp;
 8002014:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002016:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002018:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800201a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	9204      	str	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002020:	f44f 6180 	mov.w	r1, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002024:	f44f 3282 	mov.w	r2, #66560	; 0x10400
  (void) temp;
 8002028:	9804      	ldr	r0, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800202a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800202c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800202e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	9203      	str	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002038:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 800203c:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800203e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002040:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002042:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002044:	69da      	ldr	r2, [r3, #28]
 8002046:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800204c:	f44f 3288 	mov.w	r2, #69632	; 0x11000
  (void) temp;
 8002050:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002052:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002054:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002056:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002058:	69da      	ldr	r2, [r3, #28]
 800205a:	9201      	str	r2, [sp, #4]
  (void) temp;
 800205c:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <mc_lock_pins+0x12c>)
 8002060:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002066:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002068:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	9300      	str	r3, [sp, #0]
  (void) temp;
 800206e:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002070:	b00e      	add	sp, #56	; 0x38
 8002072:	bc30      	pop	{r4, r5}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	48000800 	.word	0x48000800
 800207c:	00010002 	.word	0x00010002
 8002080:	00010008 	.word	0x00010008
 8002084:	00010004 	.word	0x00010004
 8002088:	48000400 	.word	0x48000400
 800208c:	00010040 	.word	0x00010040
 8002090:	00010020 	.word	0x00010020
 8002094:	00010080 	.word	0x00010080
 8002098:	00010100 	.word	0x00010100

0800209c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800209c:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800209e:	f004 fadb 	bl	8006658 <HAL_RCC_GetHCLKFreq>
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MX_MotorControl_Init+0x20>)
 80020a4:	fba3 3000 	umull	r3, r0, r3, r0
 80020a8:	09c0      	lsrs	r0, r0, #7
 80020aa:	f002 ffd5 	bl	8005058 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80020ae:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MX_MotorControl_Init+0x24>)
 80020b0:	f7ff fb62 	bl	8001778 <MCboot>
  mc_lock_pins();

}
 80020b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80020b8:	f7ff bf58 	b.w	8001f6c <mc_lock_pins>
 80020bc:	10624dd3 	.word	0x10624dd3
 80020c0:	20001d10 	.word	0x20001d10

080020c4 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 80020c4:	6843      	ldr	r3, [r0, #4]
 80020c6:	4718      	bx	r3

080020c8 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 80020c8:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80020ca:	f8b0 605c 	ldrh.w	r6, [r0, #92]	; 0x5c
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80020ce:	8f03      	ldrh	r3, [r0, #56]	; 0x38
{
 80020d0:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80020d2:	140c      	asrs	r4, r1, #16
{
 80020d4:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80020d6:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80020da:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80020dc:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80020e0:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 80020e4:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 80020e8:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 80020ec:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 80020f0:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80020f8:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 80020fc:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002100:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8002104:	db7b      	blt.n	80021fe <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8002106:	f1b1 3fff 	cmp.w	r1, #4294967295
 800210a:	db50      	blt.n	80021ae <PWMC_SetPhaseVoltage+0xe6>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800210c:	1aad      	subs	r5, r5, r2
 800210e:	bf44      	itt	mi
 8002110:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002114:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8002118:	2900      	cmp	r1, #0
 800211a:	bfbc      	itt	lt
 800211c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002120:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8002124:	2b00      	cmp	r3, #0
 8002126:	bfb8      	it	lt
 8002128:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800212c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002130:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002134:	bfb8      	it	lt
 8002136:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 800213a:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 800213c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002140:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8002144:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8002148:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
      pHandle->lowDuty = wTimePhB;
 800214c:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8002150:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));

  if ( pHandle->DTTest == 1u )
 8002154:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002158:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800215c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002160:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002164:	b292      	uxth	r2, r2
 8002166:	b289      	uxth	r1, r1
 8002168:	b29b      	uxth	r3, r3
 800216a:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 800216c:	8742      	strh	r2, [r0, #58]	; 0x3a
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 800216e:	8781      	strh	r1, [r0, #60]	; 0x3c
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8002170:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if ( pHandle->DTTest == 1u )
 8002172:	d118      	bne.n	80021a6 <PWMC_SetPhaseVoltage+0xde>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8002174:	f9b0 404c 	ldrsh.w	r4, [r0, #76]	; 0x4c
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8002178:	f9b0 504e 	ldrsh.w	r5, [r0, #78]	; 0x4e
    if ( pHandle->Ia > 0 )
 800217c:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 800217e:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
 8002182:	bfcc      	ite	gt
 8002184:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8002186:	1b12      	suble	r2, r2, r4
 8002188:	b292      	uxth	r2, r2
 800218a:	8742      	strh	r2, [r0, #58]	; 0x3a
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 800218c:	f9b0 2050 	ldrsh.w	r2, [r0, #80]	; 0x50
    if ( pHandle->Ib > 0 )
 8002190:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8002192:	bfcc      	ite	gt
 8002194:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8002196:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8002198:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800219a:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800219c:	bfcc      	ite	gt
 800219e:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80021a0:	1b1b      	suble	r3, r3, r4
 80021a2:	8781      	strh	r1, [r0, #60]	; 0x3c
 80021a4:	87c3      	strh	r3, [r0, #62]	; 0x3e
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80021a6:	6983      	ldr	r3, [r0, #24]
}
 80021a8:	b003      	add	sp, #12
 80021aa:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80021ac:	4718      	bx	r3
      if ( wX <= 0 )
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	dd4b      	ble.n	800224a <PWMC_SetPhaseVoltage+0x182>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80021b2:	1aa5      	subs	r5, r4, r2
 80021b4:	bf44      	itt	mi
 80021b6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80021ba:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80021be:	2900      	cmp	r1, #0
 80021c0:	bfb8      	it	lt
 80021c2:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 80021c6:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 80021ca:	bfb8      	it	lt
 80021cc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 80021d0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80021d4:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 80021d6:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80021d8:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80021dc:	bfb8      	it	lt
 80021de:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80021e2:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80021e6:	bfb8      	it	lt
 80021e8:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80021ec:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 80021f0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 80021f4:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 80021f8:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhC;
 80021fc:	e7aa      	b.n	8002154 <PWMC_SetPhaseVoltage+0x8c>
    if ( wZ < 0 )
 80021fe:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002202:	db6f      	blt.n	80022e4 <PWMC_SetPhaseVoltage+0x21c>
      if ( wX <= 0 )
 8002204:	2c00      	cmp	r4, #0
 8002206:	dd47      	ble.n	8002298 <PWMC_SetPhaseVoltage+0x1d0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002208:	1b2d      	subs	r5, r5, r4
 800220a:	bf48      	it	mi
 800220c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8002210:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002214:	bf48      	it	mi
 8002216:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800221a:	2b00      	cmp	r3, #0
 800221c:	bfb8      	it	lt
 800221e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8002222:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002226:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800222a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 800222e:	bfb8      	it	lt
 8002230:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8002234:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002238:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 800223c:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8002240:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8002244:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8002248:	e784      	b.n	8002154 <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800224a:	1b2d      	subs	r5, r5, r4
 800224c:	bf44      	itt	mi
 800224e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002252:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8002256:	2b00      	cmp	r3, #0
 8002258:	bfb8      	it	lt
 800225a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 800225e:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8002262:	bfb8      	it	lt
 8002264:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8002268:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhB = wTimePhC + wX / 131072;
 800226c:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800226e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002272:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002276:	bfb8      	it	lt
 8002278:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 800227c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002280:	bfb8      	it	lt
 8002282:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002286:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 800228a:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 800228e:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8002292:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhB;
 8002296:	e75d      	b.n	8002154 <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002298:	1aa5      	subs	r5, r4, r2
 800229a:	bf44      	itt	mi
 800229c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80022a0:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80022a4:	2900      	cmp	r1, #0
 80022a6:	bfb8      	it	lt
 80022a8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 80022ac:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 80022b0:	bfb8      	it	lt
 80022b2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 80022b6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80022ba:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 80022bc:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80022be:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80022c2:	bfb8      	it	lt
 80022c4:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 80022c8:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80022cc:	bfb8      	it	lt
 80022ce:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80022d2:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 80022d6:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 80022da:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 80022de:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 80022e2:	e737      	b.n	8002154 <PWMC_SetPhaseVoltage+0x8c>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 80022e4:	1aad      	subs	r5, r5, r2
 80022e6:	bf44      	itt	mi
 80022e8:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 80022ec:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 80022f0:	2900      	cmp	r1, #0
 80022f2:	bfbc      	itt	lt
 80022f4:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80022f8:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bfb8      	it	lt
 8002300:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002304:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002308:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800230c:	bfb8      	it	lt
 800230e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8002312:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8002314:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002318:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 800231c:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhC;
 8002320:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8002324:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      pHandle->highDuty = wTimePhB;
 8002328:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
 800232c:	e712      	b.n	8002154 <PWMC_SetPhaseVoltage+0x8c>
 800232e:	bf00      	nop

08002330 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8002330:	6883      	ldr	r3, [r0, #8]
 8002332:	4718      	bx	r3

08002334 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8002334:	b510      	push	{r4, lr}
 8002336:	4604      	mov	r4, r0
 8002338:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800233a:	b199      	cbz	r1, 8002364 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800233c:	2901      	cmp	r1, #1
 800233e:	d002      	beq.n	8002346 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002340:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8002342:	b002      	add	sp, #8
 8002344:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8002346:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 800234a:	b1cb      	cbz	r3, 8002380 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 800234c:	3b01      	subs	r3, #1
 800234e:	b29b      	uxth	r3, r3
 8002350:	9101      	str	r1, [sp, #4]
 8002352:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f2      	bne.n	8002340 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800235a:	6903      	ldr	r3, [r0, #16]
 800235c:	4798      	blx	r3
        retVal = true;
 800235e:	9901      	ldr	r1, [sp, #4]
 8002360:	4608      	mov	r0, r1
 8002362:	e7ee      	b.n	8002342 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8002364:	f7ff ffe4 	bl	8002330 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8002368:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800236c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e5      	bne.n	8002340 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8002374:	4620      	mov	r0, r4
 8002376:	6923      	ldr	r3, [r4, #16]
 8002378:	4798      	blx	r3
      retVal = true;
 800237a:	2001      	movs	r0, #1
}
 800237c:	b002      	add	sp, #8
 800237e:	bd10      	pop	{r4, pc}
      retVal = true;
 8002380:	4608      	mov	r0, r1
}
 8002382:	b002      	add	sp, #8
 8002384:	bd10      	pop	{r4, pc}
 8002386:	bf00      	nop

08002388 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8002388:	69c3      	ldr	r3, [r0, #28]
 800238a:	4718      	bx	r3

0800238c <RI_SetRegCommandParser>:
static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize);

__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 800238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002390:	4681      	mov	r9, r0
  uint16_t * dataElementID;
  uint8_t * rxData = pHandle->rxBuffer;
  uint8_t * txData = pHandle->txBuffer;
  int16_t rxLength = pHandle->rxLength;
 8002392:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  uint16_t size;
  uint8_t retVal=MCP_CMD_OK;
  uint8_t accessResult;
  uint8_t number_of_item =0;
  pHandle->txLength = 0;
 8002396:	2300      	movs	r3, #0
  while (rxLength > 0)
 8002398:	4298      	cmp	r0, r3
  uint8_t * txData = pHandle->txBuffer;
 800239a:	e9d9 6201 	ldrd	r6, r2, [r9, #4]
{
 800239e:	b089      	sub	sp, #36	; 0x24
  pHandle->txLength = 0;
 80023a0:	f8a9 300e 	strh.w	r3, [r9, #14]
  while (rxLength > 0)
 80023a4:	f340 8082 	ble.w	80024ac <RI_SetRegCommandParser+0x120>
  uint8_t * txData = pHandle->txBuffer;
 80023a8:	4690      	mov	r8, r2
 80023aa:	440a      	add	r2, r1
  uint8_t retVal=MCP_CMD_OK;
 80023ac:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80023b0:	f1c8 0301 	rsb	r3, r8, #1
 80023b4:	f8cd 9000 	str.w	r9, [sp]
 80023b8:	4699      	mov	r9, r3
  {
     number_of_item ++;
     dataElementID = (uint16_t *) rxData;
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
     rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 80023ba:	4637      	mov	r7, r6
  uint8_t retVal = MCP_CMD_OK;
  uint16_t regID = dataID & REG_MASK;
  typeID = dataID & TYPE_MASK;
  motorID = (dataID & MOTOR_MASK)-1;

  MCI_Handle_t * pMCI = &Mci[motorID];
 80023bc:	4bb6      	ldr	r3, [pc, #728]	; (8002698 <RI_SetRegCommandParser+0x30c>)
     accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 80023be:	f837 cb02 	ldrh.w	ip, [r7], #2
  motorID = (dataID & MOTOR_MASK)-1;
 80023c2:	f00c 0507 	and.w	r5, ip, #7
 80023c6:	3d01      	subs	r5, #1
  MCI_Handle_t * pMCI = &Mci[motorID];
 80023c8:	b2ec      	uxtb	r4, r5
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80023ca:	fa1f fa80 	uxth.w	sl, r0
 80023ce:	f00c 0138 	and.w	r1, ip, #56	; 0x38
 80023d2:	f1aa 0002 	sub.w	r0, sl, #2
  MCI_Handle_t * pMCI = &Mci[motorID];
 80023d6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  uint16_t regID = dataID & REG_MASK;
 80023da:	f02c 0207 	bic.w	r2, ip, #7
 80023de:	3908      	subs	r1, #8
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80023e0:	fa1f fb80 	uxth.w	fp, r0
  MCI_Handle_t * pMCI = &Mci[motorID];
 80023e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  motorID = (dataID & MOTOR_MASK)-1;
 80023e8:	b2ed      	uxtb	r5, r5
  uint16_t regID = dataID & REG_MASK;
 80023ea:	b292      	uxth	r2, r2
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80023ec:	b200      	sxth	r0, r0

  switch (typeID)
 80023ee:	2920      	cmp	r1, #32
 80023f0:	d812      	bhi.n	8002418 <RI_SetRegCommandParser+0x8c>
 80023f2:	e8df f001 	tbb	[pc, r1]
 80023f6:	11b8      	.short	0x11b8
 80023f8:	11111111 	.word	0x11111111
 80023fc:	11941111 	.word	0x11941111
 8002400:	11111111 	.word	0x11111111
 8002404:	11821111 	.word	0x11821111
 8002408:	11111111 	.word	0x11111111
 800240c:	11621111 	.word	0x11621111
 8002410:	11111111 	.word	0x11111111
 8002414:	1111      	.short	0x1111
 8002416:	29          	.byte	0x29
 8002417:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002418:	2507      	movs	r5, #7
     if (number_of_item == 1 && rxLength == 0)
 800241a:	eb08 0209 	add.w	r2, r8, r9
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	2a01      	cmp	r2, #1
 8002422:	d03d      	beq.n	80024a0 <RI_SetRegCommandParser+0x114>
       if (txSyncFreeSpace !=0 )
 8002424:	9b01      	ldr	r3, [sp, #4]
 8002426:	4598      	cmp	r8, r3
 8002428:	f000 80ad 	beq.w	8002586 <RI_SetRegCommandParser+0x1fa>
         *txData = accessResult;
 800242c:	f808 5b01 	strb.w	r5, [r8], #1
         pHandle->txLength++;
 8002430:	9b00      	ldr	r3, [sp, #0]
 8002432:	89da      	ldrh	r2, [r3, #14]
 8002434:	3201      	adds	r2, #1
 8002436:	81da      	strh	r2, [r3, #14]
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002438:	2d00      	cmp	r5, #0
 800243a:	f040 80a9 	bne.w	8002590 <RI_SetRegCommandParser+0x204>
  while (rxLength > 0)
 800243e:	2800      	cmp	r0, #0
 8002440:	f340 834a 	ble.w	8002ad8 <RI_SetRegCommandParser+0x74c>
 8002444:	463e      	mov	r6, r7
 8002446:	e7b8      	b.n	80023ba <RI_SetRegCommandParser+0x2e>
      RI_MovString (charData, dummy, size, dataAvailable);
    }
    break;
  case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *) data;
 8002448:	f8b6 e002 	ldrh.w	lr, [r6, #2]
      *size = rawSize+2; /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
 800244c:	f10e 0a02 	add.w	sl, lr, #2
 8002450:	fa1f fa8a 	uxth.w	sl, sl
      uint8_t * rawData = data+2; /* rawData points to the first data (after size extraction) */
      if (*size > dataAvailable )
 8002454:	4582      	cmp	sl, r0
 8002456:	f300 825e 	bgt.w	8002916 <RI_SetRegCommandParser+0x58a>
 800245a:	f5b2 7f0a 	cmp.w	r2, #552	; 0x228
      uint8_t * rawData = data+2; /* rawData points to the first data (after size extraction) */
 800245e:	f106 0104 	add.w	r1, r6, #4
        *size =0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 8002462:	f000 82af 	beq.w	80029c4 <RI_SetRegCommandParser+0x638>
 8002466:	f200 822d 	bhi.w	80028c4 <RI_SetRegCommandParser+0x538>
 800246a:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 800246e:	f000 828b 	beq.w	8002988 <RI_SetRegCommandParser+0x5fc>
 8002472:	f240 821c 	bls.w	80028ae <RI_SetRegCommandParser+0x522>
 8002476:	f5b2 7ff4 	cmp.w	r2, #488	; 0x1e8
 800247a:	f040 8238 	bne.w	80028ee <RI_SetRegCommandParser+0x562>
          {
            uint32_t torque;
            uint16_t duration;
            torque = *(int32_t *)rawData;
            duration = *(uint16_t *)&rawData[4];
            MCI_ExecTorqueRamp(pMCI,torque,duration);
 800247e:	8932      	ldrh	r2, [r6, #8]
 8002480:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8002484:	4620      	mov	r0, r4
 8002486:	f7fe ff77 	bl	8001378 <MCI_ExecTorqueRamp>
     if (number_of_item == 1 && rxLength == 0)
 800248a:	eb08 0209 	add.w	r2, r8, r9
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	ebab 000a 	sub.w	r0, fp, sl
 8002494:	2a01      	cmp	r2, #1
 8002496:	4457      	add	r7, sl
 8002498:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800249a:	f04f 0500 	mov.w	r5, #0
     if (number_of_item == 1 && rxLength == 0)
 800249e:	d1c1      	bne.n	8002424 <RI_SetRegCommandParser+0x98>
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d1bf      	bne.n	8002424 <RI_SetRegCommandParser+0x98>
  if (retVal == MCP_CMD_OK)
 80024a4:	f8dd 9000 	ldr.w	r9, [sp]
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	d16d      	bne.n	8002588 <RI_SetRegCommandParser+0x1fc>
    pHandle->txLength = 0;
 80024ac:	2500      	movs	r5, #0
}
 80024ae:	4628      	mov	r0, r5
    pHandle->txLength = 0;
 80024b0:	f8a9 500e 	strh.w	r5, [r9, #14]
}
 80024b4:	b009      	add	sp, #36	; 0x24
 80024b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  *size= 1 ; /* /0 is the min String size */
  while ((*srcString != 0) && (*size < maxSize) )
 80024ba:	78b2      	ldrb	r2, [r6, #2]
 80024bc:	2a00      	cmp	r2, #0
 80024be:	f000 82c1 	beq.w	8002a44 <RI_SetRegCommandParser+0x6b8>
 80024c2:	2801      	cmp	r0, #1
 80024c4:	f340 82c2 	ble.w	8002a4c <RI_SetRegCommandParser+0x6c0>
 80024c8:	1cf1      	adds	r1, r6, #3
 80024ca:	9b00      	ldr	r3, [sp, #0]
 80024cc:	43f6      	mvns	r6, r6
 80024ce:	e002      	b.n	80024d6 <RI_SetRegCommandParser+0x14a>
 80024d0:	4290      	cmp	r0, r2
 80024d2:	f340 8218 	ble.w	8002906 <RI_SetRegCommandParser+0x57a>
  {
    *destString = *srcString ;
    srcString = srcString+1;
 80024d6:	1872      	adds	r2, r6, r1
 80024d8:	460c      	mov	r4, r1
  while ((*srcString != 0) && (*size < maxSize) )
 80024da:	f811 5b01 	ldrb.w	r5, [r1], #1
 80024de:	b292      	uxth	r2, r2
 80024e0:	2d00      	cmp	r5, #0
 80024e2:	d1f5      	bne.n	80024d0 <RI_SetRegCommandParser+0x144>
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4611      	mov	r1, r2
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *destString = 0;
 80024e8:	ebab 0a02 	sub.w	sl, fp, r2
 80024ec:	2200      	movs	r2, #0
 80024ee:	fa0f f08a 	sxth.w	r0, sl
 80024f2:	440f      	add	r7, r1
 80024f4:	7022      	strb	r2, [r4, #0]
      retVal = MCP_ERROR_RO_REG;
 80024f6:	2504      	movs	r5, #4
 80024f8:	e78f      	b.n	800241a <RI_SetRegCommandParser+0x8e>
    switch (regID)
 80024fa:	2a98      	cmp	r2, #152	; 0x98
 80024fc:	f000 820d 	beq.w	800291a <RI_SetRegCommandParser+0x58e>
 8002500:	d969      	bls.n	80025d6 <RI_SetRegCommandParser+0x24a>
 8002502:	f5b2 7fac 	cmp.w	r2, #344	; 0x158
 8002506:	d05f      	beq.n	80025c8 <RI_SetRegCommandParser+0x23c>
 8002508:	d959      	bls.n	80025be <RI_SetRegCommandParser+0x232>
 800250a:	f5b2 7fcc 	cmp.w	r2, #408	; 0x198
 800250e:	d05b      	beq.n	80025c8 <RI_SetRegCommandParser+0x23c>
      retVal = MCP_ERROR_UNKNOWN_REG;
 8002510:	f1aa 0a06 	sub.w	sl, sl, #6
 8002514:	fa0f f08a 	sxth.w	r0, sl
 8002518:	1db7      	adds	r7, r6, #6
 800251a:	2505      	movs	r5, #5
 800251c:	e77d      	b.n	800241a <RI_SetRegCommandParser+0x8e>
    uint16_t regdata16 = *(uint16_t *)data;
 800251e:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 8002522:	8877      	ldrh	r7, [r6, #2]
    switch (regID)
 8002524:	f000 80b2 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 8002528:	d875      	bhi.n	8002616 <RI_SetRegCommandParser+0x28a>
 800252a:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 800252e:	f000 829a 	beq.w	8002a66 <RI_SetRegCommandParser+0x6da>
 8002532:	d856      	bhi.n	80025e2 <RI_SetRegCommandParser+0x256>
 8002534:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 8002538:	f000 829c 	beq.w	8002a74 <RI_SetRegCommandParser+0x6e8>
 800253c:	f240 8193 	bls.w	8002866 <RI_SetRegCommandParser+0x4da>
 8002540:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 8002544:	f000 8291 	beq.w	8002a6a <RI_SetRegCommandParser+0x6de>
 8002548:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 800254c:	d128      	bne.n	80025a0 <RI_SetRegCommandParser+0x214>
      PID_SetKI(pPIDId[motorID], regdata16);
 800254e:	4a53      	ldr	r2, [pc, #332]	; (800269c <RI_SetRegCommandParser+0x310>)
 8002550:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8002554:	b239      	sxth	r1, r7
        PID_SetKI (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002556:	f005 fc2b 	bl	8007db0 <PID_SetKI>
     break;
 800255a:	f1aa 0004 	sub.w	r0, sl, #4
 800255e:	1d37      	adds	r7, r6, #4
 8002560:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002562:	2500      	movs	r5, #0
     break;
 8002564:	e759      	b.n	800241a <RI_SetRegCommandParser+0x8e>
    switch (regID)
 8002566:	2a88      	cmp	r2, #136	; 0x88
 8002568:	f000 81ea 	beq.w	8002940 <RI_SetRegCommandParser+0x5b4>
 800256c:	f02c 0c87 	bic.w	ip, ip, #135	; 0x87
 8002570:	f1aa 0a03 	sub.w	sl, sl, #3
 8002574:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 8002578:	fa0f f08a 	sxth.w	r0, sl
 800257c:	f106 0703 	add.w	r7, r6, #3
 8002580:	d027      	beq.n	80025d2 <RI_SetRegCommandParser+0x246>
      retVal = MCP_ERROR_UNKNOWN_REG;
 8002582:	2505      	movs	r5, #5
 8002584:	e749      	b.n	800241a <RI_SetRegCommandParser+0x8e>
         retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002586:	2508      	movs	r5, #8
}
 8002588:	4628      	mov	r0, r5
 800258a:	b009      	add	sp, #36	; 0x24
 800258c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002590:	2d07      	cmp	r5, #7
 8002592:	f040 81b2 	bne.w	80028fa <RI_SetRegCommandParser+0x56e>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002596:	2501      	movs	r5, #1
}
 8002598:	4628      	mov	r0, r5
 800259a:	b009      	add	sp, #36	; 0x24
 800259c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a0:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 80025a4:	d15a      	bne.n	800265c <RI_SetRegCommandParser+0x2d0>
      PID_SetKD(pPIDIq[motorID], regdata16);
 80025a6:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <RI_SetRegCommandParser+0x314>)
      PID_SetKD(pPIDId[motorID], regdata16);
 80025a8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80025ac:	b239      	sxth	r1, r7
 80025ae:	f005 fc33 	bl	8007e18 <PID_SetKD>
     break;
 80025b2:	f1aa 0004 	sub.w	r0, sl, #4
 80025b6:	1d37      	adds	r7, r6, #4
 80025b8:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80025ba:	2500      	movs	r5, #0
     break;
 80025bc:	e72d      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 80025be:	2ad8      	cmp	r2, #216	; 0xd8
 80025c0:	d002      	beq.n	80025c8 <RI_SetRegCommandParser+0x23c>
 80025c2:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 80025c6:	d1a3      	bne.n	8002510 <RI_SetRegCommandParser+0x184>
 80025c8:	f1aa 0a06 	sub.w	sl, sl, #6
 80025cc:	fa0f f08a 	sxth.w	r0, sl
 80025d0:	1db7      	adds	r7, r6, #6
      retVal = MCP_ERROR_RO_REG;
 80025d2:	2504      	movs	r5, #4
 80025d4:	e721      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 80025d6:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 80025da:	f1bc 0f18 	cmp.w	ip, #24
 80025de:	d197      	bne.n	8002510 <RI_SetRegCommandParser+0x184>
 80025e0:	e7f2      	b.n	80025c8 <RI_SetRegCommandParser+0x23c>
 80025e2:	f5b2 6f92 	cmp.w	r2, #1168	; 0x490
 80025e6:	f000 824a 	beq.w	8002a7e <RI_SetRegCommandParser+0x6f2>
 80025ea:	f240 8116 	bls.w	800281a <RI_SetRegCommandParser+0x48e>
 80025ee:	f5b2 6fca 	cmp.w	r2, #1616	; 0x650
 80025f2:	f000 826e 	beq.w	8002ad2 <RI_SetRegCommandParser+0x746>
 80025f6:	f240 8105 	bls.w	8002804 <RI_SetRegCommandParser+0x478>
 80025fa:	f5b2 6fd2 	cmp.w	r2, #1680	; 0x690
 80025fe:	d12c      	bne.n	800265a <RI_SetRegCommandParser+0x2ce>
       DAC_SetChannelConfig(&DAC_Handle , DAC_CH2, regdata16 );
 8002600:	463a      	mov	r2, r7
 8002602:	2101      	movs	r1, #1
 8002604:	4827      	ldr	r0, [pc, #156]	; (80026a4 <RI_SetRegCommandParser+0x318>)
 8002606:	f7fe fb4b 	bl	8000ca0 <DAC_SetChannelConfig>
     break;
 800260a:	f1aa 0004 	sub.w	r0, sl, #4
 800260e:	1d37      	adds	r7, r6, #4
 8002610:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002612:	2500      	movs	r5, #0
     break;
 8002614:	e701      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 8002616:	f241 41d0 	movw	r1, #5328	; 0x14d0
 800261a:	428a      	cmp	r2, r1
 800261c:	f000 8257 	beq.w	8002ace <RI_SetRegCommandParser+0x742>
 8002620:	d953      	bls.n	80026ca <RI_SetRegCommandParser+0x33e>
 8002622:	f241 6110 	movw	r1, #5648	; 0x1610
 8002626:	428a      	cmp	r2, r1
 8002628:	f000 824c 	beq.w	8002ac4 <RI_SetRegCommandParser+0x738>
 800262c:	d93e      	bls.n	80026ac <RI_SetRegCommandParser+0x320>
 800262e:	f641 01d0 	movw	r1, #6352	; 0x18d0
 8002632:	428a      	cmp	r2, r1
 8002634:	f000 8240 	beq.w	8002ab8 <RI_SetRegCommandParser+0x72c>
 8002638:	f641 1110 	movw	r1, #6416	; 0x1910
 800263c:	428a      	cmp	r2, r1
 800263e:	d112      	bne.n	8002666 <RI_SetRegCommandParser+0x2da>
      PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002640:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <RI_SetRegCommandParser+0x31c>)
 8002642:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8002646:	4639      	mov	r1, r7
 8002648:	3034      	adds	r0, #52	; 0x34
 800264a:	f005 fbc1 	bl	8007dd0 <PID_SetKPDivisorPOW2>
      break;
 800264e:	f1aa 0004 	sub.w	r0, sl, #4
 8002652:	1d37      	adds	r7, r6, #4
 8002654:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002656:	2500      	movs	r5, #0
      break;
 8002658:	e6df      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 800265a:	d214      	bcs.n	8002686 <RI_SetRegCommandParser+0x2fa>
      retVal = MCP_ERROR_UNKNOWN_REG;
 800265c:	f1aa 0004 	sub.w	r0, sl, #4
 8002660:	b200      	sxth	r0, r0
 8002662:	1d37      	adds	r7, r6, #4
 8002664:	e78d      	b.n	8002582 <RI_SetRegCommandParser+0x1f6>
 8002666:	f241 6150 	movw	r1, #5712	; 0x1650
 800266a:	428a      	cmp	r2, r1
 800266c:	d1f6      	bne.n	800265c <RI_SetRegCommandParser+0x2d0>
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 800266e:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <RI_SetRegCommandParser+0x314>)
 8002670:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8002674:	4639      	mov	r1, r7
 8002676:	f005 fbd9 	bl	8007e2c <PID_SetKDDivisorPOW2>
      break;
 800267a:	f1aa 0004 	sub.w	r0, sl, #4
 800267e:	1d37      	adds	r7, r6, #4
 8002680:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002682:	2500      	movs	r5, #0
      break;
 8002684:	e6c9      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 8002686:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 800268a:	d138      	bne.n	80026fe <RI_SetRegCommandParser+0x372>
     break;
 800268c:	f1aa 0004 	sub.w	r0, sl, #4
 8002690:	b200      	sxth	r0, r0
 8002692:	1d37      	adds	r7, r6, #4
      retVal = MCP_ERROR_RO_REG;
 8002694:	2504      	movs	r5, #4
     break;
 8002696:	e6c0      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 8002698:	20000a14 	.word	0x20000a14
 800269c:	20000568 	.word	0x20000568
 80026a0:	2000056c 	.word	0x2000056c
 80026a4:	20000694 	.word	0x20000694
 80026a8:	20000650 	.word	0x20000650
 80026ac:	f241 5190 	movw	r1, #5520	; 0x1590
 80026b0:	428a      	cmp	r2, r1
 80026b2:	f000 81d6 	beq.w	8002a62 <RI_SetRegCommandParser+0x6d6>
 80026b6:	d928      	bls.n	800270a <RI_SetRegCommandParser+0x37e>
 80026b8:	f241 51d0 	movw	r1, #5584	; 0x15d0
 80026bc:	428a      	cmp	r2, r1
 80026be:	d1cd      	bne.n	800265c <RI_SetRegCommandParser+0x2d0>
      PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 80026c0:	4aba      	ldr	r2, [pc, #744]	; (80029ac <RI_SetRegCommandParser+0x620>)
 80026c2:	4639      	mov	r1, r7
 80026c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80026c8:	e7bf      	b.n	800264a <RI_SetRegCommandParser+0x2be>
 80026ca:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 80026ce:	d0dd      	beq.n	800268c <RI_SetRegCommandParser+0x300>
 80026d0:	d931      	bls.n	8002736 <RI_SetRegCommandParser+0x3aa>
 80026d2:	f241 4150 	movw	r1, #5200	; 0x1450
 80026d6:	428a      	cmp	r2, r1
 80026d8:	f000 81be 	beq.w	8002a58 <RI_SetRegCommandParser+0x6cc>
 80026dc:	d91e      	bls.n	800271c <RI_SetRegCommandParser+0x390>
 80026de:	f241 4190 	movw	r1, #5264	; 0x1490
 80026e2:	428a      	cmp	r2, r1
 80026e4:	d1ba      	bne.n	800265c <RI_SetRegCommandParser+0x2d0>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80026e6:	4ab2      	ldr	r2, [pc, #712]	; (80029b0 <RI_SetRegCommandParser+0x624>)
 80026e8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80026ec:	4639      	mov	r1, r7
      PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80026ee:	f005 fb7f 	bl	8007df0 <PID_SetKIDivisorPOW2>
      break;
 80026f2:	f1aa 0004 	sub.w	r0, sl, #4
 80026f6:	1d37      	adds	r7, r6, #4
 80026f8:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80026fa:	2500      	movs	r5, #0
      break;
 80026fc:	e68d      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 80026fe:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8002702:	f5bc 6ff2 	cmp.w	ip, #1936	; 0x790
 8002706:	d0c1      	beq.n	800268c <RI_SetRegCommandParser+0x300>
 8002708:	e7a8      	b.n	800265c <RI_SetRegCommandParser+0x2d0>
 800270a:	f241 5110 	movw	r1, #5392	; 0x1510
 800270e:	428a      	cmp	r2, r1
 8002710:	d122      	bne.n	8002758 <RI_SetRegCommandParser+0x3cc>
      PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002712:	4aa8      	ldr	r2, [pc, #672]	; (80029b4 <RI_SetRegCommandParser+0x628>)
 8002714:	4639      	mov	r1, r7
 8002716:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800271a:	e796      	b.n	800264a <RI_SetRegCommandParser+0x2be>
 800271c:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 8002720:	d003      	beq.n	800272a <RI_SetRegCommandParser+0x39e>
 8002722:	d966      	bls.n	80027f2 <RI_SetRegCommandParser+0x466>
 8002724:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 8002728:	d158      	bne.n	80027dc <RI_SetRegCommandParser+0x450>
 800272a:	f1aa 0004 	sub.w	r0, sl, #4
 800272e:	b200      	sxth	r0, r0
 8002730:	1d37      	adds	r7, r6, #4
  uint8_t retVal = MCP_CMD_OK;
 8002732:	2500      	movs	r5, #0
 8002734:	e671      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 8002736:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 800273a:	f000 81b6 	beq.w	8002aaa <RI_SetRegCommandParser+0x71e>
 800273e:	d924      	bls.n	800278a <RI_SetRegCommandParser+0x3fe>
 8002740:	f5b2 6f2d 	cmp.w	r2, #2768	; 0xad0
 8002744:	d0a2      	beq.n	800268c <RI_SetRegCommandParser+0x300>
 8002746:	d918      	bls.n	800277a <RI_SetRegCommandParser+0x3ee>
 8002748:	f5b2 6f39 	cmp.w	r2, #2960	; 0xb90
 800274c:	d09e      	beq.n	800268c <RI_SetRegCommandParser+0x300>
 800274e:	d90d      	bls.n	800276c <RI_SetRegCommandParser+0x3e0>
 8002750:	f5b2 6f3d 	cmp.w	r2, #3024	; 0xbd0
 8002754:	d09a      	beq.n	800268c <RI_SetRegCommandParser+0x300>
 8002756:	e781      	b.n	800265c <RI_SetRegCommandParser+0x2d0>
 8002758:	f241 5150 	movw	r1, #5456	; 0x1550
 800275c:	428a      	cmp	r2, r1
 800275e:	f47f af7d 	bne.w	800265c <RI_SetRegCommandParser+0x2d0>
      PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002762:	4a94      	ldr	r2, [pc, #592]	; (80029b4 <RI_SetRegCommandParser+0x628>)
 8002764:	4639      	mov	r1, r7
 8002766:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800276a:	e7c0      	b.n	80026ee <RI_SetRegCommandParser+0x362>
 800276c:	f5b2 6f31 	cmp.w	r2, #2832	; 0xb10
 8002770:	d08c      	beq.n	800268c <RI_SetRegCommandParser+0x300>
 8002772:	f5b2 6f35 	cmp.w	r2, #2896	; 0xb50
 8002776:	d089      	beq.n	800268c <RI_SetRegCommandParser+0x300>
 8002778:	e770      	b.n	800265c <RI_SetRegCommandParser+0x2d0>
 800277a:	f5b2 6f25 	cmp.w	r2, #2640	; 0xa50
 800277e:	d085      	beq.n	800268c <RI_SetRegCommandParser+0x300>
 8002780:	d916      	bls.n	80027b0 <RI_SetRegCommandParser+0x424>
 8002782:	f5b2 6f29 	cmp.w	r2, #2704	; 0xa90
 8002786:	d081      	beq.n	800268c <RI_SetRegCommandParser+0x300>
 8002788:	e768      	b.n	800265c <RI_SetRegCommandParser+0x2d0>
 800278a:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 800278e:	d118      	bne.n	80027c2 <RI_SetRegCommandParser+0x436>
        currComp = MCI_GetIqdref(pMCI);
 8002790:	4620      	mov	r0, r4
 8002792:	f7fe fec3 	bl	800151c <MCI_GetIqdref>
 8002796:	9005      	str	r0, [sp, #20]
        currComp.q = (int16_t)regdata16;
 8002798:	f8ad 7014 	strh.w	r7, [sp, #20]
        MCI_SetCurrentReferences(pMCI,currComp);
 800279c:	4620      	mov	r0, r4
 800279e:	9905      	ldr	r1, [sp, #20]
 80027a0:	f7fe fdf4 	bl	800138c <MCI_SetCurrentReferences>
      break;
 80027a4:	f1aa 0004 	sub.w	r0, sl, #4
 80027a8:	1d37      	adds	r7, r6, #4
 80027aa:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80027ac:	2500      	movs	r5, #0
      break;
 80027ae:	e634      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 80027b0:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 80027b4:	f43f af6a 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 80027b8:	f5b2 6f21 	cmp.w	r2, #2576	; 0xa10
 80027bc:	f43f af66 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 80027c0:	e74c      	b.n	800265c <RI_SetRegCommandParser+0x2d0>
 80027c2:	f63f af4b 	bhi.w	800265c <RI_SetRegCommandParser+0x2d0>
 80027c6:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 80027ca:	f43f af5f 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 80027ce:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 80027d2:	f5bc 6f09 	cmp.w	ip, #2192	; 0x890
 80027d6:	f43f af59 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 80027da:	e73f      	b.n	800265c <RI_SetRegCommandParser+0x2d0>
 80027dc:	f4ff af3e 	bcc.w	800265c <RI_SetRegCommandParser+0x2d0>
 80027e0:	f5b2 6f6d 	cmp.w	r2, #3792	; 0xed0
 80027e4:	f43f af52 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 80027e8:	f5b2 6f71 	cmp.w	r2, #3856	; 0xf10
 80027ec:	f43f af4e 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 80027f0:	e734      	b.n	800265c <RI_SetRegCommandParser+0x2d0>
 80027f2:	f5b2 6f45 	cmp.w	r2, #3152	; 0xc50
 80027f6:	f43f af49 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 80027fa:	f5b2 6f49 	cmp.w	r2, #3216	; 0xc90
 80027fe:	f43f af45 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 8002802:	e72b      	b.n	800265c <RI_SetRegCommandParser+0x2d0>
 8002804:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
 8002808:	f43f af40 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 800280c:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8002810:	f5bc 6fb2 	cmp.w	ip, #1424	; 0x590
 8002814:	f43f af3a 	beq.w	800268c <RI_SetRegCommandParser+0x300>
 8002818:	e720      	b.n	800265c <RI_SetRegCommandParser+0x2d0>
 800281a:	f5b2 7f64 	cmp.w	r2, #912	; 0x390
 800281e:	f000 8136 	beq.w	8002a8e <RI_SetRegCommandParser+0x702>
 8002822:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8002826:	d105      	bne.n	8002834 <RI_SetRegCommandParser+0x4a8>
        PID_SetKI (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002828:	4a63      	ldr	r2, [pc, #396]	; (80029b8 <RI_SetRegCommandParser+0x62c>)
 800282a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800282e:	b239      	sxth	r1, r7
 8002830:	3034      	adds	r0, #52	; 0x34
 8002832:	e690      	b.n	8002556 <RI_SetRegCommandParser+0x1ca>
 8002834:	f5b2 7f54 	cmp.w	r2, #848	; 0x350
 8002838:	f47f af10 	bne.w	800265c <RI_SetRegCommandParser+0x2d0>
        STO_PLL_GetObserverGains(stoPLLSensor[motorID],&hC1,&hC2);
 800283c:	4c5e      	ldr	r4, [pc, #376]	; (80029b8 <RI_SetRegCommandParser+0x62c>)
 800283e:	aa05      	add	r2, sp, #20
 8002840:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8002844:	f10d 0112 	add.w	r1, sp, #18
 8002848:	f007 fc8c 	bl	800a164 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains(stoPLLSensor[motorID],regdata16,hC2);
 800284c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8002850:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8002854:	b239      	sxth	r1, r7
        STO_PLL_SetObserverGains(stoPLLSensor[motorID],hC1,regdata16);
 8002856:	f007 fc8d 	bl	800a174 <STO_PLL_SetObserverGains>
      break;
 800285a:	f1aa 0004 	sub.w	r0, sl, #4
 800285e:	1d37      	adds	r7, r6, #4
 8002860:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002862:	2500      	movs	r5, #0
      break;
 8002864:	e5d9      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 8002866:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 800286a:	f000 810e 	beq.w	8002a8a <RI_SetRegCommandParser+0x6fe>
 800286e:	d90f      	bls.n	8002890 <RI_SetRegCommandParser+0x504>
 8002870:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8002874:	f47f aef2 	bne.w	800265c <RI_SetRegCommandParser+0x2d0>
      PID_SetKP(pPIDIq[motorID], regdata16);
 8002878:	4a4c      	ldr	r2, [pc, #304]	; (80029ac <RI_SetRegCommandParser+0x620>)
 800287a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800287e:	b239      	sxth	r1, r7
        PID_SetKP (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002880:	f005 fa94 	bl	8007dac <PID_SetKP>
     break;
 8002884:	f1aa 0004 	sub.w	r0, sl, #4
 8002888:	1d37      	adds	r7, r6, #4
 800288a:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800288c:	2500      	movs	r5, #0
     break;
 800288e:	e5c4      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 8002890:	2a90      	cmp	r2, #144	; 0x90
 8002892:	d104      	bne.n	800289e <RI_SetRegCommandParser+0x512>
      PID_SetKP(pPIDSpeed[motorID], regdata16);
 8002894:	4a46      	ldr	r2, [pc, #280]	; (80029b0 <RI_SetRegCommandParser+0x624>)
 8002896:	b239      	sxth	r1, r7
 8002898:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800289c:	e7f0      	b.n	8002880 <RI_SetRegCommandParser+0x4f4>
 800289e:	2ad0      	cmp	r2, #208	; 0xd0
 80028a0:	f47f aedc 	bne.w	800265c <RI_SetRegCommandParser+0x2d0>
      PID_SetKI(pPIDSpeed[motorID], regdata16);
 80028a4:	4a42      	ldr	r2, [pc, #264]	; (80029b0 <RI_SetRegCommandParser+0x624>)
 80028a6:	b239      	sxth	r1, r7
 80028a8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80028ac:	e653      	b.n	8002556 <RI_SetRegCommandParser+0x1ca>
 80028ae:	2aa8      	cmp	r2, #168	; 0xa8
 80028b0:	d002      	beq.n	80028b8 <RI_SetRegCommandParser+0x52c>
 80028b2:	d917      	bls.n	80028e4 <RI_SetRegCommandParser+0x558>
 80028b4:	2ae8      	cmp	r2, #232	; 0xe8
 80028b6:	d11a      	bne.n	80028ee <RI_SetRegCommandParser+0x562>
 80028b8:	ebab 000a 	sub.w	r0, fp, sl
 80028bc:	b200      	sxth	r0, r0
 80028be:	4457      	add	r7, sl
          retVal = MCP_ERROR_RO_REG;
 80028c0:	2504      	movs	r5, #4
 80028c2:	e5aa      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 80028c4:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 80028c8:	d053      	beq.n	8002972 <RI_SetRegCommandParser+0x5e6>
 80028ca:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 80028ce:	d10e      	bne.n	80028ee <RI_SetRegCommandParser+0x562>
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 80028d0:	483a      	ldr	r0, [pc, #232]	; (80029bc <RI_SetRegCommandParser+0x630>)
 80028d2:	f005 f967 	bl	8007ba4 <MCPA_cfgLog>
 80028d6:	ebab 0b0a 	sub.w	fp, fp, sl
 80028da:	4605      	mov	r5, r0
          break;
 80028dc:	4457      	add	r7, sl
 80028de:	fa0f f08b 	sxth.w	r0, fp
 80028e2:	e59a      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 80028e4:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 80028e8:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 80028ec:	d0e4      	beq.n	80028b8 <RI_SetRegCommandParser+0x52c>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80028ee:	ebab 000a 	sub.w	r0, fp, sl
 80028f2:	b200      	sxth	r0, r0
 80028f4:	4457      	add	r7, sl
 80028f6:	2505      	movs	r5, #5
 80028f8:	e58f      	b.n	800241a <RI_SetRegCommandParser+0x8e>
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80028fa:	2d0a      	cmp	r5, #10
 80028fc:	f43f ae4b 	beq.w	8002596 <RI_SetRegCommandParser+0x20a>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002900:	2301      	movs	r3, #1
 8002902:	9302      	str	r3, [sp, #8]
 8002904:	e59b      	b.n	800243e <RI_SetRegCommandParser+0xb2>
 8002906:	ebab 0a02 	sub.w	sl, fp, r2
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	fa0f f08a 	sxth.w	r0, sl
 8002910:	4417      	add	r7, r2
      retVal = MCP_ERROR_RO_REG;
 8002912:	2504      	movs	r5, #4
 8002914:	e581      	b.n	800241a <RI_SetRegCommandParser+0x8e>
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002916:	250a      	movs	r5, #10
 8002918:	e57f      	b.n	800241a <RI_SetRegCommandParser+0x8e>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((regdata32*SPEED_UNIT)/_RPM),0);
 800291a:	f8d6 2002 	ldr.w	r2, [r6, #2]
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <RI_SetRegCommandParser+0x634>)
 8002920:	fb83 3102 	smull	r3, r1, r3, r2
 8002924:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8002928:	4620      	mov	r0, r4
 800292a:	b209      	sxth	r1, r1
 800292c:	2200      	movs	r2, #0
 800292e:	f1aa 0a06 	sub.w	sl, sl, #6
 8002932:	f7fe fd15 	bl	8001360 <MCI_ExecSpeedRamp>
      break;
 8002936:	1db7      	adds	r7, r6, #6
 8002938:	fa0f f08a 	sxth.w	r0, sl
  uint8_t retVal = MCP_CMD_OK;
 800293c:	2500      	movs	r5, #0
      break;
 800293e:	e56c      	b.n	800241a <RI_SetRegCommandParser+0x8e>
    uint8_t regdata8 = *data;
 8002940:	78b5      	ldrb	r5, [r6, #2]
        if ((STC_Modality_t)regdata8 == STC_TORQUE_MODE)
 8002942:	b145      	cbz	r5, 8002956 <RI_SetRegCommandParser+0x5ca>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 8002944:	2d01      	cmp	r5, #1
 8002946:	d06f      	beq.n	8002a28 <RI_SetRegCommandParser+0x69c>
 8002948:	f1aa 0a03 	sub.w	sl, sl, #3
 800294c:	fa0f f08a 	sxth.w	r0, sl
 8002950:	1cf7      	adds	r7, r6, #3
  uint8_t retVal = MCP_CMD_OK;
 8002952:	2500      	movs	r5, #0
 8002954:	e561      	b.n	800241a <RI_SetRegCommandParser+0x8e>
          MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002956:	4620      	mov	r0, r4
 8002958:	f7fe fe0a 	bl	8001570 <MCI_GetTeref>
 800295c:	f1aa 0a03 	sub.w	sl, sl, #3
 8002960:	4601      	mov	r1, r0
 8002962:	462a      	mov	r2, r5
 8002964:	4620      	mov	r0, r4
 8002966:	f7fe fd07 	bl	8001378 <MCI_ExecTorqueRamp>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 800296a:	1cf7      	adds	r7, r6, #3
 800296c:	fa0f f08a 	sxth.w	r0, sl
 8002970:	e553      	b.n	800241a <RI_SetRegCommandParser+0x8e>
            currComp.q = *((uint16_t *) rawData);
 8002972:	6871      	ldr	r1, [r6, #4]
 8002974:	9105      	str	r1, [sp, #20]
            MCI_SetCurrentReferences(pMCI,currComp);
 8002976:	4620      	mov	r0, r4
 8002978:	f7fe fd08 	bl	800138c <MCI_SetCurrentReferences>
          break;
 800297c:	ebab 000a 	sub.w	r0, fp, sl
 8002980:	b200      	sxth	r0, r0
 8002982:	4457      	add	r7, sl
  uint8_t retVal = MCP_CMD_OK;
 8002984:	2500      	movs	r5, #0
          break;
 8002986:	e548      	b.n	800241a <RI_SetRegCommandParser+0x8e>
            MCI_ExecSpeedRamp(pMCI,(int16_t)((rpm*SPEED_UNIT)/_RPM),duration);
 8002988:	6870      	ldr	r0, [r6, #4]
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <RI_SetRegCommandParser+0x634>)
 800298c:	8932      	ldrh	r2, [r6, #8]
 800298e:	fb83 3100 	smull	r3, r1, r3, r0
 8002992:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 8002996:	b209      	sxth	r1, r1
 8002998:	4620      	mov	r0, r4
 800299a:	f7fe fce1 	bl	8001360 <MCI_ExecSpeedRamp>
          break;
 800299e:	ebab 000a 	sub.w	r0, fp, sl
 80029a2:	4457      	add	r7, sl
 80029a4:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80029a6:	2500      	movs	r5, #0
          break;
 80029a8:	e537      	b.n	800241a <RI_SetRegCommandParser+0x8e>
 80029aa:	bf00      	nop
 80029ac:	2000056c 	.word	0x2000056c
 80029b0:	2000064c 	.word	0x2000064c
 80029b4:	20000568 	.word	0x20000568
 80029b8:	20000650 	.word	0x20000650
 80029bc:	20000588 	.word	0x20000588
 80029c0:	2aaaaaab 	.word	0x2aaaaaab
            if ((rawSize % 8) || (nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0 )
 80029c4:	f01e 0407 	ands.w	r4, lr, #7
 80029c8:	d128      	bne.n	8002a1c <RI_SetRegCommandParser+0x690>
            uint8_t nbrOfPhase = rawSize/ 8;
 80029ca:	f3ce 03c7 	ubfx	r3, lr, #3, #8
            if ((rawSize % 8) || (nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0 )
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d824      	bhi.n	8002a1c <RI_SetRegCommandParser+0x690>
              for (i = 0; i <nbrOfPhase; i++){
 80029d2:	b30b      	cbz	r3, 8002a18 <RI_SetRegCommandParser+0x68c>
 80029d4:	4621      	mov	r1, r4
 80029d6:	9703      	str	r7, [sp, #12]
 80029d8:	4627      	mov	r7, r4
 80029da:	461c      	mov	r4, r3
                revUpPhase.hFinalMecSpeedUnit = (uint16_t) (rpm * SPEED_UNIT ) / _RPM ;
 80029dc:	6872      	ldr	r2, [r6, #4]
                RUC_SetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 80029de:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <RI_SetRegCommandParser+0x75c>)
                revUpPhase.hFinalMecSpeedUnit = (uint16_t) (rpm * SPEED_UNIT ) / _RPM ;
 80029e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                RUC_SetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 80029e4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
                revUpPhase.hFinalMecSpeedUnit = (uint16_t) (rpm * SPEED_UNIT ) / _RPM ;
 80029e8:	4b40      	ldr	r3, [pc, #256]	; (8002aec <RI_SetRegCommandParser+0x760>)
 80029ea:	0052      	lsls	r2, r2, #1
 80029ec:	b292      	uxth	r2, r2
 80029ee:	fba3 3202 	umull	r3, r2, r3, r2
 80029f2:	0952      	lsrs	r2, r2, #5
 80029f4:	f8ad 2016 	strh.w	r2, [sp, #22]
                revUpPhase.hFinalTorque = *((uint16_t *) &rawData[4+i*8]);
 80029f8:	8932      	ldrh	r2, [r6, #8]
 80029fa:	f8ad 2018 	strh.w	r2, [sp, #24]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6+i*8]);
 80029fe:	8972      	ldrh	r2, [r6, #10]
 8002a00:	f8ad 2014 	strh.w	r2, [sp, #20]
                RUC_SetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8002a04:	3701      	adds	r7, #1
 8002a06:	aa05      	add	r2, sp, #20
 8002a08:	f007 f8f8 	bl	8009bfc <RUC_SetPhase>
              for (i = 0; i <nbrOfPhase; i++){
 8002a0c:	b2f9      	uxtb	r1, r7
 8002a0e:	428c      	cmp	r4, r1
 8002a10:	f106 0608 	add.w	r6, r6, #8
 8002a14:	d8e2      	bhi.n	80029dc <RI_SetRegCommandParser+0x650>
 8002a16:	9f03      	ldr	r7, [sp, #12]
  uint8_t retVal = MCP_CMD_OK;
 8002a18:	2500      	movs	r5, #0
 8002a1a:	e000      	b.n	8002a1e <RI_SetRegCommandParser+0x692>
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002a1c:	250a      	movs	r5, #10
          break;
 8002a1e:	ebab 000a 	sub.w	r0, fp, sl
 8002a22:	b200      	sxth	r0, r0
 8002a24:	4457      	add	r7, sl
 8002a26:	e4f8      	b.n	800241a <RI_SetRegCommandParser+0x8e>
          MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f7fe fd49 	bl	80014c0 <MCI_GetMecSpeedRefUnit>
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4601      	mov	r1, r0
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7fe fc94 	bl	8001360 <MCI_ExecSpeedRamp>
 8002a38:	f1aa 0003 	sub.w	r0, sl, #3
 8002a3c:	1cf7      	adds	r7, r6, #3
 8002a3e:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8002a40:	2500      	movs	r5, #0
 8002a42:	e4ea      	b.n	800241a <RI_SetRegCommandParser+0x8e>
  while ((*srcString != 0) && (*size < maxSize) )
 8002a44:	2101      	movs	r1, #1
  *size= 1 ; /* /0 is the min String size */
 8002a46:	460a      	mov	r2, r1
  while ((*srcString != 0) && (*size < maxSize) )
 8002a48:	463c      	mov	r4, r7
 8002a4a:	e54d      	b.n	80024e8 <RI_SetRegCommandParser+0x15c>
 8002a4c:	f1aa 0003 	sub.w	r0, sl, #3
 8002a50:	b200      	sxth	r0, r0
 8002a52:	1cf7      	adds	r7, r6, #3
      retVal = MCP_ERROR_RO_REG;
 8002a54:	2504      	movs	r5, #4
 8002a56:	e4e0      	b.n	800241a <RI_SetRegCommandParser+0x8e>
      PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <RI_SetRegCommandParser+0x764>)
 8002a5a:	4639      	mov	r1, r7
 8002a5c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8002a60:	e5f3      	b.n	800264a <RI_SetRegCommandParser+0x2be>
      PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002a62:	4a24      	ldr	r2, [pc, #144]	; (8002af4 <RI_SetRegCommandParser+0x768>)
 8002a64:	e604      	b.n	8002670 <RI_SetRegCommandParser+0x2e4>
      PID_SetKD(pPIDId[motorID], regdata16);
 8002a66:	4a23      	ldr	r2, [pc, #140]	; (8002af4 <RI_SetRegCommandParser+0x768>)
 8002a68:	e59e      	b.n	80025a8 <RI_SetRegCommandParser+0x21c>
      PID_SetKP(pPIDId[motorID], regdata16);
 8002a6a:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <RI_SetRegCommandParser+0x768>)
 8002a6c:	b239      	sxth	r1, r7
 8002a6e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8002a72:	e705      	b.n	8002880 <RI_SetRegCommandParser+0x4f4>
      PID_SetKI(pPIDIq[motorID], regdata16);
 8002a74:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <RI_SetRegCommandParser+0x76c>)
 8002a76:	b239      	sxth	r1, r7
 8002a78:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8002a7c:	e56b      	b.n	8002556 <RI_SetRegCommandParser+0x1ca>
        PID_SetKP (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002a7e:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <RI_SetRegCommandParser+0x770>)
 8002a80:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8002a84:	b239      	sxth	r1, r7
 8002a86:	3034      	adds	r0, #52	; 0x34
 8002a88:	e6fa      	b.n	8002880 <RI_SetRegCommandParser+0x4f4>
      PID_SetKD(pPIDSpeed[motorID], regdata16);
 8002a8a:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <RI_SetRegCommandParser+0x764>)
 8002a8c:	e58c      	b.n	80025a8 <RI_SetRegCommandParser+0x21c>
        STO_PLL_GetObserverGains(stoPLLSensor[motorID],&hC1,&hC2);
 8002a8e:	4c1b      	ldr	r4, [pc, #108]	; (8002afc <RI_SetRegCommandParser+0x770>)
 8002a90:	aa05      	add	r2, sp, #20
 8002a92:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8002a96:	f10d 0112 	add.w	r1, sp, #18
 8002a9a:	f007 fb63 	bl	800a164 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains(stoPLLSensor[motorID],hC1,regdata16);
 8002a9e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8002aa2:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8002aa6:	b23a      	sxth	r2, r7
 8002aa8:	e6d5      	b.n	8002856 <RI_SetRegCommandParser+0x4ca>
        currComp = MCI_GetIqdref(pMCI);
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7fe fd36 	bl	800151c <MCI_GetIqdref>
 8002ab0:	9005      	str	r0, [sp, #20]
        currComp.d = regdata16;
 8002ab2:	f8ad 7016 	strh.w	r7, [sp, #22]
 8002ab6:	e671      	b.n	800279c <RI_SetRegCommandParser+0x410>
      PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002ab8:	4a10      	ldr	r2, [pc, #64]	; (8002afc <RI_SetRegCommandParser+0x770>)
 8002aba:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8002abe:	4639      	mov	r1, r7
 8002ac0:	3034      	adds	r0, #52	; 0x34
 8002ac2:	e614      	b.n	80026ee <RI_SetRegCommandParser+0x362>
      PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <RI_SetRegCommandParser+0x76c>)
 8002ac6:	4639      	mov	r1, r7
 8002ac8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8002acc:	e60f      	b.n	80026ee <RI_SetRegCommandParser+0x362>
      PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <RI_SetRegCommandParser+0x764>)
 8002ad0:	e5ce      	b.n	8002670 <RI_SetRegCommandParser+0x2e4>
       DAC_SetChannelConfig(&DAC_Handle , DAC_CH1, regdata16 );
 8002ad2:	463a      	mov	r2, r7
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	e595      	b.n	8002604 <RI_SetRegCommandParser+0x278>
 8002ad8:	9d02      	ldr	r5, [sp, #8]
  if (retVal == MCP_CMD_OK)
 8002ada:	f8dd 9000 	ldr.w	r9, [sp]
 8002ade:	2d00      	cmp	r5, #0
 8002ae0:	f43f ace4 	beq.w	80024ac <RI_SetRegCommandParser+0x120>
 8002ae4:	e550      	b.n	8002588 <RI_SetRegCommandParser+0x1fc>
 8002ae6:	bf00      	nop
 8002ae8:	20000648 	.word	0x20000648
 8002aec:	88888889 	.word	0x88888889
 8002af0:	2000064c 	.word	0x2000064c
 8002af4:	20000568 	.word	0x20000568
 8002af8:	2000056c 	.word	0x2000056c
 8002afc:	20000650 	.word	0x20000650

08002b00 <RI_GetRegCommandParser>:
{
 8002b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t rxLength = pHandle->rxLength;
 8002b04:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
  uint8_t * rxData = pHandle->rxBuffer;
 8002b08:	6846      	ldr	r6, [r0, #4]
  uint8_t * txData = pHandle->txBuffer;
 8002b0a:	6887      	ldr	r7, [r0, #8]
{
 8002b0c:	b099      	sub	sp, #100	; 0x64
  pHandle->txLength = 0;
 8002b0e:	2300      	movs	r3, #0
  uint8_t * rxData = pHandle->rxBuffer;
 8002b10:	9600      	str	r6, [sp, #0]
  pHandle->txLength = 0;
 8002b12:	81c3      	strh	r3, [r0, #14]
  while (rxLength > 0)
 8002b14:	f1ba 0f00 	cmp.w	sl, #0
 8002b18:	f000 835c 	beq.w	80031d4 <RI_GetRegCommandParser+0x6d4>
 8002b1c:	f8df 93e4 	ldr.w	r9, [pc, #996]	; 8002f04 <RI_GetRegCommandParser+0x404>
 8002b20:	4680      	mov	r8, r0
 8002b22:	b20d      	sxth	r5, r1
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002b24:	f836 3b02 	ldrh.w	r3, [r6], #2
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002b28:	f003 0407 	and.w	r4, r3, #7
 8002b2c:	3c01      	subs	r4, #1
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002b2e:	b2e1      	uxtb	r1, r4
 8002b30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b34:	ebc1 0bc1 	rsb	fp, r1, r1, lsl #3
  uint16_t regID = dataID & REG_MASK;
 8002b38:	f023 0307 	bic.w	r3, r3, #7
 8002b3c:	3a08      	subs	r2, #8
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8002b3e:	460c      	mov	r4, r1
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002b40:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
  uint16_t regID = dataID & REG_MASK;
 8002b44:	b29b      	uxth	r3, r3
  switch (typeID)
 8002b46:	2a20      	cmp	r2, #32
 8002b48:	d812      	bhi.n	8002b70 <RI_GetRegCommandParser+0x70>
 8002b4a:	e8df f002 	tbb	[pc, r2]
 8002b4e:	11ac      	.short	0x11ac
 8002b50:	11111111 	.word	0x11111111
 8002b54:	11651111 	.word	0x11651111
 8002b58:	11111111 	.word	0x11111111
 8002b5c:	11ba1111 	.word	0x11ba1111
 8002b60:	11111111 	.word	0x11111111
 8002b64:	11311111 	.word	0x11311111
 8002b68:	11111111 	.word	0x11111111
 8002b6c:	1111      	.short	0x1111
 8002b6e:	15          	.byte	0x15
 8002b6f:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 8002b70:	2007      	movs	r0, #7
}
 8002b72:	b019      	add	sp, #100	; 0x64
 8002b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uint8_t * rawData = data+2;
 8002b78:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002b7c:	f107 0202 	add.w	r2, r7, #2
      switch (regID)
 8002b80:	f000 8297 	beq.w	80030b2 <RI_GetRegCommandParser+0x5b2>
 8002b84:	f200 80d5 	bhi.w	8002d32 <RI_GetRegCommandParser+0x232>
 8002b88:	2ba8      	cmp	r3, #168	; 0xa8
 8002b8a:	f000 82a3 	beq.w	80030d4 <RI_GetRegCommandParser+0x5d4>
 8002b8e:	f200 80bd 	bhi.w	8002d0c <RI_GetRegCommandParser+0x20c>
 8002b92:	2b28      	cmp	r3, #40	; 0x28
 8002b94:	f000 82da 	beq.w	800314c <RI_GetRegCommandParser+0x64c>
 8002b98:	2b68      	cmp	r3, #104	; 0x68
 8002b9a:	f040 8090 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
        *rawSize = sizeof(MotorConfig_reg_t);
 8002b9e:	233c      	movs	r3, #60	; 0x3c
        if ((*rawSize) +2  > freeSpace)
 8002ba0:	2d3d      	cmp	r5, #61	; 0x3d
        *rawSize = sizeof(MotorConfig_reg_t);
 8002ba2:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8002ba4:	f300 82f9 	bgt.w	800319a <RI_GetRegCommandParser+0x69a>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ba8:	2008      	movs	r0, #8
}
 8002baa:	b019      	add	sp, #100	; 0x64
 8002bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (regID)
 8002bb0:	2ba0      	cmp	r3, #160	; 0xa0
 8002bb2:	f000 8233 	beq.w	800301c <RI_GetRegCommandParser+0x51c>
 8002bb6:	f200 80d7 	bhi.w	8002d68 <RI_GetRegCommandParser+0x268>
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	f000 8245 	beq.w	800304a <RI_GetRegCommandParser+0x54a>
 8002bc0:	2b60      	cmp	r3, #96	; 0x60
 8002bc2:	d17c      	bne.n	8002cbe <RI_GetRegCommandParser+0x1be>
  while ((*srcString != 0) && (*size < maxSize) )
 8002bc4:	4cca      	ldr	r4, [pc, #808]	; (8002ef0 <RI_GetRegCommandParser+0x3f0>)
 8002bc6:	7821      	ldrb	r1, [r4, #0]
 8002bc8:	2900      	cmp	r1, #0
 8002bca:	f000 826e 	beq.w	80030aa <RI_GetRegCommandParser+0x5aa>
 8002bce:	2d01      	cmp	r5, #1
 8002bd0:	f340 8222 	ble.w	8003018 <RI_GetRegCommandParser+0x518>
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	f1c7 0201 	rsb	r2, r7, #1
 8002bda:	e002      	b.n	8002be2 <RI_GetRegCommandParser+0xe2>
 8002bdc:	42ab      	cmp	r3, r5
 8002bde:	f280 821b 	bge.w	8003018 <RI_GetRegCommandParser+0x518>
    *destString = *srcString ;
 8002be2:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002be6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002bea:	1883      	adds	r3, r0, r2
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2900      	cmp	r1, #0
 8002bf0:	d1f4      	bne.n	8002bdc <RI_GetRegCommandParser+0xdc>
 8002bf2:	461c      	mov	r4, r3
    *destString = 0;
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	7002      	strb	r2, [r0, #0]
  while (rxLength > 0)
 8002bf8:	9a00      	ldr	r2, [sp, #0]
       pHandle->txLength += size;
 8002bfa:	f8b8 100e 	ldrh.w	r1, [r8, #14]
  while (rxLength > 0)
 8002bfe:	4452      	add	r2, sl
       freeSpaceS16 = freeSpaceS16-size;
 8002c00:	1aed      	subs	r5, r5, r3
       pHandle->txLength += size;
 8002c02:	4419      	add	r1, r3
  while (rxLength > 0)
 8002c04:	b292      	uxth	r2, r2
 8002c06:	b2b3      	uxth	r3, r6
 8002c08:	4293      	cmp	r3, r2
       freeSpaceS16 = freeSpaceS16-size;
 8002c0a:	b22d      	sxth	r5, r5
       txData = txData+size;
 8002c0c:	4427      	add	r7, r4
       pHandle->txLength += size;
 8002c0e:	f8a8 100e 	strh.w	r1, [r8, #14]
  while (rxLength > 0)
 8002c12:	d187      	bne.n	8002b24 <RI_GetRegCommandParser+0x24>
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002c14:	2000      	movs	r0, #0
 8002c16:	e7ac      	b.n	8002b72 <RI_GetRegCommandParser+0x72>
      if (freeSpace >= 2 )
 8002c18:	2d01      	cmp	r5, #1
 8002c1a:	ddc5      	ble.n	8002ba8 <RI_GetRegCommandParser+0xa8>
        switch (regID)
 8002c1c:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002c20:	f000 83af 	beq.w	8003382 <RI_GetRegCommandParser+0x882>
 8002c24:	f200 80d0 	bhi.w	8002dc8 <RI_GetRegCommandParser+0x2c8>
 8002c28:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8002c2c:	f000 8365 	beq.w	80032fa <RI_GetRegCommandParser+0x7fa>
 8002c30:	d91c      	bls.n	8002c6c <RI_GetRegCommandParser+0x16c>
 8002c32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c36:	f000 8374 	beq.w	8003322 <RI_GetRegCommandParser+0x822>
 8002c3a:	f240 8188 	bls.w	8002f4e <RI_GetRegCommandParser+0x44e>
 8002c3e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002c42:	f000 8364 	beq.w	800330e <RI_GetRegCommandParser+0x80e>
 8002c46:	f240 812f 	bls.w	8002ea8 <RI_GetRegCommandParser+0x3a8>
 8002c4a:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002c4e:	f000 8384 	beq.w	800335a <RI_GetRegCommandParser+0x85a>
 8002c52:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002c56:	d132      	bne.n	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata16 = MCI_GetIqd(pMCI).d;
 8002c58:	4658      	mov	r0, fp
 8002c5a:	f7fe fc51 	bl	8001500 <MCI_GetIqd>
         break;
 8002c5e:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIqd(pMCI).d;
 8002c60:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002c64:	900f      	str	r0, [sp, #60]	; 0x3c
 8002c66:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8002c68:	4623      	mov	r3, r4
         break;
 8002c6a:	e7c5      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002c6c:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8002c70:	f000 83ad 	beq.w	80033ce <RI_GetRegCommandParser+0x8ce>
 8002c74:	f240 81a1 	bls.w	8002fba <RI_GetRegCommandParser+0x4ba>
 8002c78:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8002c7c:	f000 8399 	beq.w	80033b2 <RI_GetRegCommandParser+0x8b2>
 8002c80:	f240 8154 	bls.w	8002f2c <RI_GetRegCommandParser+0x42c>
 8002c84:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8002c88:	f000 8385 	beq.w	8003396 <RI_GetRegCommandParser+0x896>
 8002c8c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002c90:	d115      	bne.n	8002cbe <RI_GetRegCommandParser+0x1be>
            *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8002c92:	4b98      	ldr	r3, [pc, #608]	; (8002ef4 <RI_GetRegCommandParser+0x3f4>)
 8002c94:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002c98:	3034      	adds	r0, #52	; 0x34
 8002c9a:	f005 f88f 	bl	8007dbc <PID_GetKI>
 8002c9e:	2402      	movs	r4, #2
 8002ca0:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8002ca2:	4623      	mov	r3, r4
 8002ca4:	e7a8      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
      if (freeSpace > 0 )
 8002ca6:	2d00      	cmp	r5, #0
 8002ca8:	f77f af7e 	ble.w	8002ba8 <RI_GetRegCommandParser+0xa8>
        switch (regID)
 8002cac:	2b88      	cmp	r3, #136	; 0x88
 8002cae:	f000 81f5 	beq.w	800309c <RI_GetRegCommandParser+0x59c>
 8002cb2:	2bc8      	cmp	r3, #200	; 0xc8
 8002cb4:	f000 81e8 	beq.w	8003088 <RI_GetRegCommandParser+0x588>
 8002cb8:	2b48      	cmp	r3, #72	; 0x48
 8002cba:	f000 81da 	beq.w	8003072 <RI_GetRegCommandParser+0x572>
 8002cbe:	2005      	movs	r0, #5
  return retVal;
 8002cc0:	e757      	b.n	8002b72 <RI_GetRegCommandParser+0x72>
      if ( freeSpace >= 4)
 8002cc2:	2d03      	cmp	r5, #3
 8002cc4:	f77f af70 	ble.w	8002ba8 <RI_GetRegCommandParser+0xa8>
        switch (regID)
 8002cc8:	2b98      	cmp	r3, #152	; 0x98
 8002cca:	f000 8259 	beq.w	8003180 <RI_GetRegCommandParser+0x680>
 8002cce:	d90e      	bls.n	8002cee <RI_GetRegCommandParser+0x1ee>
 8002cd0:	2bd8      	cmp	r3, #216	; 0xd8
 8002cd2:	f000 8259 	beq.w	8003188 <RI_GetRegCommandParser+0x688>
 8002cd6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8002cda:	d1f0      	bne.n	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 8002cdc:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <RI_GetRegCommandParser+0x3f4>)
 8002cde:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002ce2:	f007 fa59 	bl	800a198 <STO_PLL_GetObservedBemfLevel>
 8002ce6:	2404      	movs	r4, #4
 8002ce8:	6038      	str	r0, [r7, #0]
        *size = 4;
 8002cea:	4623      	mov	r3, r4
 8002cec:	e784      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002cee:	2b18      	cmp	r3, #24
 8002cf0:	f000 823b 	beq.w	800316a <RI_GetRegCommandParser+0x66a>
 8002cf4:	2b58      	cmp	r3, #88	; 0x58
 8002cf6:	d1e2      	bne.n	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002cf8:	4658      	mov	r0, fp
 8002cfa:	f7fe fbd9 	bl	80014b0 <MCI_GetAvrgMecSpeedUnit>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002cfe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002d02:	0040      	lsls	r0, r0, #1
 8002d04:	2404      	movs	r4, #4
 8002d06:	6038      	str	r0, [r7, #0]
        *size = 4;
 8002d08:	4623      	mov	r3, r4
 8002d0a:	e775      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002d0c:	2be8      	cmp	r3, #232	; 0xe8
 8002d0e:	d1d6      	bne.n	8002cbe <RI_GetRegCommandParser+0x1be>
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8002d10:	230c      	movs	r3, #12
        if ((*rawSize) +2  > freeSpace)
 8002d12:	2d0d      	cmp	r5, #13
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8002d14:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8002d16:	f77f af47 	ble.w	8002ba8 <RI_GetRegCommandParser+0xa8>
          memcpy(rawData, FOCConfig_reg[motorID], sizeof(FOCFwConfig_reg_t) );
 8002d1a:	4b77      	ldr	r3, [pc, #476]	; (8002ef8 <RI_GetRegCommandParser+0x3f8>)
 8002d1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d20:	240e      	movs	r4, #14
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	6093      	str	r3, [r2, #8]
 8002d2a:	6010      	str	r0, [r2, #0]
 8002d2c:	6051      	str	r1, [r2, #4]
      *size = (*rawSize)+2;
 8002d2e:	4623      	mov	r3, r4
 8002d30:	e762      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002d32:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8002d36:	f000 81e0 	beq.w	80030fa <RI_GetRegCommandParser+0x5fa>
 8002d3a:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002d3e:	d131      	bne.n	8002da4 <RI_GetRegCommandParser+0x2a4>
        *rawSize = 4;
 8002d40:	2304      	movs	r3, #4
 8002d42:	803b      	strh	r3, [r7, #0]
        *iqref = MCI_GetIqdref(pMCI).q;
 8002d44:	4658      	mov	r0, fp
 8002d46:	f7fe fbe9 	bl	800151c <MCI_GetIqdref>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	8078      	strh	r0, [r7, #2]
        *idref = MCI_GetIqdref(pMCI).d;
 8002d4e:	4658      	mov	r0, fp
        *iqref = MCI_GetIqdref(pMCI).q;
 8002d50:	9304      	str	r3, [sp, #16]
        *idref = MCI_GetIqdref(pMCI).d;
 8002d52:	f7fe fbe3 	bl	800151c <MCI_GetIqdref>
      *size = (*rawSize)+2;
 8002d56:	883b      	ldrh	r3, [r7, #0]
        *idref = MCI_GetIqdref(pMCI).d;
 8002d58:	9003      	str	r0, [sp, #12]
      *size = (*rawSize)+2;
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	b29b      	uxth	r3, r3
        *idref = MCI_GetIqdref(pMCI).d;
 8002d5e:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8002d62:	80ba      	strh	r2, [r7, #4]
     if (retVal == MCP_CMD_OK )
 8002d64:	461c      	mov	r4, r3
 8002d66:	e747      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002d68:	2be0      	cmp	r3, #224	; 0xe0
 8002d6a:	d1a8      	bne.n	8002cbe <RI_GetRegCommandParser+0x1be>
        retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002d6c:	4b63      	ldr	r3, [pc, #396]	; (8002efc <RI_GetRegCommandParser+0x3fc>)
 8002d6e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8002d72:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8002d76:	2900      	cmp	r1, #0
 8002d78:	f000 8197 	beq.w	80030aa <RI_GetRegCommandParser+0x5aa>
 8002d7c:	2d01      	cmp	r5, #1
 8002d7e:	f340 814b 	ble.w	8003018 <RI_GetRegCommandParser+0x518>
 8002d82:	3424      	adds	r4, #36	; 0x24
 8002d84:	4638      	mov	r0, r7
 8002d86:	f1c7 0201 	rsb	r2, r7, #1
 8002d8a:	e002      	b.n	8002d92 <RI_GetRegCommandParser+0x292>
 8002d8c:	42ab      	cmp	r3, r5
 8002d8e:	f280 8143 	bge.w	8003018 <RI_GetRegCommandParser+0x518>
    *destString = *srcString ;
 8002d92:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8002d96:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002d9a:	1883      	adds	r3, r0, r2
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2900      	cmp	r1, #0
 8002da0:	d1f4      	bne.n	8002d8c <RI_GetRegCommandParser+0x28c>
 8002da2:	e726      	b.n	8002bf2 <RI_GetRegCommandParser+0xf2>
 8002da4:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8002da8:	d189      	bne.n	8002cbe <RI_GetRegCommandParser+0x1be>
          *rawSize = 4;
 8002daa:	2304      	movs	r3, #4
 8002dac:	803b      	strh	r3, [r7, #0]
          *torque = MCI_GetLastRampFinalTorque(pMCI);
 8002dae:	4658      	mov	r0, fp
 8002db0:	f7fe fb74 	bl	800149c <MCI_GetLastRampFinalTorque>
 8002db4:	8078      	strh	r0, [r7, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002db6:	4658      	mov	r0, fp
 8002db8:	f7fe fb74 	bl	80014a4 <MCI_GetLastRampFinalDuration>
      *size = (*rawSize)+2;
 8002dbc:	883b      	ldrh	r3, [r7, #0]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8002dbe:	80b8      	strh	r0, [r7, #4]
      *size = (*rawSize)+2;
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	b29b      	uxth	r3, r3
     if (retVal == MCP_CMD_OK )
 8002dc4:	461c      	mov	r4, r3
 8002dc6:	e717      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002dc8:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002dcc:	d032      	beq.n	8002e34 <RI_GetRegCommandParser+0x334>
 8002dce:	d920      	bls.n	8002e12 <RI_GetRegCommandParser+0x312>
 8002dd0:	f241 5290 	movw	r2, #5520	; 0x1590
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	f000 828a 	beq.w	80032ee <RI_GetRegCommandParser+0x7ee>
 8002dda:	f240 8095 	bls.w	8002f08 <RI_GetRegCommandParser+0x408>
 8002dde:	f241 6250 	movw	r2, #5712	; 0x1650
 8002de2:	4293      	cmp	r3, r2
 8002de4:	f000 827a 	beq.w	80032dc <RI_GetRegCommandParser+0x7dc>
 8002de8:	d96e      	bls.n	8002ec8 <RI_GetRegCommandParser+0x3c8>
 8002dea:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8002dee:	4293      	cmp	r3, r2
 8002df0:	f000 826a 	beq.w	80032c8 <RI_GetRegCommandParser+0x7c8>
 8002df4:	f641 1210 	movw	r2, #6416	; 0x1910
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	f47f af60 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <RI_GetRegCommandParser+0x3f4>)
 8002e00:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002e04:	3034      	adds	r0, #52	; 0x34
 8002e06:	f004 ffdf 	bl	8007dc8 <PID_GetKPDivisorPOW2>
 8002e0a:	2402      	movs	r4, #2
 8002e0c:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8002e0e:	4623      	mov	r3, r4
 8002e10:	e6f2      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002e12:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8002e16:	f000 824e 	beq.w	80032b6 <RI_GetRegCommandParser+0x7b6>
 8002e1a:	d92e      	bls.n	8002e7a <RI_GetRegCommandParser+0x37a>
 8002e1c:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8002e20:	f000 823d 	beq.w	800329e <RI_GetRegCommandParser+0x79e>
 8002e24:	d917      	bls.n	8002e56 <RI_GetRegCommandParser+0x356>
 8002e26:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8002e2a:	f000 822c 	beq.w	8003286 <RI_GetRegCommandParser+0x786>
 8002e2e:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002e32:	d102      	bne.n	8002e3a <RI_GetRegCommandParser+0x33a>
 8002e34:	2402      	movs	r4, #2
 8002e36:	4623      	mov	r3, r4
 8002e38:	e6de      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002e3a:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8002e3e:	f47f af3e 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8002e42:	4b2c      	ldr	r3, [pc, #176]	; (8002ef4 <RI_GetRegCommandParser+0x3f4>)
 8002e44:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002e48:	f007 f96c 	bl	800a124 <STO_PLL_GetEstimatedBemf>
          break;
 8002e4c:	2402      	movs	r4, #2
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8002e4e:	9006      	str	r0, [sp, #24]
        *size = 2;
 8002e50:	4623      	mov	r3, r4
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8002e52:	8038      	strh	r0, [r7, #0]
          break;
 8002e54:	e6d0      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002e56:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8002e5a:	f000 820b 	beq.w	8003274 <RI_GetRegCommandParser+0x774>
 8002e5e:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8002e62:	f47f af2c 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <RI_GetRegCommandParser+0x3f4>)
 8002e68:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002e6c:	f007 f966 	bl	800a13c <STO_PLL_GetEstimatedCurrent>
          break;
 8002e70:	2402      	movs	r4, #2
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8002e72:	9008      	str	r0, [sp, #32]
        *size = 2;
 8002e74:	4623      	mov	r3, r4
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8002e76:	8038      	strh	r0, [r7, #0]
          break;
 8002e78:	e6be      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002e7a:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8002e7e:	f000 81d1 	beq.w	8003224 <RI_GetRegCommandParser+0x724>
 8002e82:	d979      	bls.n	8002f78 <RI_GetRegCommandParser+0x478>
 8002e84:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002e88:	f000 825f 	beq.w	800334a <RI_GetRegCommandParser+0x84a>
 8002e8c:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002e90:	f47f af15 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 8002e94:	4658      	mov	r0, fp
 8002e96:	f7fe fb5d 	bl	8001554 <MCI_GetValphabeta>
         break;
 8002e9a:	2402      	movs	r4, #2
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 8002e9c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8002ea0:	9009      	str	r0, [sp, #36]	; 0x24
 8002ea2:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8002ea4:	4623      	mov	r3, r4
         break;
 8002ea6:	e6a7      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002ea8:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002eac:	f000 8243 	beq.w	8003336 <RI_GetRegCommandParser+0x836>
 8002eb0:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002eb4:	f47f af03 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8002eb8:	4658      	mov	r0, fp
 8002eba:	f7fe fb13 	bl	80014e4 <MCI_GetIalphabeta>
         break;
 8002ebe:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8002ec0:	9012      	str	r0, [sp, #72]	; 0x48
        *size = 2;
 8002ec2:	4623      	mov	r3, r4
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8002ec4:	8038      	strh	r0, [r7, #0]
         break;
 8002ec6:	e697      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002ec8:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	f000 824c 	beq.w	800336a <RI_GetRegCommandParser+0x86a>
 8002ed2:	f241 6210 	movw	r2, #5648	; 0x1610
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	f47f aef1 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8002edc:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <RI_GetRegCommandParser+0x400>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8002ede:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002ee2:	f004 ff7d 	bl	8007de0 <PID_GetKIDivisorPOW2>
 8002ee6:	2402      	movs	r4, #2
 8002ee8:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8002eea:	4623      	mov	r3, r4
 8002eec:	e684      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002eee:	bf00      	nop
 8002ef0:	0800a364 	.word	0x0800a364
 8002ef4:	20000650 	.word	0x20000650
 8002ef8:	2000057c 	.word	0x2000057c
 8002efc:	20000580 	.word	0x20000580
 8002f00:	2000056c 	.word	0x2000056c
 8002f04:	20000a14 	.word	0x20000a14
 8002f08:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	f000 8210 	beq.w	8003332 <RI_GetRegCommandParser+0x832>
 8002f12:	d961      	bls.n	8002fd8 <RI_GetRegCommandParser+0x4d8>
 8002f14:	f241 5210 	movw	r2, #5392	; 0x1510
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	f000 825a 	beq.w	80033d2 <RI_GetRegCommandParser+0x8d2>
 8002f1e:	f241 5250 	movw	r2, #5456	; 0x1550
 8002f22:	4293      	cmp	r3, r2
 8002f24:	f47f aecb 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8002f28:	4bc3      	ldr	r3, [pc, #780]	; (8003238 <RI_GetRegCommandParser+0x738>)
 8002f2a:	e7d8      	b.n	8002ede <RI_GetRegCommandParser+0x3de>
 8002f2c:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8002f30:	f000 81df 	beq.w	80032f2 <RI_GetRegCommandParser+0x7f2>
 8002f34:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002f38:	f47f aec1 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8002f3c:	4bbe      	ldr	r3, [pc, #760]	; (8003238 <RI_GetRegCommandParser+0x738>)
 8002f3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002f42:	f004 ff6b 	bl	8007e1c <PID_GetKD>
         break;
 8002f46:	2402      	movs	r4, #2
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8002f48:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8002f4a:	4623      	mov	r3, r4
         break;
 8002f4c:	e654      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002f4e:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8002f52:	f000 8141 	beq.w	80031d8 <RI_GetRegCommandParser+0x6d8>
 8002f56:	d91f      	bls.n	8002f98 <RI_GetRegCommandParser+0x498>
 8002f58:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8002f5c:	f000 81cb 	beq.w	80032f6 <RI_GetRegCommandParser+0x7f6>
 8002f60:	f5b3 6fd2 	cmp.w	r3, #1680	; 0x690
 8002f64:	f47f aeab 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata16 = DAC_GetChannelConfig(&DAC_Handle , DAC_CH2);
 8002f68:	2101      	movs	r1, #1
 8002f6a:	48b4      	ldr	r0, [pc, #720]	; (800323c <RI_GetRegCommandParser+0x73c>)
 8002f6c:	f7fd fea0 	bl	8000cb0 <DAC_GetChannelConfig>
         break;
 8002f70:	2402      	movs	r4, #2
          *regdata16 = DAC_GetChannelConfig(&DAC_Handle , DAC_CH2);
 8002f72:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8002f74:	4623      	mov	r3, r4
         break;
 8002f76:	e63f      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002f78:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002f7c:	f000 81f7 	beq.w	800336e <RI_GetRegCommandParser+0x86e>
 8002f80:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002f84:	f47f ae9b 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata16 = MCI_GetVqd(pMCI).q;
 8002f88:	4658      	mov	r0, fp
 8002f8a:	f7fe fad5 	bl	8001538 <MCI_GetVqd>
         break;
 8002f8e:	2402      	movs	r4, #2
          *regdata16 = MCI_GetVqd(pMCI).q;
 8002f90:	900c      	str	r0, [sp, #48]	; 0x30
        *size = 2;
 8002f92:	4623      	mov	r3, r4
          *regdata16 = MCI_GetVqd(pMCI).q;
 8002f94:	8038      	strh	r0, [r7, #0]
         break;
 8002f96:	e62f      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002f98:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8002f9c:	f000 8139 	beq.w	8003212 <RI_GetRegCommandParser+0x712>
 8002fa0:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8002fa4:	f47f ae8b 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8002fa8:	4ba5      	ldr	r3, [pc, #660]	; (8003240 <RI_GetRegCommandParser+0x740>)
 8002faa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002fae:	f004 fedf 	bl	8007d70 <NTC_GetAvTemp_C>
         break;
 8002fb2:	2402      	movs	r4, #2
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8002fb4:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8002fb6:	4623      	mov	r3, r4
         break;
 8002fb8:	e61e      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8002fba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002fbe:	f000 8126 	beq.w	800320e <RI_GetRegCommandParser+0x70e>
 8002fc2:	d915      	bls.n	8002ff0 <RI_GetRegCommandParser+0x4f0>
 8002fc4:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8002fc8:	f000 8118 	beq.w	80031fc <RI_GetRegCommandParser+0x6fc>
 8002fcc:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002fd0:	f47f ae75 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8002fd4:	4b9b      	ldr	r3, [pc, #620]	; (8003244 <RI_GetRegCommandParser+0x744>)
 8002fd6:	e7b2      	b.n	8002f3e <RI_GetRegCommandParser+0x43e>
 8002fd8:	f241 4250 	movw	r2, #5200	; 0x1450
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	f000 8104 	beq.w	80031ea <RI_GetRegCommandParser+0x6ea>
 8002fe2:	f241 4290 	movw	r2, #5264	; 0x1490
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	f47f ae69 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8002fec:	4b96      	ldr	r3, [pc, #600]	; (8003248 <RI_GetRegCommandParser+0x748>)
 8002fee:	e776      	b.n	8002ede <RI_GetRegCommandParser+0x3de>
 8002ff0:	2bd0      	cmp	r3, #208	; 0xd0
 8002ff2:	f000 81ce 	beq.w	8003392 <RI_GetRegCommandParser+0x892>
 8002ff6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002ffa:	d101      	bne.n	8003000 <RI_GetRegCommandParser+0x500>
          *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8002ffc:	4b92      	ldr	r3, [pc, #584]	; (8003248 <RI_GetRegCommandParser+0x748>)
 8002ffe:	e79e      	b.n	8002f3e <RI_GetRegCommandParser+0x43e>
 8003000:	2b90      	cmp	r3, #144	; 0x90
 8003002:	f47f ae5c 	bne.w	8002cbe <RI_GetRegCommandParser+0x1be>
          *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8003006:	4b90      	ldr	r3, [pc, #576]	; (8003248 <RI_GetRegCommandParser+0x748>)
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 8003008:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800300c:	f004 fed2 	bl	8007db4 <PID_GetKP>
         break;
 8003010:	2402      	movs	r4, #2
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 8003012:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003014:	4623      	mov	r3, r4
         break;
 8003016:	e5ef      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003018:	2006      	movs	r0, #6
 800301a:	e5aa      	b.n	8002b72 <RI_GetRegCommandParser+0x72>
        retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 800301c:	4b8b      	ldr	r3, [pc, #556]	; (800324c <RI_GetRegCommandParser+0x74c>)
 800301e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8003022:	7821      	ldrb	r1, [r4, #0]
 8003024:	2900      	cmp	r1, #0
 8003026:	d040      	beq.n	80030aa <RI_GetRegCommandParser+0x5aa>
 8003028:	2d01      	cmp	r5, #1
 800302a:	ddf5      	ble.n	8003018 <RI_GetRegCommandParser+0x518>
 800302c:	4638      	mov	r0, r7
 800302e:	f1c7 0201 	rsb	r2, r7, #1
 8003032:	e001      	b.n	8003038 <RI_GetRegCommandParser+0x538>
 8003034:	42ab      	cmp	r3, r5
 8003036:	daef      	bge.n	8003018 <RI_GetRegCommandParser+0x518>
    *destString = *srcString ;
 8003038:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 800303c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003040:	1883      	adds	r3, r0, r2
 8003042:	b29b      	uxth	r3, r3
 8003044:	2900      	cmp	r1, #0
 8003046:	d1f5      	bne.n	8003034 <RI_GetRegCommandParser+0x534>
 8003048:	e5d3      	b.n	8002bf2 <RI_GetRegCommandParser+0xf2>
 800304a:	4c81      	ldr	r4, [pc, #516]	; (8003250 <RI_GetRegCommandParser+0x750>)
 800304c:	7821      	ldrb	r1, [r4, #0]
 800304e:	b361      	cbz	r1, 80030aa <RI_GetRegCommandParser+0x5aa>
 8003050:	2d01      	cmp	r5, #1
 8003052:	dde1      	ble.n	8003018 <RI_GetRegCommandParser+0x518>
 8003054:	4638      	mov	r0, r7
 8003056:	f1c7 0201 	rsb	r2, r7, #1
 800305a:	e001      	b.n	8003060 <RI_GetRegCommandParser+0x560>
 800305c:	42ab      	cmp	r3, r5
 800305e:	dadb      	bge.n	8003018 <RI_GetRegCommandParser+0x518>
    *destString = *srcString ;
 8003060:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8003064:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003068:	1883      	adds	r3, r0, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	2900      	cmp	r1, #0
 800306e:	d1f5      	bne.n	800305c <RI_GetRegCommandParser+0x55c>
 8003070:	e5bf      	b.n	8002bf2 <RI_GetRegCommandParser+0xf2>
          *data = STM_GetState(&STM[motorID]);
 8003072:	4878      	ldr	r0, [pc, #480]	; (8003254 <RI_GetRegCommandParser+0x754>)
 8003074:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003078:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800307c:	f006 f92a 	bl	80092d4 <STM_GetState>
 8003080:	2401      	movs	r4, #1
 8003082:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003084:	4623      	mov	r3, r4
 8003086:	e5b7      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *data = (RevUpControl[motorID] != MC_NULL ) ? RUC_GetNumberOfPhases(RevUpControl[motorID])
 8003088:	4b73      	ldr	r3, [pc, #460]	; (8003258 <RI_GetRegCommandParser+0x758>)
 800308a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800308e:	b108      	cbz	r0, 8003094 <RI_GetRegCommandParser+0x594>
 8003090:	f006 fdc4 	bl	8009c1c <RUC_GetNumberOfPhases>
          break;
 8003094:	2401      	movs	r4, #1
          *data = (RevUpControl[motorID] != MC_NULL ) ? RUC_GetNumberOfPhases(RevUpControl[motorID])
 8003096:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003098:	4623      	mov	r3, r4
          break;
 800309a:	e5ad      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *data =  MCI_GetControlMode(pMCI);
 800309c:	4658      	mov	r0, fp
 800309e:	f7fe f9d5 	bl	800144c <MCI_GetControlMode>
          break;
 80030a2:	2401      	movs	r4, #1
          *data =  MCI_GetControlMode(pMCI);
 80030a4:	7038      	strb	r0, [r7, #0]
        *size = 1;
 80030a6:	4623      	mov	r3, r4
          break;
 80030a8:	e5a6      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
  while ((*srcString != 0) && (*size < maxSize) )
 80030aa:	2401      	movs	r4, #1
  *size= 1 ; /* /0 is the min String size */
 80030ac:	4623      	mov	r3, r4
  while ((*srcString != 0) && (*size < maxSize) )
 80030ae:	4638      	mov	r0, r7
 80030b0:	e5a0      	b.n	8002bf4 <RI_GetRegCommandParser+0xf4>
          *rpm = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80030b2:	4658      	mov	r0, fp
 80030b4:	f7fe f9ee 	bl	8001494 <MCI_GetLastRampFinalSpeed>
 80030b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80030bc:	0040      	lsls	r0, r0, #1
 80030be:	f8c7 0002 	str.w	r0, [r7, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 80030c2:	4658      	mov	r0, fp
 80030c4:	f7fe f9ee 	bl	80014a4 <MCI_GetLastRampFinalDuration>
          *rawSize = 6;
 80030c8:	2408      	movs	r4, #8
 80030ca:	2306      	movs	r3, #6
 80030cc:	803b      	strh	r3, [r7, #0]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 80030ce:	80f8      	strh	r0, [r7, #6]
      *size = (*rawSize)+2;
 80030d0:	4623      	mov	r3, r4
 80030d2:	e591      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
        *rawSize = sizeof(ApplicationConfig_reg_t);
 80030d4:	230e      	movs	r3, #14
        if ((*rawSize) +2  > freeSpace)
 80030d6:	2d0f      	cmp	r5, #15
        *rawSize = sizeof(ApplicationConfig_reg_t);
 80030d8:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 80030da:	f77f ad65 	ble.w	8002ba8 <RI_GetRegCommandParser+0xa8>
          memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 80030de:	4b5f      	ldr	r3, [pc, #380]	; (800325c <RI_GetRegCommandParser+0x75c>)
 80030e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030e4:	689c      	ldr	r4, [r3, #8]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
 80030ea:	6051      	str	r1, [r2, #4]
 80030ec:	6094      	str	r4, [r2, #8]
 80030ee:	6010      	str	r0, [r2, #0]
 80030f0:	899b      	ldrh	r3, [r3, #12]
 80030f2:	8193      	strh	r3, [r2, #12]
 80030f4:	2410      	movs	r4, #16
      *size = (*rawSize)+2;
 80030f6:	4623      	mov	r3, r4
 80030f8:	e57e      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
        *rawSize = RUC_MAX_PHASE_NUMBER*8;
 80030fa:	2328      	movs	r3, #40	; 0x28
        if ((*rawSize) +2  > freeSpace)
 80030fc:	2d29      	cmp	r5, #41	; 0x29
        *rawSize = RUC_MAX_PHASE_NUMBER*8;
 80030fe:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8003100:	f77f ad52 	ble.w	8002ba8 <RI_GetRegCommandParser+0xa8>
 8003104:	f04f 0b00 	mov.w	fp, #0
 8003108:	9501      	str	r5, [sp, #4]
 800310a:	463c      	mov	r4, r7
 800310c:	465d      	mov	r5, fp
 800310e:	468b      	mov	fp, r1
            RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8003110:	4b51      	ldr	r3, [pc, #324]	; (8003258 <RI_GetRegCommandParser+0x758>)
 8003112:	b2e9      	uxtb	r1, r5
 8003114:	aa15      	add	r2, sp, #84	; 0x54
 8003116:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800311a:	f006 fd83 	bl	8009c24 <RUC_GetPhase>
            *rpm = (revUpPhase.hFinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800311e:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
            *finalTorque = revUpPhase.hFinalTorque;
 8003122:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
 8003126:	80e1      	strh	r1, [r4, #6]
            *rpm = (revUpPhase.hFinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8003128:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800312c:	3501      	adds	r5, #1
            *durationms  = revUpPhase.hDurationms;
 800312e:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
            *rpm = (revUpPhase.hFinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8003132:	0052      	lsls	r2, r2, #1
          for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++){
 8003134:	2d05      	cmp	r5, #5
            *rpm = (revUpPhase.hFinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8003136:	f8c4 2002 	str.w	r2, [r4, #2]
            *durationms  = revUpPhase.hDurationms;
 800313a:	f824 1f08 	strh.w	r1, [r4, #8]!
          for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++){
 800313e:	d1e7      	bne.n	8003110 <RI_GetRegCommandParser+0x610>
      *size = (*rawSize)+2;
 8003140:	883b      	ldrh	r3, [r7, #0]
 8003142:	9d01      	ldr	r5, [sp, #4]
 8003144:	3302      	adds	r3, #2
 8003146:	b29b      	uxth	r3, r3
    break;
 8003148:	461c      	mov	r4, r3
 800314a:	e555      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
        *rawSize = sizeof(GlobalConfig_reg_t);
 800314c:	230a      	movs	r3, #10
        if ((*rawSize) +2  > freeSpace)
 800314e:	2d0b      	cmp	r5, #11
        *rawSize = sizeof(GlobalConfig_reg_t);
 8003150:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8003152:	f77f ad29 	ble.w	8002ba8 <RI_GetRegCommandParser+0xa8>
          memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t) );
 8003156:	4b42      	ldr	r3, [pc, #264]	; (8003260 <RI_GetRegCommandParser+0x760>)
 8003158:	240c      	movs	r4, #12
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	891b      	ldrh	r3, [r3, #8]
 8003160:	8113      	strh	r3, [r2, #8]
 8003162:	6010      	str	r0, [r2, #0]
 8003164:	6051      	str	r1, [r2, #4]
      *size = (*rawSize)+2;
 8003166:	4623      	mov	r3, r4
 8003168:	e546      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdataU32 = STM_GetFaultState(&STM[motorID]);
 800316a:	483a      	ldr	r0, [pc, #232]	; (8003254 <RI_GetRegCommandParser+0x754>)
 800316c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003170:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8003174:	f006 f8bc 	bl	80092f0 <STM_GetFaultState>
 8003178:	2404      	movs	r4, #4
 800317a:	6038      	str	r0, [r7, #0]
        *size = 4;
 800317c:	4623      	mov	r3, r4
 800317e:	e53b      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003180:	4658      	mov	r0, fp
 8003182:	f7fe f99d 	bl	80014c0 <MCI_GetMecSpeedRefUnit>
 8003186:	e5ba      	b.n	8002cfe <RI_GetRegCommandParser+0x1fe>
          *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <RI_GetRegCommandParser+0x764>)
 800318a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800318e:	f006 ffff 	bl	800a190 <STO_PLL_GetEstimatedBemfLevel>
 8003192:	2404      	movs	r4, #4
 8003194:	6038      	str	r0, [r7, #0]
        *size = 4;
 8003196:	4623      	mov	r3, r4
 8003198:	e52e      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          memcpy(rawData, MotorConfig_reg[motorID], sizeof(MotorConfig_reg_t) );
 800319a:	4b33      	ldr	r3, [pc, #204]	; (8003268 <RI_GetRegCommandParser+0x768>)
 800319c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031a0:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 80031a4:	681c      	ldr	r4, [r3, #0]
 80031a6:	6858      	ldr	r0, [r3, #4]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80031ae:	f8c2 c00c 	str.w	ip, [r2, #12]
 80031b2:	3310      	adds	r3, #16
 80031b4:	4573      	cmp	r3, lr
 80031b6:	6014      	str	r4, [r2, #0]
 80031b8:	6050      	str	r0, [r2, #4]
 80031ba:	6091      	str	r1, [r2, #8]
 80031bc:	f102 0210 	add.w	r2, r2, #16
 80031c0:	d1f0      	bne.n	80031a4 <RI_GetRegCommandParser+0x6a4>
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	6093      	str	r3, [r2, #8]
 80031ca:	243e      	movs	r4, #62	; 0x3e
 80031cc:	6010      	str	r0, [r2, #0]
 80031ce:	6051      	str	r1, [r2, #4]
      *size = (*rawSize)+2;
 80031d0:	4623      	mov	r3, r4
 80031d2:	e511      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
  uint8_t retVal = MCP_CMD_NOK;
 80031d4:	2001      	movs	r0, #1
 80031d6:	e4cc      	b.n	8002b72 <RI_GetRegCommandParser+0x72>
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 80031d8:	4b24      	ldr	r3, [pc, #144]	; (800326c <RI_GetRegCommandParser+0x76c>)
 80031da:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80031de:	f004 fd83 	bl	8007ce8 <MPM_GetAvrgElMotorPowerW>
         break;
 80031e2:	2402      	movs	r4, #2
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 80031e4:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80031e6:	4623      	mov	r3, r4
         break;
 80031e8:	e506      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80031ea:	4b17      	ldr	r3, [pc, #92]	; (8003248 <RI_GetRegCommandParser+0x748>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 80031ec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80031f0:	f004 fdea 	bl	8007dc8 <PID_GetKPDivisorPOW2>
 80031f4:	2402      	movs	r4, #2
 80031f6:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80031f8:	4623      	mov	r3, r4
 80031fa:	e4fd      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = PID_GetKI(pPIDIq[motorID]);
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <RI_GetRegCommandParser+0x744>)
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 80031fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003202:	f004 fddb 	bl	8007dbc <PID_GetKI>
         break;
 8003206:	2402      	movs	r4, #2
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003208:	8038      	strh	r0, [r7, #0]
        *size = 2;
 800320a:	4623      	mov	r3, r4
         break;
 800320c:	e4f4      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = PID_GetKP(pPIDIq[motorID]);
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <RI_GetRegCommandParser+0x744>)
 8003210:	e6fa      	b.n	8003008 <RI_GetRegCommandParser+0x508>
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <RI_GetRegCommandParser+0x770>)
 8003214:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003218:	f004 fac6 	bl	80077a8 <VBS_GetAvBusVoltage_V>
         break;
 800321c:	2402      	movs	r4, #2
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 800321e:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003220:	4623      	mov	r3, r4
         break;
 8003222:	e4e9      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = MCI_GetVqd(pMCI).d;
 8003224:	4658      	mov	r0, fp
 8003226:	f7fe f987 	bl	8001538 <MCI_GetVqd>
         break;
 800322a:	2402      	movs	r4, #2
          *regdata16 = MCI_GetVqd(pMCI).d;
 800322c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003230:	900b      	str	r0, [sp, #44]	; 0x2c
 8003232:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003234:	4623      	mov	r3, r4
         break;
 8003236:	e4df      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
 8003238:	20000568 	.word	0x20000568
 800323c:	20000694 	.word	0x20000694
 8003240:	20000574 	.word	0x20000574
 8003244:	2000056c 	.word	0x2000056c
 8003248:	2000064c 	.word	0x2000064c
 800324c:	20000584 	.word	0x20000584
 8003250:	0800a374 	.word	0x0800a374
 8003254:	20000a30 	.word	0x20000a30
 8003258:	20000648 	.word	0x20000648
 800325c:	20000578 	.word	0x20000578
 8003260:	0800a3f8 	.word	0x0800a3f8
 8003264:	20000650 	.word	0x20000650
 8003268:	20000580 	.word	0x20000580
 800326c:	20000564 	.word	0x20000564
 8003270:	20000644 	.word	0x20000644
            *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t*) stoPLLSensor[motorID]);
 8003274:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <RI_GetRegCommandParser+0x8d8>)
 8003276:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800327a:	f005 febd 	bl	8008ff8 <SPD_GetS16Speed>
          break;
 800327e:	2402      	movs	r4, #2
            *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t*) stoPLLSensor[motorID]);
 8003280:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003282:	4623      	mov	r3, r4
          break;
 8003284:	e4b8      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 8003286:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <RI_GetRegCommandParser+0x8d8>)
 8003288:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800328c:	f006 ff4a 	bl	800a124 <STO_PLL_GetEstimatedBemf>
          break;
 8003290:	2402      	movs	r4, #2
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 8003292:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003296:	9005      	str	r0, [sp, #20]
 8003298:	803b      	strh	r3, [r7, #0]
        *size = 2;
 800329a:	4623      	mov	r3, r4
          break;
 800329c:	e4ac      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 800329e:	4b4e      	ldr	r3, [pc, #312]	; (80033d8 <RI_GetRegCommandParser+0x8d8>)
 80032a0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80032a4:	f006 ff4a 	bl	800a13c <STO_PLL_GetEstimatedCurrent>
         break;
 80032a8:	2402      	movs	r4, #2
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 80032aa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80032ae:	9007      	str	r0, [sp, #28]
 80032b0:	803b      	strh	r3, [r7, #0]
        *size = 2;
 80032b2:	4623      	mov	r3, r4
         break;
 80032b4:	e4a0      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
            *regdata16 = SPD_GetElAngle( (SpeednPosFdbk_Handle_t*) stoPLLSensor[motorID]);
 80032b6:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <RI_GetRegCommandParser+0x8d8>)
 80032b8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80032bc:	f005 fe64 	bl	8008f88 <SPD_GetElAngle>
         break;
 80032c0:	2402      	movs	r4, #2
            *regdata16 = SPD_GetElAngle( (SpeednPosFdbk_Handle_t*) stoPLLSensor[motorID]);
 80032c2:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80032c4:	4623      	mov	r3, r4
         break;
 80032c6:	e497      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 80032c8:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <RI_GetRegCommandParser+0x8d8>)
 80032ca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80032ce:	3034      	adds	r0, #52	; 0x34
 80032d0:	f004 fd86 	bl	8007de0 <PID_GetKIDivisorPOW2>
 80032d4:	2402      	movs	r4, #2
 80032d6:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80032d8:	4623      	mov	r3, r4
 80032da:	e48d      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80032dc:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <RI_GetRegCommandParser+0x8dc>)
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 80032de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80032e2:	f004 fd9f 	bl	8007e24 <PID_GetKDDivisorPOW2>
 80032e6:	2402      	movs	r4, #2
 80032e8:	8038      	strh	r0, [r7, #0]
        *size = 2;
 80032ea:	4623      	mov	r3, r4
 80032ec:	e484      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 80032ee:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <RI_GetRegCommandParser+0x8e0>)
 80032f0:	e7f5      	b.n	80032de <RI_GetRegCommandParser+0x7de>
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 80032f2:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <RI_GetRegCommandParser+0x8e0>)
 80032f4:	e783      	b.n	80031fe <RI_GetRegCommandParser+0x6fe>
          *regdata16 = DAC_GetChannelConfig(&DAC_Handle , DAC_CH1);
 80032f6:	2100      	movs	r1, #0
 80032f8:	e637      	b.n	8002f6a <RI_GetRegCommandParser+0x46a>
            *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <RI_GetRegCommandParser+0x8d8>)
 80032fc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003300:	3034      	adds	r0, #52	; 0x34
 8003302:	f004 fd57 	bl	8007db4 <PID_GetKP>
 8003306:	2402      	movs	r4, #2
 8003308:	8038      	strh	r0, [r7, #0]
        *size = 2;
 800330a:	4623      	mov	r3, r4
 800330c:	e474      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 800330e:	4658      	mov	r0, fp
 8003310:	f7fe f8e8 	bl	80014e4 <MCI_GetIalphabeta>
         break;
 8003314:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8003316:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800331a:	9011      	str	r0, [sp, #68]	; 0x44
 800331c:	803b      	strh	r3, [r7, #0]
        *size = 2;
 800331e:	4623      	mov	r3, r4
         break;
 8003320:	e46a      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = MCI_GetIab(pMCI).a;
 8003322:	4658      	mov	r0, fp
 8003324:	f7fe f8d0 	bl	80014c8 <MCI_GetIab>
         break;
 8003328:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIab(pMCI).a;
 800332a:	9014      	str	r0, [sp, #80]	; 0x50
        *size = 2;
 800332c:	4623      	mov	r3, r4
          *regdata16 = MCI_GetIab(pMCI).a;
 800332e:	8038      	strh	r0, [r7, #0]
         break;
 8003330:	e462      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8003332:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <RI_GetRegCommandParser+0x8e4>)
 8003334:	e7d3      	b.n	80032de <RI_GetRegCommandParser+0x7de>
          *regdata16 = MCI_GetIab(pMCI).b;
 8003336:	4658      	mov	r0, fp
 8003338:	f7fe f8c6 	bl	80014c8 <MCI_GetIab>
         break;
 800333c:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIab(pMCI).b;
 800333e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003342:	9013      	str	r0, [sp, #76]	; 0x4c
 8003344:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003346:	4623      	mov	r3, r4
         break;
 8003348:	e456      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 800334a:	4658      	mov	r0, fp
 800334c:	f7fe f902 	bl	8001554 <MCI_GetValphabeta>
         break;
 8003350:	2402      	movs	r4, #2
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8003352:	900a      	str	r0, [sp, #40]	; 0x28
        *size = 2;
 8003354:	4623      	mov	r3, r4
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8003356:	8038      	strh	r0, [r7, #0]
         break;
 8003358:	e44e      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = MCI_GetIqd(pMCI).q;
 800335a:	4658      	mov	r0, fp
 800335c:	f7fe f8d0 	bl	8001500 <MCI_GetIqd>
         break;
 8003360:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIqd(pMCI).q;
 8003362:	9010      	str	r0, [sp, #64]	; 0x40
        *size = 2;
 8003364:	4623      	mov	r3, r4
          *regdata16 = MCI_GetIqd(pMCI).q;
 8003366:	8038      	strh	r0, [r7, #0]
         break;
 8003368:	e446      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 800336a:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <RI_GetRegCommandParser+0x8dc>)
 800336c:	e73e      	b.n	80031ec <RI_GetRegCommandParser+0x6ec>
          *regdata16 = MCI_GetIqdref(pMCI).d;
 800336e:	4658      	mov	r0, fp
 8003370:	f7fe f8d4 	bl	800151c <MCI_GetIqdref>
         break;
 8003374:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8003376:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800337a:	900d      	str	r0, [sp, #52]	; 0x34
 800337c:	803b      	strh	r3, [r7, #0]
        *size = 2;
 800337e:	4623      	mov	r3, r4
         break;
 8003380:	e43a      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = MCI_GetIqdref(pMCI).q;
 8003382:	4658      	mov	r0, fp
 8003384:	f7fe f8ca 	bl	800151c <MCI_GetIqdref>
         break;
 8003388:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIqdref(pMCI).q;
 800338a:	900e      	str	r0, [sp, #56]	; 0x38
        *size = 2;
 800338c:	4623      	mov	r3, r4
          *regdata16 = MCI_GetIqdref(pMCI).q;
 800338e:	8038      	strh	r0, [r7, #0]
         break;
 8003390:	e432      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003392:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <RI_GetRegCommandParser+0x8e4>)
 8003394:	e733      	b.n	80031fe <RI_GetRegCommandParser+0x6fe>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID],&hC1,&hC2);
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <RI_GetRegCommandParser+0x8d8>)
 8003398:	aa15      	add	r2, sp, #84	; 0x54
 800339a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800339e:	f10d 010a 	add.w	r1, sp, #10
 80033a2:	f006 fedf 	bl	800a164 <STO_PLL_GetObserverGains>
            *regdata16 = hC2;
 80033a6:	2402      	movs	r4, #2
 80033a8:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 80033ac:	803b      	strh	r3, [r7, #0]
        *size = 2;
 80033ae:	4623      	mov	r3, r4
 80033b0:	e422      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID],&hC1,&hC2);
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <RI_GetRegCommandParser+0x8d8>)
 80033b4:	aa15      	add	r2, sp, #84	; 0x54
 80033b6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80033ba:	f10d 010a 	add.w	r1, sp, #10
 80033be:	f006 fed1 	bl	800a164 <STO_PLL_GetObserverGains>
        break;
 80033c2:	2402      	movs	r4, #2
            *regdata16 = hC1;
 80033c4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80033c8:	803b      	strh	r3, [r7, #0]
        *size = 2;
 80033ca:	4623      	mov	r3, r4
        break;
 80033cc:	e414      	b.n	8002bf8 <RI_GetRegCommandParser+0xf8>
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <RI_GetRegCommandParser+0x8e0>)
 80033d0:	e61a      	b.n	8003008 <RI_GetRegCommandParser+0x508>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 80033d2:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <RI_GetRegCommandParser+0x8e0>)
 80033d4:	e70a      	b.n	80031ec <RI_GetRegCommandParser+0x6ec>
 80033d6:	bf00      	nop
 80033d8:	20000650 	.word	0x20000650
 80033dc:	2000056c 	.word	0x2000056c
 80033e0:	20000568 	.word	0x20000568
 80033e4:	2000064c 	.word	0x2000064c

080033e8 <RI_GetIDSize>:
return retVal;
}

uint8_t RI_GetIDSize (uint16_t dataID)
{
  uint8_t typeID = dataID & TYPE_MASK;
 80033e8:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80033ec:	3808      	subs	r0, #8
 80033ee:	b2c0      	uxtb	r0, r0
 80033f0:	2810      	cmp	r0, #16
 80033f2:	bf9a      	itte	ls
 80033f4:	4b01      	ldrls	r3, [pc, #4]	; (80033fc <RI_GetIDSize+0x14>)
 80033f6:	5c18      	ldrbls	r0, [r3, r0]
 80033f8:	2000      	movhi	r0, #0
    default:
      result=0;
      break;
  }
  return result;
}
 80033fa:	4770      	bx	lr
 80033fc:	0800a53c 	.word	0x0800a53c

08003400 <RI_GetPtrReg>:
  uint16_t regID = dataID & REG_MASK;
  uint8_t retVal = MCP_CMD_OK;

  MCI_Handle_t * pMCI = &Mci[motorID];

  switch (typeID)
 8003400:	f000 0238 	and.w	r2, r0, #56	; 0x38
 8003404:	2a10      	cmp	r2, #16
  uint8_t typeID = dataID & TYPE_MASK;
 8003406:	b2c3      	uxtb	r3, r0
  switch (typeID)
 8003408:	d003      	beq.n	8003412 <RI_GetPtrReg+0x12>
      break;
      case MC_REG_STOPLL_BEMF_BETA:
        *dataPtr = &(stoPLLSensor[motorID]->hBemf_beta_est);
      break;
      default:
        *dataPtr = &nullData16;
 800340a:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <RI_GetPtrReg+0x1bc>)
 800340c:	600b      	str	r3, [r1, #0]
        retVal = MCP_ERROR_UNKNOWN_REG;
 800340e:	2005      	movs	r0, #5
      *dataPtr = &nullData16;
      retVal = MCP_ERROR_UNKNOWN_REG;
      break;
  }
  return retVal;
}
 8003410:	4770      	bx	lr
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8003412:	f003 0207 	and.w	r2, r3, #7
  uint16_t regID = dataID & REG_MASK;
 8003416:	f020 0007 	bic.w	r0, r0, #7
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 800341a:	3a01      	subs	r2, #1
 800341c:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003420:	b2d2      	uxtb	r2, r2
  uint16_t regID = dataID & REG_MASK;
 8003422:	b283      	uxth	r3, r0
 8003424:	f000 8081 	beq.w	800352a <RI_GetPtrReg+0x12a>
 8003428:	d816      	bhi.n	8003458 <RI_GetPtrReg+0x58>
 800342a:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 800342e:	f000 8086 	beq.w	800353e <RI_GetPtrReg+0x13e>
 8003432:	d835      	bhi.n	80034a0 <RI_GetPtrReg+0xa0>
 8003434:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003438:	f000 808b 	beq.w	8003552 <RI_GetPtrReg+0x152>
 800343c:	d91f      	bls.n	800347e <RI_GetPtrReg+0x7e>
 800343e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003442:	d1e2      	bne.n	800340a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8003444:	4b5e      	ldr	r3, [pc, #376]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 8003446:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800344a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 800344e:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8003450:	6893      	ldr	r3, [r2, #8]
 8003452:	3306      	adds	r3, #6
 8003454:	600b      	str	r3, [r1, #0]
       break;
 8003456:	4770      	bx	lr
 8003458:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 800345c:	f000 8083 	beq.w	8003566 <RI_GetPtrReg+0x166>
 8003460:	d938      	bls.n	80034d4 <RI_GetPtrReg+0xd4>
 8003462:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8003466:	f000 8085 	beq.w	8003574 <RI_GetPtrReg+0x174>
 800346a:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 800346e:	d127      	bne.n	80034c0 <RI_GetPtrReg+0xc0>
        *dataPtr = &(stoPLLSensor[motorID]->hBemf_beta_est);
 8003470:	4b54      	ldr	r3, [pc, #336]	; (80035c4 <RI_GetPtrReg+0x1c4>)
 8003472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003476:	3372      	adds	r3, #114	; 0x72
 8003478:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800347a:	2000      	movs	r0, #0
      break;
 800347c:	4770      	bx	lr
 800347e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003482:	f000 8092 	beq.w	80035aa <RI_GetPtrReg+0x1aa>
 8003486:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800348a:	d1be      	bne.n	800340a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 800348c:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 800348e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003492:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003496:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8003498:	6893      	ldr	r3, [r2, #8]
 800349a:	3302      	adds	r3, #2
 800349c:	600b      	str	r3, [r1, #0]
       break;
 800349e:	4770      	bx	lr
 80034a0:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80034a4:	d06d      	beq.n	8003582 <RI_GetPtrReg+0x182>
 80034a6:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 80034aa:	d123      	bne.n	80034f4 <RI_GetPtrReg+0xf4>
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 80034ac:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 80034ae:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80034b2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80034b6:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 80034b8:	6893      	ldr	r3, [r2, #8]
 80034ba:	3312      	adds	r3, #18
 80034bc:	600b      	str	r3, [r1, #0]
       break;
 80034be:	4770      	bx	lr
 80034c0:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 80034c4:	d1a1      	bne.n	800340a <RI_GetPtrReg+0xa>
        *dataPtr = &(stoPLLSensor[motorID]->_Super.hAvrMecSpeedUnit);
 80034c6:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <RI_GetPtrReg+0x1c4>)
 80034c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034cc:	330c      	adds	r3, #12
 80034ce:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80034d0:	2000      	movs	r0, #0
      break;
 80034d2:	4770      	bx	lr
 80034d4:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 80034d8:	d05d      	beq.n	8003596 <RI_GetPtrReg+0x196>
 80034da:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80034de:	d116      	bne.n	800350e <RI_GetPtrReg+0x10e>
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 80034e0:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 80034e2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80034e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80034ea:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 80034ec:	6893      	ldr	r3, [r2, #8]
 80034ee:	331c      	adds	r3, #28
 80034f0:	600b      	str	r3, [r1, #0]
       break;
 80034f2:	4770      	bx	lr
 80034f4:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80034f8:	d187      	bne.n	800340a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 80034fa:	4b31      	ldr	r3, [pc, #196]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 80034fc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003500:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003504:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 8003506:	6893      	ldr	r3, [r2, #8]
 8003508:	330e      	adds	r3, #14
 800350a:	600b      	str	r3, [r1, #0]
       break;
 800350c:	4770      	bx	lr
 800350e:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003512:	f47f af7a 	bne.w	800340a <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 8003518:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800351c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003520:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 8003522:	6893      	ldr	r3, [r2, #8]
 8003524:	3318      	adds	r3, #24
 8003526:	600b      	str	r3, [r1, #0]
       break;
 8003528:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 800352c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003530:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003534:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 8003536:	6893      	ldr	r3, [r2, #8]
 8003538:	3316      	adds	r3, #22
 800353a:	600b      	str	r3, [r1, #0]
       break;
 800353c:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 8003540:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003544:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8003548:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 800354a:	6893      	ldr	r3, [r2, #8]
 800354c:	330c      	adds	r3, #12
 800354e:	600b      	str	r3, [r1, #0]
       break;
 8003550:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 8003554:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003558:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 800355c:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 800355e:	6893      	ldr	r3, [r2, #8]
 8003560:	3304      	adds	r3, #4
 8003562:	600b      	str	r3, [r1, #0]
       break;
 8003564:	4770      	bx	lr
        *dataPtr = &(stoPLLSensor[motorID]->_Super.hElAngle);
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <RI_GetPtrReg+0x1c4>)
 8003568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356c:	3304      	adds	r3, #4
 800356e:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003570:	2000      	movs	r0, #0
      break;
 8003572:	4770      	bx	lr
        *dataPtr = &(stoPLLSensor[motorID]->hBemf_alfa_est);
 8003574:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <RI_GetPtrReg+0x1c4>)
 8003576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357a:	3370      	adds	r3, #112	; 0x70
 800357c:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800357e:	2000      	movs	r0, #0
      break;
 8003580:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 8003584:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8003588:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 800358c:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 800358e:	6893      	ldr	r3, [r2, #8]
 8003590:	3310      	adds	r3, #16
 8003592:	600b      	str	r3, [r1, #0]
       break;
 8003594:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 8003598:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800359c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80035a0:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 80035a2:	6893      	ldr	r3, [r2, #8]
 80035a4:	331a      	adds	r3, #26
 80035a6:	600b      	str	r3, [r1, #0]
       break;
 80035a8:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <RI_GetPtrReg+0x1c0>)
 80035ac:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80035b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80035b4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 80035b6:	6893      	ldr	r3, [r2, #8]
 80035b8:	600b      	str	r3, [r1, #0]
       break;
 80035ba:	4770      	bx	lr
 80035bc:	20000688 	.word	0x20000688
 80035c0:	20000a14 	.word	0x20000a14
 80035c4:	20000650 	.word	0x20000650

080035c8 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035c8:	4a65      	ldr	r2, [pc, #404]	; (8003760 <RCM_RegisterRegConv+0x198>)
 80035ca:	6813      	ldr	r3, [r2, #0]
{
 80035cc:	b470      	push	{r4, r5, r6}
 80035ce:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d07e      	beq.n	80036d2 <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035d4:	7904      	ldrb	r4, [r0, #4]
 80035d6:	7918      	ldrb	r0, [r3, #4]
 80035d8:	4284      	cmp	r4, r0
 80035da:	d01e      	beq.n	800361a <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035dc:	6855      	ldr	r5, [r2, #4]
 80035de:	2d00      	cmp	r5, #0
 80035e0:	f000 808b 	beq.w	80036fa <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035e4:	792b      	ldrb	r3, [r5, #4]
 80035e6:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 80035e8:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035ec:	d079      	beq.n	80036e2 <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035ee:	6893      	ldr	r3, [r2, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a2 	beq.w	800373a <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035f6:	791d      	ldrb	r5, [r3, #4]
 80035f8:	42a5      	cmp	r5, r4
 80035fa:	d078      	beq.n	80036ee <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035fc:	68d3      	ldr	r3, [r2, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80a0 	beq.w	8003744 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003604:	791d      	ldrb	r5, [r3, #4]
 8003606:	42a5      	cmp	r5, r4
 8003608:	f000 8082 	beq.w	8003710 <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 800360c:	2803      	cmp	r0, #3
 800360e:	bf88      	it	hi
 8003610:	20ff      	movhi	r0, #255	; 0xff
 8003612:	f240 80a0 	bls.w	8003756 <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8003616:	bc70      	pop	{r4, r5, r6}
 8003618:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	680b      	ldr	r3, [r1, #0]
 800361e:	4283      	cmp	r3, r0
 8003620:	d1dc      	bne.n	80035dc <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 8003622:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003624:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003626:	4d4f      	ldr	r5, [pc, #316]	; (8003764 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 8003628:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800362c:	2200      	movs	r2, #0
 800362e:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003632:	07e5      	lsls	r5, r4, #31
 8003634:	d422      	bmi.n	800367c <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003636:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003638:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800363a:	f022 0204 	bic.w	r2, r2, #4
 800363e:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003640:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003642:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003644:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003646:	f022 0220 	bic.w	r2, r2, #32
 800364a:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800364c:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003654:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003658:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800365c:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	2a00      	cmp	r2, #0
 8003662:	dbfc      	blt.n	800365e <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003664:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 8003666:	07d4      	lsls	r4, r2, #31
 8003668:	d408      	bmi.n	800367c <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 800366a:	4c3f      	ldr	r4, [pc, #252]	; (8003768 <RCM_RegisterRegConv+0x1a0>)
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	4022      	ands	r2, r4
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	07d2      	lsls	r2, r2, #31
 800367a:	d5f7      	bpl.n	800366c <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 800367c:	4d3b      	ldr	r5, [pc, #236]	; (800376c <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800367e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8003680:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003684:	0056      	lsls	r6, r2, #1
 8003686:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800368a:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 800368e:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 8003690:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 8003692:	2200      	movs	r2, #0
 8003694:	55aa      	strb	r2, [r5, r6]
 8003696:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003698:	790c      	ldrb	r4, [r1, #4]
 800369a:	2c09      	cmp	r4, #9
 800369c:	d83f      	bhi.n	800371e <RCM_RegisterRegConv+0x156>
 800369e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80036a2:	06a2      	lsls	r2, r4, #26
 80036a4:	2501      	movs	r5, #1
 80036a6:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 80036aa:	fa05 f404 	lsl.w	r4, r5, r4
 80036ae:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036b0:	0dd4      	lsrs	r4, r2, #23
 80036b2:	f004 0404 	and.w	r4, r4, #4
 80036b6:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80036b8:	688d      	ldr	r5, [r1, #8]
 80036ba:	58e1      	ldr	r1, [r4, r3]
 80036bc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80036c0:	2607      	movs	r6, #7
 80036c2:	4096      	lsls	r6, r2
 80036c4:	4095      	lsls	r5, r2
 80036c6:	ea21 0206 	bic.w	r2, r1, r6
 80036ca:	432a      	orrs	r2, r5
 80036cc:	50e2      	str	r2, [r4, r3]
}
 80036ce:	bc70      	pop	{r4, r5, r6}
 80036d0:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80036d2:	6855      	ldr	r5, [r2, #4]
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	d039      	beq.n	800374c <RCM_RegisterRegConv+0x184>
 80036d8:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 80036da:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80036dc:	792b      	ldrb	r3, [r5, #4]
 80036de:	42a3      	cmp	r3, r4
 80036e0:	d185      	bne.n	80035ee <RCM_RegisterRegConv+0x26>
 80036e2:	682d      	ldr	r5, [r5, #0]
 80036e4:	680b      	ldr	r3, [r1, #0]
 80036e6:	429d      	cmp	r5, r3
 80036e8:	d181      	bne.n	80035ee <RCM_RegisterRegConv+0x26>
 80036ea:	2001      	movs	r0, #1
 80036ec:	e79a      	b.n	8003624 <RCM_RegisterRegConv+0x5c>
 80036ee:	681d      	ldr	r5, [r3, #0]
 80036f0:	680b      	ldr	r3, [r1, #0]
 80036f2:	429d      	cmp	r5, r3
 80036f4:	d182      	bne.n	80035fc <RCM_RegisterRegConv+0x34>
      i++;
 80036f6:	2002      	movs	r0, #2
 80036f8:	e794      	b.n	8003624 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80036fa:	6893      	ldr	r3, [r2, #8]
 80036fc:	2001      	movs	r0, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f47f af79 	bne.w	80035f6 <RCM_RegisterRegConv+0x2e>
 8003704:	68d3      	ldr	r3, [r2, #12]
 8003706:	b333      	cbz	r3, 8003756 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003708:	791d      	ldrb	r5, [r3, #4]
 800370a:	790c      	ldrb	r4, [r1, #4]
 800370c:	42a5      	cmp	r5, r4
 800370e:	d122      	bne.n	8003756 <RCM_RegisterRegConv+0x18e>
 8003710:	681c      	ldr	r4, [r3, #0]
 8003712:	680b      	ldr	r3, [r1, #0]
 8003714:	429c      	cmp	r4, r3
 8003716:	f47f af79 	bne.w	800360c <RCM_RegisterRegConv+0x44>
      i++;
 800371a:	2003      	movs	r0, #3
 800371c:	e782      	b.n	8003624 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800371e:	2503      	movs	r5, #3
 8003720:	f06f 061d 	mvn.w	r6, #29
 8003724:	2201      	movs	r2, #1
 8003726:	fb15 6504 	smlabb	r5, r5, r4, r6
 800372a:	40a2      	lsls	r2, r4
 800372c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8003730:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8003734:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003738:	e7ba      	b.n	80036b0 <RCM_RegisterRegConv+0xe8>
      i++;
 800373a:	2805      	cmp	r0, #5
 800373c:	bf34      	ite	cc
 800373e:	2000      	movcc	r0, #0
 8003740:	2002      	movcs	r0, #2
 8003742:	e7df      	b.n	8003704 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003744:	2804      	cmp	r0, #4
 8003746:	680b      	ldr	r3, [r1, #0]
 8003748:	d8e7      	bhi.n	800371a <RCM_RegisterRegConv+0x152>
 800374a:	e76b      	b.n	8003624 <RCM_RegisterRegConv+0x5c>
 800374c:	6893      	ldr	r3, [r2, #8]
 800374e:	b123      	cbz	r3, 800375a <RCM_RegisterRegConv+0x192>
 8003750:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8003752:	4628      	mov	r0, r5
 8003754:	e74f      	b.n	80035f6 <RCM_RegisterRegConv+0x2e>
 8003756:	680b      	ldr	r3, [r1, #0]
 8003758:	e764      	b.n	8003624 <RCM_RegisterRegConv+0x5c>
 800375a:	4618      	mov	r0, r3
 800375c:	e7d2      	b.n	8003704 <RCM_RegisterRegConv+0x13c>
 800375e:	bf00      	nop
 8003760:	20001d54 	.word	0x20001d54
 8003764:	20001d30 	.word	0x20001d30
 8003768:	7fffffc0 	.word	0x7fffffc0
 800376c:	20001d18 	.word	0x20001d18

08003770 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 8003770:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <RCM_ExecRegularConv+0x174>)
 8003772:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8003776:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 8003778:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800377c:	0044      	lsls	r4, r0, #1
 800377e:	2a00      	cmp	r2, #0
 8003780:	d136      	bne.n	80037f0 <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8003782:	7819      	ldrb	r1, [r3, #0]
 8003784:	2900      	cmp	r1, #0
 8003786:	d179      	bne.n	800387c <RCM_ExecRegularConv+0x10c>
 8003788:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 800378a:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 800378c:	2900      	cmp	r1, #0
 800378e:	d07b      	beq.n	8003888 <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 8003790:	7ade      	ldrb	r6, [r3, #11]
 8003792:	42b0      	cmp	r0, r6
 8003794:	f0c0 8098 	bcc.w	80038c8 <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 8003798:	7b1a      	ldrb	r2, [r3, #12]
 800379a:	2a00      	cmp	r2, #0
 800379c:	f000 8097 	beq.w	80038ce <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 80037a0:	7c5e      	ldrb	r6, [r3, #17]
 80037a2:	42b0      	cmp	r0, r6
 80037a4:	d305      	bcc.n	80037b2 <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 80037a6:	7c9a      	ldrb	r2, [r3, #18]
 80037a8:	2a00      	cmp	r2, #0
 80037aa:	f040 8094 	bne.w	80038d6 <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 80037ae:	2202      	movs	r2, #2
 80037b0:	e071      	b.n	8003896 <RCM_ExecRegularConv+0x126>
 80037b2:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 80037b4:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 80037b6:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80037ba:	1821      	adds	r1, r4, r0
 80037bc:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80037c0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80037c4:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 80037c6:	4e48      	ldr	r6, [pc, #288]	; (80038e8 <RCM_ExecRegularConv+0x178>)
 80037c8:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 80037ca:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80037ce:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80037d2:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 80037d4:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80037d6:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 80037d8:	1821      	adds	r1, r4, r0
 80037da:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80037dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 80037e0:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80037e4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80037e8:	7852      	ldrb	r2, [r2, #1]
 80037ea:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80037ec:	bf18      	it	ne
 80037ee:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 80037f0:	4a3e      	ldr	r2, [pc, #248]	; (80038ec <RCM_ExecRegularConv+0x17c>)
 80037f2:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 80037f6:	bb8a      	cbnz	r2, 800385c <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80037f8:	4a3d      	ldr	r2, [pc, #244]	; (80038f0 <RCM_ExecRegularConv+0x180>)
 80037fa:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80037fe:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003800:	6811      	ldr	r1, [r2, #0]
 8003802:	2d09      	cmp	r5, #9
 8003804:	d930      	bls.n	8003868 <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003806:	2603      	movs	r6, #3
 8003808:	f06f 071d 	mvn.w	r7, #29
 800380c:	2201      	movs	r2, #1
 800380e:	fb16 7605 	smlabb	r6, r6, r5, r7
 8003812:	40aa      	lsls	r2, r5
 8003814:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 8003818:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800381c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8003820:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8003822:	0d12      	lsrs	r2, r2, #20
 8003824:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8003828:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 800382c:	432a      	orrs	r2, r5
 800382e:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003830:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003832:	688a      	ldr	r2, [r1, #8]
 8003834:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003838:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800383c:	f042 0204 	orr.w	r2, r2, #4
 8003840:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003842:	680a      	ldr	r2, [r1, #0]
 8003844:	0752      	lsls	r2, r2, #29
 8003846:	d5fc      	bpl.n	8003842 <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003848:	1822      	adds	r2, r4, r0
 800384a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 800384e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003850:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003852:	4d25      	ldr	r5, [pc, #148]	; (80038e8 <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 8003854:	2102      	movs	r1, #2
 8003856:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8003858:	7952      	ldrb	r2, [r2, #5]
 800385a:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 800385c:	4420      	add	r0, r4
 800385e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8003862:	bcf0      	pop	{r4, r5, r6, r7}
 8003864:	8858      	ldrh	r0, [r3, #2]
 8003866:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003868:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 800386c:	06aa      	lsls	r2, r5, #26
 800386e:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003870:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003874:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003878:	432a      	orrs	r2, r5
 800387a:	e7d1      	b.n	8003820 <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 800387c:	795e      	ldrb	r6, [r3, #5]
 800387e:	4286      	cmp	r6, r0
 8003880:	d898      	bhi.n	80037b4 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 8003882:	7999      	ldrb	r1, [r3, #6]
 8003884:	2900      	cmp	r1, #0
 8003886:	d183      	bne.n	8003790 <RCM_ExecRegularConv+0x20>
 8003888:	7b19      	ldrb	r1, [r3, #12]
 800388a:	2900      	cmp	r1, #0
 800388c:	d188      	bne.n	80037a0 <RCM_ExecRegularConv+0x30>
 800388e:	7c99      	ldrb	r1, [r3, #18]
 8003890:	bb09      	cbnz	r1, 80038d6 <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 8003892:	2a04      	cmp	r2, #4
 8003894:	d014      	beq.n	80038c0 <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8003896:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800389a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 800389e:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 80038a0:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 80038a4:	4e10      	ldr	r6, [pc, #64]	; (80038e8 <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 80038a6:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80038aa:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 80038ae:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 80038b2:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 80038b4:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 80038b8:	7832      	ldrb	r2, [r6, #0]
 80038ba:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 80038bc:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 80038be:	e78b      	b.n	80037d8 <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 80038c0:	4e09      	ldr	r6, [pc, #36]	; (80038e8 <RCM_ExecRegularConv+0x178>)
 80038c2:	4602      	mov	r2, r0
 80038c4:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 80038c6:	e787      	b.n	80037d8 <RCM_ExecRegularConv+0x68>
      i++;
 80038c8:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 80038ca:	4611      	mov	r1, r2
 80038cc:	e773      	b.n	80037b6 <RCM_ExecRegularConv+0x46>
 80038ce:	7c9a      	ldrb	r2, [r3, #18]
 80038d0:	b90a      	cbnz	r2, 80038d6 <RCM_ExecRegularConv+0x166>
      i++;
 80038d2:	2201      	movs	r2, #1
 80038d4:	e7df      	b.n	8003896 <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 80038d6:	7dde      	ldrb	r6, [r3, #23]
 80038d8:	4286      	cmp	r6, r0
      i++;
 80038da:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 80038de:	d9da      	bls.n	8003896 <RCM_ExecRegularConv+0x126>
 80038e0:	e768      	b.n	80037b4 <RCM_ExecRegularConv+0x44>
 80038e2:	bf00      	nop
 80038e4:	20001d18 	.word	0x20001d18
 80038e8:	20001d14 	.word	0x20001d14
 80038ec:	20000274 	.word	0x20000274
 80038f0:	20001d54 	.word	0x20001d54

080038f4 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80038f4:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80038f6:	4c12      	ldr	r4, [pc, #72]	; (8003940 <RCM_ExecUserConv+0x4c>)
 80038f8:	7823      	ldrb	r3, [r4, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d000      	beq.n	8003900 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003900:	4d10      	ldr	r5, [pc, #64]	; (8003944 <RCM_ExecUserConv+0x50>)
 8003902:	7828      	ldrb	r0, [r5, #0]
 8003904:	f7ff ff34 	bl	8003770 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003908:	782b      	ldrb	r3, [r5, #0]
 800390a:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800390c:	490f      	ldr	r1, [pc, #60]	; (800394c <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800390e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8003912:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003916:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003918:	7852      	ldrb	r2, [r2, #1]
 800391a:	b10a      	cbz	r2, 8003920 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 800391c:	2202      	movs	r2, #2
 800391e:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <RCM_ExecUserConv+0x5c>)
 8003922:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8003926:	2d00      	cmp	r5, #0
 8003928:	d0e9      	beq.n	80038fe <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800392a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800392e:	2100      	movs	r1, #0
 8003930:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003932:	6852      	ldr	r2, [r2, #4]
 8003934:	4601      	mov	r1, r0
 8003936:	4618      	mov	r0, r3
 8003938:	462b      	mov	r3, r5
}
 800393a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800393e:	4718      	bx	r3
 8003940:	20001d50 	.word	0x20001d50
 8003944:	20001d15 	.word	0x20001d15
 8003948:	20001d18 	.word	0x20001d18
 800394c:	20001d64 	.word	0x20001d64
 8003950:	20001d30 	.word	0x20001d30

08003954 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <RCM_ExecNextConv+0x88>)
 8003956:	4822      	ldr	r0, [pc, #136]	; (80039e0 <RCM_ExecNextConv+0x8c>)
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800395e:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8003962:	b383      	cbz	r3, 80039c6 <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8003964:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <RCM_ExecNextConv+0x90>)
{
 8003966:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8003968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800396c:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800396e:	2504      	movs	r5, #4
 8003970:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8003972:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003974:	2d09      	cmp	r5, #9
 8003976:	ea4f 0442 	mov.w	r4, r2, lsl #1
 800397a:	d925      	bls.n	80039c8 <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 800397c:	2603      	movs	r6, #3
 800397e:	f06f 071d 	mvn.w	r7, #29
 8003982:	2301      	movs	r3, #1
 8003984:	fb16 7605 	smlabb	r6, r6, r5, r7
 8003988:	40ab      	lsls	r3, r5
 800398a:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 800398e:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8003992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8003996:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8003998:	0d1b      	lsrs	r3, r3, #20
 800399a:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 800399e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80039a2:	432b      	orrs	r3, r5
 80039a4:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80039a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80039a8:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 80039aa:	4422      	add	r2, r4
 80039ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039b0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80039b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	2201      	movs	r2, #1
 80039be:	608b      	str	r3, [r1, #8]
 80039c0:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 80039c2:	bcf0      	pop	{r4, r5, r6, r7}
 80039c4:	4770      	bx	lr
 80039c6:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80039c8:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80039cc:	06ab      	lsls	r3, r5, #26
 80039ce:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80039d0:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80039d4:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80039d8:	432b      	orrs	r3, r5
 80039da:	e7dc      	b.n	8003996 <RCM_ExecNextConv+0x42>
 80039dc:	20001d14 	.word	0x20001d14
 80039e0:	20001d18 	.word	0x20001d18
 80039e4:	20001d54 	.word	0x20001d54

080039e8 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 80039e8:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 80039ea:	4c0f      	ldr	r4, [pc, #60]	; (8003a28 <RCM_ReadOngoingConv+0x40>)
 80039ec:	4a0f      	ldr	r2, [pc, #60]	; (8003a2c <RCM_ReadOngoingConv+0x44>)
 80039ee:	7823      	ldrb	r3, [r4, #0]
 80039f0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80039f4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80039f8:	0058      	lsls	r0, r3, #1
 80039fa:	784d      	ldrb	r5, [r1, #1]
 80039fc:	2d01      	cmp	r5, #1
 80039fe:	d006      	beq.n	8003a0e <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003a00:	4403      	add	r3, r0
 8003a02:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003a06:	7953      	ldrb	r3, [r2, #5]
 8003a08:	7023      	strb	r3, [r4, #0]
}
 8003a0a:	bc70      	pop	{r4, r5, r6}
 8003a0c:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8003a0e:	4d08      	ldr	r5, [pc, #32]	; (8003a30 <RCM_ReadOngoingConv+0x48>)
 8003a10:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8003a14:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003a16:	682e      	ldr	r6, [r5, #0]
 8003a18:	0776      	lsls	r6, r6, #29
 8003a1a:	d5f1      	bpl.n	8003a00 <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003a1c:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8003a1e:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8003a20:	2502      	movs	r5, #2
 8003a22:	704d      	strb	r5, [r1, #1]
 8003a24:	e7ec      	b.n	8003a00 <RCM_ReadOngoingConv+0x18>
 8003a26:	bf00      	nop
 8003a28:	20001d14 	.word	0x20001d14
 8003a2c:	20001d18 	.word	0x20001d18
 8003a30:	20001d54 	.word	0x20001d54

08003a34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <HAL_MspInit+0x3c>)
{
 8003a36:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60
 8003a40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003a42:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a44:	f002 0201 	and.w	r2, r2, #1
 8003a48:	9200      	str	r2, [sp, #0]
 8003a4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a52:	659a      	str	r2, [r3, #88]	; 0x58
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003a5c:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003a60:	f001 faa0 	bl	8004fa4 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a64:	b003      	add	sp, #12
 8003a66:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8003a6a:	f002 ba57 	b.w	8005f1c <HAL_PWREx_DisableUCPDDeadBattery>
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000

08003a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a74:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003a76:	6802      	ldr	r2, [r0, #0]
{
 8003a78:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7a:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003a7c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003a84:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8003a88:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8003a8a:	d021      	beq.n	8003ad0 <HAL_ADC_MspInit+0x5c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003a8c:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <HAL_ADC_MspInit+0xe8>)
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d001      	beq.n	8003a96 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a92:	b00d      	add	sp, #52	; 0x34
 8003a94:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a96:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <HAL_ADC_MspInit+0xec>)
 8003a98:	6813      	ldr	r3, [r2, #0]
 8003a9a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003a9c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003a9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003aa0:	d050      	beq.n	8003b44 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa2:	4b30      	ldr	r3, [pc, #192]	; (8003b64 <HAL_ADC_MspInit+0xf0>)
 8003aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	64da      	str	r2, [r3, #76]	; 0x4c
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8003ab4:	2240      	movs	r2, #64	; 0x40
 8003ab6:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003ab8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8003ac0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac4:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003ac8:	f001 fc76 	bl	80053b8 <HAL_GPIO_Init>
}
 8003acc:	b00d      	add	sp, #52	; 0x34
 8003ace:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003ad0:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <HAL_ADC_MspInit+0xec>)
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003ad6:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003ad8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003ada:	d028      	beq.n	8003b2e <HAL_ADC_MspInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003adc:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_ADC_MspInit+0xf0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ade:	4822      	ldr	r0, [pc, #136]	; (8003b68 <HAL_ADC_MspInit+0xf4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ae2:	f042 0204 	orr.w	r2, r2, #4
 8003ae6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ae8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003aea:	f002 0204 	and.w	r2, r2, #4
 8003aee:	9202      	str	r2, [sp, #8]
 8003af0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|Test_Pin9_Pin;
 8003b02:	220a      	movs	r2, #10
 8003b04:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b08:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|Test_Pin9_Pin;
 8003b0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0e:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b12:	f001 fc51 	bl	80053b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP1_OUT_Pin;
 8003b16:	2204      	movs	r2, #4
 8003b18:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP1_OUT_GPIO_Port, &GPIO_InitStruct);
 8003b1a:	a906      	add	r1, sp, #24
 8003b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP1_OUT_Pin;
 8003b20:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP1_OUT_GPIO_Port, &GPIO_InitStruct);
 8003b26:	f001 fc47 	bl	80053b8 <HAL_GPIO_Init>
}
 8003b2a:	b00d      	add	sp, #52	; 0x34
 8003b2c:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <HAL_ADC_MspInit+0xf0>)
 8003b30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b36:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	9b01      	ldr	r3, [sp, #4]
 8003b42:	e7cb      	b.n	8003adc <HAL_ADC_MspInit+0x68>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b44:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <HAL_ADC_MspInit+0xf0>)
 8003b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b54:	9304      	str	r3, [sp, #16]
 8003b56:	9b04      	ldr	r3, [sp, #16]
 8003b58:	e7a3      	b.n	8003aa2 <HAL_ADC_MspInit+0x2e>
 8003b5a:	bf00      	nop
 8003b5c:	50000100 	.word	0x50000100
 8003b60:	2000068c 	.word	0x2000068c
 8003b64:	40021000 	.word	0x40021000
 8003b68:	48000800 	.word	0x48000800

08003b6c <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_CORDIC_MspInit+0x2c>)
 8003b6e:	6802      	ldr	r2, [r0, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d000      	beq.n	8003b76 <HAL_CORDIC_MspInit+0xa>
 8003b74:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003b76:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8003b7a:	f042 0208 	orr.w	r2, r2, #8
 8003b7e:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8003b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8003b86:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8003b92:	b002      	add	sp, #8
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40020c00 	.word	0x40020c00

08003b9c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003b9c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003b9e:	6801      	ldr	r1, [r0, #0]
 8003ba0:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <HAL_DAC_MspInit+0x60>)
{
 8003ba2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba4:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 8003ba6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003bac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003bb0:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 8003bb2:	d001      	beq.n	8003bb8 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003bb4:	b008      	add	sp, #32
 8003bb6:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003bb8:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003bbc:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003bc4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003bc6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003bca:	64d1      	str	r1, [r2, #76]	; 0x4c
 8003bcc:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003bce:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
 8003bd2:	9100      	str	r1, [sp, #0]
 8003bd4:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003bd8:	f041 0101 	orr.w	r1, r1, #1
 8003bdc:	64d1      	str	r1, [r2, #76]	; 0x4c
 8003bde:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	f002 0201 	and.w	r2, r2, #1
 8003be6:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin|DBG_DAC_CH2_Pin;
 8003be8:	2303      	movs	r3, #3
 8003bea:	2230      	movs	r2, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin|DBG_DAC_CH2_Pin;
 8003bee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf2:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf4:	f001 fbe0 	bl	80053b8 <HAL_GPIO_Init>
}
 8003bf8:	b008      	add	sp, #32
 8003bfa:	bd10      	pop	{r4, pc}
 8003bfc:	50000800 	.word	0x50000800

08003c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c00:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C3)
 8003c02:	6801      	ldr	r1, [r0, #0]
 8003c04:	4a17      	ldr	r2, [pc, #92]	; (8003c64 <HAL_I2C_MspInit+0x64>)
{
 8003c06:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C3)
 8003c0a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c10:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003c14:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C3)
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003c18:	b008      	add	sp, #32
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c1c:	4c12      	ldr	r4, [pc, #72]	; (8003c68 <HAL_I2C_MspInit+0x68>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c1e:	4813      	ldr	r0, [pc, #76]	; (8003c6c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c20:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003c22:	f043 0304 	orr.w	r3, r3, #4
 8003c26:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003c28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GD_SCL_Pin|GD_SDA_Pin;
 8003c30:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003c34:	2312      	movs	r3, #18
 8003c36:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c3a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GD_SCL_Pin|GD_SDA_Pin;
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003c40:	2508      	movs	r5, #8
    GPIO_InitStruct.Pin = GD_SCL_Pin|GD_SDA_Pin;
 8003c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c46:	9e00      	ldr	r6, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8003c48:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c4a:	f001 fbb5 	bl	80053b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c54:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	9b01      	ldr	r3, [sp, #4]
}
 8003c60:	b008      	add	sp, #32
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
 8003c64:	40007800 	.word	0x40007800
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	48000800 	.word	0x48000800

08003c70 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003c70:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8003c72:	6803      	ldr	r3, [r0, #0]
 8003c74:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <HAL_OPAMP_MspInit+0xc4>)
{
 8003c76:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c78:	2400      	movs	r4, #0
  if(hopamp->Instance==OPAMP1)
 8003c7a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c7c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003c80:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003c84:	9408      	str	r4, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8003c86:	d004      	beq.n	8003c92 <HAL_OPAMP_MspInit+0x22>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8003c88:	4a2b      	ldr	r2, [pc, #172]	; (8003d38 <HAL_OPAMP_MspInit+0xc8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d017      	beq.n	8003cbe <HAL_OPAMP_MspInit+0x4e>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 8003c8e:	b00b      	add	sp, #44	; 0x2c
 8003c90:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c92:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_OPAMP_MspInit+0xcc>)
 8003c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c96:	f042 0201 	orr.w	r2, r2, #1
 8003c9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_EXT_GAIN_Pin;
 8003ca6:	220e      	movs	r2, #14
 8003ca8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003caa:	a904      	add	r1, sp, #16
 8003cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_EXT_GAIN_Pin;
 8003cb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb4:	9c00      	ldr	r4, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb6:	f001 fb7f 	bl	80053b8 <HAL_GPIO_Init>
}
 8003cba:	b00b      	add	sp, #44	; 0x2c
 8003cbc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cbe:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <HAL_OPAMP_MspInit+0xcc>)
 8003cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cca:	f002 0201 	and.w	r2, r2, #1
 8003cce:	9201      	str	r2, [sp, #4]
 8003cd0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cd4:	f042 0204 	orr.w	r2, r2, #4
 8003cd8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cdc:	f002 0204 	and.w	r2, r2, #4
 8003ce0:	9202      	str	r2, [sp, #8]
 8003ce2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ce6:	f042 0202 	orr.w	r2, r2, #2
 8003cea:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003cf6:	22c0      	movs	r2, #192	; 0xc0
 8003cf8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cfa:	a904      	add	r1, sp, #16
 8003cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003d00:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d04:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d06:	f001 fb57 	bl	80053b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP2_EXT_GAIN_Pin;
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_EXT_GAIN_GPIO_Port, &GPIO_InitStruct);
 8003d0e:	a904      	add	r1, sp, #16
 8003d10:	480b      	ldr	r0, [pc, #44]	; (8003d40 <HAL_OPAMP_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_OPAMP2_EXT_GAIN_Pin;
 8003d14:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(M1_OPAMP2_EXT_GAIN_GPIO_Port, &GPIO_InitStruct);
 8003d18:	f001 fb4e 	bl	80053b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003d20:	4808      	ldr	r0, [pc, #32]	; (8003d44 <HAL_OPAMP_MspInit+0xd4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003d24:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8003d26:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003d2a:	f001 fb45 	bl	80053b8 <HAL_GPIO_Init>
}
 8003d2e:	b00b      	add	sp, #44	; 0x2c
 8003d30:	bd30      	pop	{r4, r5, pc}
 8003d32:	bf00      	nop
 8003d34:	40010300 	.word	0x40010300
 8003d38:	40010304 	.word	0x40010304
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	48000800 	.word	0x48000800
 8003d44:	48000400 	.word	0x48000400

08003d48 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_TIM_Base_MspInit+0x28>)
 8003d4a:	6802      	ldr	r2, [r0, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d000      	beq.n	8003d52 <HAL_TIM_Base_MspInit+0xa>
 8003d50:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d52:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 8003d56:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d5e:	661a      	str	r2, [r3, #96]	; 0x60
 8003d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003d6a:	b002      	add	sp, #8
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40012c00 	.word	0x40012c00

08003d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d74:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003d76:	6801      	ldr	r1, [r0, #0]
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <HAL_TIM_MspPostInit+0x58>)
{
 8003d7a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003d7e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003d84:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003d88:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d8c:	b009      	add	sp, #36	; 0x24
 8003d8e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d94:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d98:	480d      	ldr	r0, [pc, #52]	; (8003dd0 <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d9c:	f042 0210 	orr.w	r2, r2, #16
 8003da0:	64da      	str	r2, [r3, #76]	; 0x4c
 8003da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003daa:	2302      	movs	r3, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dac:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003dae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VL_Pin|M1_PWM_VH_Pin
 8003db0:	2202      	movs	r2, #2
 8003db2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003db4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VL_Pin|M1_PWM_VH_Pin
 8003db6:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
 8003dba:	2502      	movs	r5, #2
 8003dbc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003dc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dc4:	f001 faf8 	bl	80053b8 <HAL_GPIO_Init>
}
 8003dc8:	b009      	add	sp, #36	; 0x24
 8003dca:	bd30      	pop	{r4, r5, pc}
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	48001000 	.word	0x48001000

08003dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dd4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8003dd6:	6802      	ldr	r2, [r0, #0]
 8003dd8:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <HAL_UART_MspInit+0xc8>)
{
 8003dda:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ddc:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8003dde:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003de4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003de8:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 8003dea:	d001      	beq.n	8003df0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003dec:	b008      	add	sp, #32
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003df0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003df4:	4e2a      	ldr	r6, [pc, #168]	; (8003ea0 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003df6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60
 8003dfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e04:	9200      	str	r2, [sp, #0]
 8003e06:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003e18:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e22:	2200      	movs	r2, #0
 8003e24:	2300      	movs	r3, #0
 8003e26:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e2c:	2307      	movs	r3, #7
 8003e2e:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e30:	9801      	ldr	r0, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e32:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e38:	f001 fabe 	bl	80053b8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003e3c:	4919      	ldr	r1, [pc, #100]	; (8003ea4 <HAL_UART_MspInit+0xd0>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e3e:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003e40:	2218      	movs	r2, #24
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e42:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003e44:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e46:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e4a:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003e4e:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e52:	60f4      	str	r4, [r6, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e54:	6133      	str	r3, [r6, #16]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003e56:	f001 fa17 	bl	8005288 <HAL_DMA_Init>
 8003e5a:	b9c0      	cbnz	r0, 8003e8e <HAL_UART_MspInit+0xba>
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8003e5c:	4c12      	ldr	r4, [pc, #72]	; (8003ea8 <HAL_UART_MspInit+0xd4>)
 8003e5e:	4813      	ldr	r0, [pc, #76]	; (8003eac <HAL_UART_MspInit+0xd8>)
 8003e60:	6020      	str	r0, [r4, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003e62:	2319      	movs	r3, #25
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e64:	2110      	movs	r1, #16
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e66:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003e68:	6063      	str	r3, [r4, #4]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003e6a:	67ee      	str	r6, [r5, #124]	; 0x7c
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e6c:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e6e:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e70:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e74:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e78:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003e7c:	62b5      	str	r5, [r6, #40]	; 0x28
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e7e:	60a1      	str	r1, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e80:	f001 fa02 	bl	8005288 <HAL_DMA_Init>
 8003e84:	b930      	cbnz	r0, 8003e94 <HAL_UART_MspInit+0xc0>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e86:	67ac      	str	r4, [r5, #120]	; 0x78
 8003e88:	62a5      	str	r5, [r4, #40]	; 0x28
}
 8003e8a:	b008      	add	sp, #32
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003e8e:	f7fd fa45 	bl	800131c <Error_Handler>
 8003e92:	e7e3      	b.n	8003e5c <HAL_UART_MspInit+0x88>
      Error_Handler();
 8003e94:	f7fd fa42 	bl	800131c <Error_Handler>
 8003e98:	e7f5      	b.n	8003e86 <HAL_UART_MspInit+0xb2>
 8003e9a:	bf00      	nop
 8003e9c:	40013800 	.word	0x40013800
 8003ea0:	200008b0 	.word	0x200008b0
 8003ea4:	4002001c 	.word	0x4002001c
 8003ea8:	200007e4 	.word	0x200007e4
 8003eac:	40020030 	.word	0x40020030

08003eb0 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eb4:	2240      	movs	r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  TSK_HighFrequencyTask();
 8003eb8:	f7fd beec 	b.w	8001c94 <TSK_HighFrequencyTask>

08003ebc <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003ebe:	4804      	ldr	r0, [pc, #16]	; (8003ed0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003ec0:	f06f 0201 	mvn.w	r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
 8003ec6:	f004 bdc5 	b.w	8008a54 <R3_2_TIMx_UP_IRQHandler>
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	20000274 	.word	0x20000274

08003ed4 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003ed4:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	0611      	lsls	r1, r2, #24
 8003edc:	d505      	bpl.n	8003eea <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003ede:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8003ee2:	480a      	ldr	r0, [pc, #40]	; (8003f0c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003ee4:	611a      	str	r2, [r3, #16]
 8003ee6:	f004 fe19 	bl	8008b1c <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	05d2      	lsls	r2, r2, #23
 8003ef0:	d505      	bpl.n	8003efe <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003ef2:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8003ef6:	4805      	ldr	r0, [pc, #20]	; (8003f0c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003ef8:	611a      	str	r2, [r3, #16]
 8003efa:	f004 fded 	bl	8008ad8 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003f02:	f7fd be7f 	b.w	8001c04 <MC_Scheduler>
 8003f06:	bf00      	nop
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	20000274 	.word	0x20000274

08003f10 <DMA1_Channel2_IRQHandler>:
  WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL);
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <DMA1_Channel2_IRQHandler+0x14>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	0692      	lsls	r2, r2, #26
 8003f16:	d400      	bmi.n	8003f1a <DMA1_Channel2_IRQHandler+0xa>
  }
  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

}
 8003f18:	4770      	bx	lr
  WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8003f1a:	2220      	movs	r2, #32
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <DMA1_Channel2_IRQHandler+0x18>)
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	f7fc be24 	b.w	8000b6c <ASPEP_HWDataReceivedIT>
 8003f24:	40020000 	.word	0x40020000
 8003f28:	200005d8 	.word	0x200005d8

08003f2c <USART1_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <USART1_IRQHandler+0x98>)
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	0650      	lsls	r0, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USARTA_IRQHandler(void)
{
 8003f32:	b510      	push	{r4, lr}
 8003f34:	d509      	bpl.n	8003f4a <USART1_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003f36:	4924      	ldr	r1, [pc, #144]	; (8003fc8 <USART1_IRQHandler+0x9c>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003f38:	4824      	ldr	r0, [pc, #144]	; (8003fcc <USART1_IRQHandler+0xa0>)
 8003f3a:	680a      	ldr	r2, [r1, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003f3c:	2440      	movs	r4, #64	; 0x40
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	600a      	str	r2, [r1, #0]
 8003f44:	621c      	str	r4, [r3, #32]
 8003f46:	f7fc fc6b 	bl	8000820 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003f4a:	4b1e      	ldr	r3, [pc, #120]	; (8003fc4 <USART1_IRQHandler+0x98>)
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	0711      	lsls	r1, r2, #28
 8003f50:	d402      	bmi.n	8003f58 <USART1_IRQHandler+0x2c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	0792      	lsls	r2, r2, #30
 8003f56:	d52c      	bpl.n	8003fb2 <USART1_IRQHandler+0x86>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <USART1_IRQHandler+0x98>)
 8003f5a:	689a      	ldr	r2, [r3, #8]
   // LL_GPIO_ResetOutputPin( GPIOC , LL_GPIO_PIN_6  );
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003f5c:	07d0      	lsls	r0, r2, #31
 8003f5e:	d41d      	bmi.n	8003f9c <USART1_IRQHandler+0x70>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8003f60:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <USART1_IRQHandler+0x98>)
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	06d1      	lsls	r1, r2, #27
 8003f66:	d518      	bpl.n	8003f9a <USART1_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	06d2      	lsls	r2, r2, #27
 8003f6c:	d515      	bpl.n	8003f9a <USART1_IRQHandler+0x6e>
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003f6e:	681a      	ldr	r2, [r3, #0]
    /* To be sure we fetch the potential pendig data*/
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003f70:	4816      	ldr	r0, [pc, #88]	; (8003fcc <USART1_IRQHandler+0xa0>)
 8003f72:	f022 0210 	bic.w	r2, r2, #16
 8003f76:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	609a      	str	r2, [r3, #8]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f86:	609a      	str	r2, [r3, #8]
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  }

  /* USER CODE BEGIN USARTA_IRQn 1 */

  /* USER CODE END USARTA_IRQn 1 */
}
 8003f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f94:	609a      	str	r2, [r3, #8]
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003f96:	f7fc be39 	b.w	8000c0c <ASPEP_HWDMAReset>
}
 8003f9a:	bd10      	pop	{r4, pc}
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8003f9c:	220e      	movs	r2, #14
 8003f9e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	f042 0210 	orr.w	r2, r2, #16
 8003fae:	601a      	str	r2, [r3, #0]
}
 8003fb0:	e7d6      	b.n	8003f60 <USART1_IRQHandler+0x34>
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	075c      	lsls	r4, r3, #29
 8003fb6:	d5d3      	bpl.n	8003f60 <USART1_IRQHandler+0x34>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003fb8:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <USART1_IRQHandler+0x98>)
 8003fba:	689a      	ldr	r2, [r3, #8]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003fbc:	07d0      	lsls	r0, r2, #31
 8003fbe:	d5cf      	bpl.n	8003f60 <USART1_IRQHandler+0x34>
 8003fc0:	e7ec      	b.n	8003f9c <USART1_IRQHandler+0x70>
 8003fc2:	bf00      	nop
 8003fc4:	40013800 	.word	0x40013800
 8003fc8:	40020030 	.word	0x40020030
 8003fcc:	200005d8 	.word	0x200005d8

08003fd0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003fd0:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003fd2:	f7fd ffaf 	bl	8001f34 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003fd6:	e7fe      	b.n	8003fd6 <HardFault_Handler+0x6>

08003fd8 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003fd8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003fda:	4c0a      	ldr	r4, [pc, #40]	; (8004004 <SysTick_Handler+0x2c>)
 8003fdc:	7823      	ldrb	r3, [r4, #0]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d006      	beq.n	8003ff0 <SysTick_Handler+0x18>
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003fe6:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003fec:	f7fd bf96 	b.w	8001f1c <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003ff0:	f000 f8c0 	bl	8004174 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003ff4:	f001 f84c 	bl	8005090 <HAL_SYSTICK_IRQHandler>
 8003ff8:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003ffa:	7023      	strb	r3, [r4, #0]
}
 8003ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004000:	f7fd bf8c 	b.w	8001f1c <MC_RunMotorControlTasks>
 8004004:	20000654 	.word	0x20000654

08004008 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <EXTI15_10_IRQHandler+0x14>)
 800400a:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PB10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 800400c:	0552      	lsls	r2, r2, #21
 800400e:	d400      	bmi.n	8004012 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 8004010:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004016:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8004018:	f7fd bf9c 	b.w	8001f54 <UI_HandleStartStopButton_cb>
 800401c:	40010400 	.word	0x40010400

08004020 <UASPEP_INIT>:
}

void UASPEP_DAMCONFIG_TX (UASPEP_Handle_t *pHandle)
{
/* Enable DMA UART */
 LL_USART_ClearFlag_TC (pHandle->USARTx);
 8004020:	6803      	ldr	r3, [r0, #0]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004022:	f8d0 c00c 	ldr.w	ip, [r0, #12]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004026:	2140      	movs	r1, #64	; 0x40
{
 8004028:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800402a:	6906      	ldr	r6, [r0, #16]
 800402c:	6219      	str	r1, [r3, #32]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4c11      	ldr	r4, [pc, #68]	; (8004078 <UASPEP_INIT+0x58>)
 8004032:	6885      	ldr	r5, [r0, #8]
 8004034:	5da7      	ldrb	r7, [r4, r6]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004036:	f814 400c 	ldrb.w	r4, [r4, ip]
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800403e:	689e      	ldr	r6, [r3, #8]
 8004040:	6842      	ldr	r2, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004042:	19e8      	adds	r0, r5, r7
 8004044:	f046 0580 	orr.w	r5, r6, #128	; 0x80
/* Enable DMA UART to start the TX request */
 LL_USART_EnableDMAReq_TX (pHandle->USARTx);

/* Write the USART_TDR register address in the DMA control register to configure it as
the destination of the transfer. */
  LL_DMA_SetPeriphAddress ( pHandle->txDMA, pHandle->txChannel , ( uint32_t ) &pHandle->USARTx->TDR );
 8004048:	f103 0628 	add.w	r6, r3, #40	; 0x28
 800404c:	609d      	str	r5, [r3, #8]
 800404e:	6086      	str	r6, [r0, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004050:	6219      	str	r1, [r3, #32]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004052:	5910      	ldr	r0, [r2, r4]
 8004054:	f040 0002 	orr.w	r0, r0, #2
 8004058:	5110      	str	r0, [r2, r4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800405a:	6898      	ldr	r0, [r3, #8]
 800405c:	4422      	add	r2, r4
 800405e:	f040 0001 	orr.w	r0, r0, #1
  /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
 LL_USART_EnableIT_ERROR (pHandle->USARTx);

/* Write the USART_RDR register address in the DMA control register to configure it as
the source of the transfer. */
 LL_DMA_SetPeriphAddress ( pHandle->rxDMA, pHandle->rxChannel , ( uint32_t ) &pHandle->USARTx->RDR );
 8004062:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8004066:	6098      	str	r0, [r3, #8]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004068:	6094      	str	r4, [r2, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800406a:	6219      	str	r1, [r3, #32]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	430a      	orrs	r2, r1
}
 8004070:	bcf0      	pop	{r4, r5, r6, r7}
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	0800a550 	.word	0x0800a550

0800407c <UASPEP_SEND_PACKET>:

 LL_USART_EnableDMAReq_RX (pHandle->USARTx);
}

bool UASPEP_SEND_PACKET (void *pHWHandle, void *data, uint16_t length)
{
 800407c:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800407e:	6903      	ldr	r3, [r0, #16]
 8004080:	4c0b      	ldr	r4, [pc, #44]	; (80040b0 <UASPEP_SEND_PACKET+0x34>)
 8004082:	6880      	ldr	r0, [r0, #8]
 8004084:	5ce3      	ldrb	r3, [r4, r3]
 8004086:	58c4      	ldr	r4, [r0, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  bool result;
  if ( LL_DMA_IsEnabledChannel (pHandle->txDMA, pHandle->txChannel) )
 8004088:	07e4      	lsls	r4, r4, #31
 800408a:	eb00 0503 	add.w	r5, r0, r3
 800408e:	d40c      	bmi.n	80040aa <UASPEP_SEND_PACKET+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8004090:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004092:	6869      	ldr	r1, [r5, #4]
 8004094:	0c09      	lsrs	r1, r1, #16
 8004096:	0409      	lsls	r1, r1, #16
 8004098:	430a      	orrs	r2, r1
 800409a:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800409c:	58c2      	ldr	r2, [r0, r3]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	50c2      	str	r2, [r0, r3]
    LL_DMA_SetDataLength( pHandle->txDMA, pHandle->txChannel, length );
    LL_DMA_EnableChannel( pHandle->txDMA, pHandle->txChannel );
   result = true;
  }
  return result;
}
 80040a4:	bc30      	pop	{r4, r5}
   result = true;
 80040a6:	2001      	movs	r0, #1
}
 80040a8:	4770      	bx	lr
    result = false;
 80040aa:	2000      	movs	r0, #0
}
 80040ac:	bc30      	pop	{r4, r5}
 80040ae:	4770      	bx	lr
 80040b0:	0800a550 	.word	0x0800a550

080040b4 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER (void *pHWHandle, void* buffer, uint16_t length)
{
 80040b4:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80040b6:	68c3      	ldr	r3, [r0, #12]
 80040b8:	4d09      	ldr	r5, [pc, #36]	; (80040e0 <UASPEP_RECEIVE_BUFFER+0x2c>)
 80040ba:	6844      	ldr	r4, [r0, #4]
 80040bc:	5ce8      	ldrb	r0, [r5, r3]
 80040be:	5823      	ldr	r3, [r4, r0]
 80040c0:	1825      	adds	r5, r4, r0
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	5023      	str	r3, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80040c8:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80040ca:	686b      	ldr	r3, [r5, #4]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	431a      	orrs	r2, r3
 80040d2:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80040d4:	5823      	ldr	r3, [r4, r0]
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  LL_DMA_DisableChannel( pHandle->rxDMA, pHandle->rxChannel );
  LL_DMA_SetMemoryAddress( pHandle->rxDMA, pHandle->rxChannel, (uint32_t) buffer );
  LL_DMA_SetDataLength(  pHandle->rxDMA, pHandle->rxChannel, length );
  LL_DMA_EnableChannel(  pHandle->rxDMA, pHandle->rxChannel );
}
 80040dc:	bc30      	pop	{r4, r5}
 80040de:	4770      	bx	lr
 80040e0:	0800a550 	.word	0x0800a550

080040e4 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE (void *pHWHandle)
{
   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
   LL_USART_ClearFlag_IDLE (pHandle->USARTx);
 80040e4:	6803      	ldr	r3, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80040e6:	2210      	movs	r2, #16
 80040e8:	621a      	str	r2, [r3, #32]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	f042 0210 	orr.w	r2, r2, #16
 80040f0:	601a      	str	r2, [r3, #0]
   LL_USART_EnableIT_IDLE (pHandle->USARTx);
}
 80040f2:	4770      	bx	lr

080040f4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80040f4:	4a03      	ldr	r2, [pc, #12]	; (8004104 <SystemInit+0x10>)
 80040f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80040fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004108:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <HAL_InitTick+0x40>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	b90b      	cbnz	r3, 8004114 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004110:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004112:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004114:	490d      	ldr	r1, [pc, #52]	; (800414c <HAL_InitTick+0x44>)
 8004116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800411a:	4605      	mov	r5, r0
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	6808      	ldr	r0, [r1, #0]
 8004122:	fbb0 f0f3 	udiv	r0, r0, r3
 8004126:	f000 ff97 	bl	8005058 <HAL_SYSTICK_Config>
 800412a:	4604      	mov	r4, r0
 800412c:	2800      	cmp	r0, #0
 800412e:	d1ef      	bne.n	8004110 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004130:	2d0f      	cmp	r5, #15
 8004132:	d8ed      	bhi.n	8004110 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004134:	4602      	mov	r2, r0
 8004136:	4629      	mov	r1, r5
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	f000 ff46 	bl	8004fcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004140:	4b03      	ldr	r3, [pc, #12]	; (8004150 <HAL_InitTick+0x48>)
 8004142:	4620      	mov	r0, r4
 8004144:	601d      	str	r5, [r3, #0]
}
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	2000065c 	.word	0x2000065c
 800414c:	20000658 	.word	0x20000658
 8004150:	20000660 	.word	0x20000660

08004154 <HAL_Init>:
{
 8004154:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004156:	2003      	movs	r0, #3
 8004158:	f000 ff24 	bl	8004fa4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800415c:	2004      	movs	r0, #4
 800415e:	f7ff ffd3 	bl	8004108 <HAL_InitTick>
 8004162:	b110      	cbz	r0, 800416a <HAL_Init+0x16>
    status = HAL_ERROR;
 8004164:	2401      	movs	r4, #1
}
 8004166:	4620      	mov	r0, r4
 8004168:	bd10      	pop	{r4, pc}
 800416a:	4604      	mov	r4, r0
    HAL_MspInit();
 800416c:	f7ff fc62 	bl	8003a34 <HAL_MspInit>
}
 8004170:	4620      	mov	r0, r4
 8004172:	bd10      	pop	{r4, pc}

08004174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004174:	4a03      	ldr	r2, [pc, #12]	; (8004184 <HAL_IncTick+0x10>)
 8004176:	4904      	ldr	r1, [pc, #16]	; (8004188 <HAL_IncTick+0x14>)
 8004178:	6813      	ldr	r3, [r2, #0]
 800417a:	6809      	ldr	r1, [r1, #0]
 800417c:	440b      	add	r3, r1
 800417e:	6013      	str	r3, [r2, #0]
}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20001d68 	.word	0x20001d68
 8004188:	2000065c 	.word	0x2000065c

0800418c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800418c:	4b01      	ldr	r3, [pc, #4]	; (8004194 <HAL_GetTick+0x8>)
 800418e:	6818      	ldr	r0, [r3, #0]
}
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20001d68 	.word	0x20001d68

08004198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004198:	b538      	push	{r3, r4, r5, lr}
 800419a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800419c:	f7ff fff6 	bl	800418c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041a0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80041a2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80041a4:	d002      	beq.n	80041ac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <HAL_Delay+0x20>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ac:	f7ff ffee 	bl	800418c <HAL_GetTick>
 80041b0:	1b43      	subs	r3, r0, r5
 80041b2:	42a3      	cmp	r3, r4
 80041b4:	d3fa      	bcc.n	80041ac <HAL_Delay+0x14>
  {
  }
}
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	2000065c 	.word	0x2000065c

080041bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f000 80cb 	beq.w	8004360 <HAL_ADC_Init+0x1a4>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041ca:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80041cc:	4604      	mov	r4, r0
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	f000 8094 	beq.w	80042fc <HAL_ADC_Init+0x140>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041d4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041d6:	6893      	ldr	r3, [r2, #8]
 80041d8:	009d      	lsls	r5, r3, #2
 80041da:	d505      	bpl.n	80041e8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041dc:	6893      	ldr	r3, [r2, #8]
 80041de:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80041e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041e6:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041e8:	6893      	ldr	r3, [r2, #8]
 80041ea:	00d8      	lsls	r0, r3, #3
 80041ec:	d419      	bmi.n	8004222 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041ee:	4b71      	ldr	r3, [pc, #452]	; (80043b4 <HAL_ADC_Init+0x1f8>)
 80041f0:	4871      	ldr	r0, [pc, #452]	; (80043b8 <HAL_ADC_Init+0x1fc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80041f4:	6891      	ldr	r1, [r2, #8]
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	fba0 0303 	umull	r0, r3, r0, r3
 80041fc:	099b      	lsrs	r3, r3, #6
 80041fe:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004202:	3301      	adds	r3, #1
 8004204:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800420e:	6091      	str	r1, [r2, #8]
 8004210:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004212:	9b01      	ldr	r3, [sp, #4]
 8004214:	b12b      	cbz	r3, 8004222 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004216:	9b01      	ldr	r3, [sp, #4]
 8004218:	3b01      	subs	r3, #1
 800421a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800421c:	9b01      	ldr	r3, [sp, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f9      	bne.n	8004216 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004222:	6893      	ldr	r3, [r2, #8]
 8004224:	00d9      	lsls	r1, r3, #3
 8004226:	d45b      	bmi.n	80042e0 <HAL_ADC_Init+0x124>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004228:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800422a:	f043 0310 	orr.w	r3, r3, #16
 800422e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004230:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004238:	6893      	ldr	r3, [r2, #8]
 800423a:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 800423e:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004242:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004244:	d153      	bne.n	80042ee <HAL_ADC_Init+0x132>
 8004246:	06db      	lsls	r3, r3, #27
 8004248:	d451      	bmi.n	80042ee <HAL_ADC_Init+0x132>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800424a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800424c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004256:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004258:	07de      	lsls	r6, r3, #31
 800425a:	d40e      	bmi.n	800427a <HAL_ADC_Init+0xbe>
 800425c:	4b57      	ldr	r3, [pc, #348]	; (80043bc <HAL_ADC_Init+0x200>)
 800425e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004262:	6889      	ldr	r1, [r1, #8]
 8004264:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004266:	430b      	orrs	r3, r1
 8004268:	07dd      	lsls	r5, r3, #31
 800426a:	d406      	bmi.n	800427a <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800426c:	4954      	ldr	r1, [pc, #336]	; (80043c0 <HAL_ADC_Init+0x204>)
 800426e:	6865      	ldr	r5, [r4, #4]
 8004270:	688b      	ldr	r3, [r1, #8]
 8004272:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004276:	432b      	orrs	r3, r5
 8004278:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800427a:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 800427e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004280:	432b      	orrs	r3, r5
 8004282:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004284:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004286:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800428a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800428e:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004294:	d05f      	beq.n	8004356 <HAL_ADC_Init+0x19a>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004296:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004298:	b121      	cbz	r1, 80042a4 <HAL_ADC_Init+0xe8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800429a:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800429c:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80042a0:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042a2:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042a4:	68d6      	ldr	r6, [r2, #12]
 80042a6:	4947      	ldr	r1, [pc, #284]	; (80043c4 <HAL_ADC_Init+0x208>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80042a8:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80042aa:	4031      	ands	r1, r6
 80042ac:	430b      	orrs	r3, r1
 80042ae:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80042b0:	6913      	ldr	r3, [r2, #16]
 80042b2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80042b6:	432b      	orrs	r3, r5
 80042b8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ba:	6893      	ldr	r3, [r2, #8]
 80042bc:	0759      	lsls	r1, r3, #29
 80042be:	d523      	bpl.n	8004308 <HAL_ADC_Init+0x14c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042c0:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042c2:	6963      	ldr	r3, [r4, #20]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d04e      	beq.n	8004366 <HAL_ADC_Init+0x1aa>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80042c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80042ca:	f023 030f 	bic.w	r3, r3, #15
 80042ce:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80042dc:	b002      	add	sp, #8
 80042de:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042e0:	6893      	ldr	r3, [r2, #8]
 80042e2:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e6:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80042ec:	d0ab      	beq.n	8004246 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80042f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f2:	f043 0310 	orr.w	r3, r3, #16
 80042f6:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80042f8:	b002      	add	sp, #8
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80042fc:	f7ff fbba 	bl	8003a74 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004300:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004302:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004306:	e765      	b.n	80041d4 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004308:	6893      	ldr	r3, [r2, #8]
 800430a:	071b      	lsls	r3, r3, #28
 800430c:	d4d9      	bmi.n	80042c2 <HAL_ADC_Init+0x106>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800430e:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004310:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004314:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8004316:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004318:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800431c:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800431e:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004322:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004326:	430b      	orrs	r3, r1
 8004328:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800432a:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 800432c:	bb1d      	cbnz	r5, 8004376 <HAL_ADC_Init+0x1ba>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800432e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004332:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004334:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004338:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800433c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004340:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004344:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004348:	2b01      	cmp	r3, #1
 800434a:	d021      	beq.n	8004390 <HAL_ADC_Init+0x1d4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800434c:	6913      	ldr	r3, [r2, #16]
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	6113      	str	r3, [r2, #16]
 8004354:	e7b5      	b.n	80042c2 <HAL_ADC_Init+0x106>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004356:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004358:	3901      	subs	r1, #1
 800435a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800435e:	e79a      	b.n	8004296 <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 8004360:	2001      	movs	r0, #1
}
 8004362:	b002      	add	sp, #8
 8004364:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004366:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004368:	6a23      	ldr	r3, [r4, #32]
 800436a:	f021 010f 	bic.w	r1, r1, #15
 800436e:	3b01      	subs	r3, #1
 8004370:	430b      	orrs	r3, r1
 8004372:	6313      	str	r3, [r2, #48]	; 0x30
 8004374:	e7ac      	b.n	80042d0 <HAL_ADC_Init+0x114>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800437c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8004380:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004388:	432b      	orrs	r3, r5
 800438a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800438e:	e7d9      	b.n	8004344 <HAL_ADC_Init+0x188>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004390:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8004394:	6911      	ldr	r1, [r2, #16]
 8004396:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004398:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800439c:	f021 0104 	bic.w	r1, r1, #4
 80043a0:	4333      	orrs	r3, r6
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80043a6:	432b      	orrs	r3, r5
 80043a8:	430b      	orrs	r3, r1
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6113      	str	r3, [r2, #16]
 80043b0:	e787      	b.n	80042c2 <HAL_ADC_Init+0x106>
 80043b2:	bf00      	nop
 80043b4:	20000658 	.word	0x20000658
 80043b8:	053e2d63 	.word	0x053e2d63
 80043bc:	50000100 	.word	0x50000100
 80043c0:	50000300 	.word	0x50000300
 80043c4:	fff04007 	.word	0xfff04007

080043c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ca:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80043ce:	b083      	sub	sp, #12
 80043d0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80043d2:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80043d4:	f04f 0000 	mov.w	r0, #0
 80043d8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80043da:	f000 8143 	beq.w	8004664 <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043de:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80043e0:	2001      	movs	r0, #1
 80043e2:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043e6:	6894      	ldr	r4, [r2, #8]
 80043e8:	0766      	lsls	r6, r4, #29
 80043ea:	d43d      	bmi.n	8004468 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 80043ec:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80043f0:	09a6      	lsrs	r6, r4, #6
 80043f2:	f102 0530 	add.w	r5, r2, #48	; 0x30
 80043f6:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80043fa:	f004 041f 	and.w	r4, r4, #31
 80043fe:	5977      	ldr	r7, [r6, r5]
 8004400:	f04f 0c1f 	mov.w	ip, #31
 8004404:	fa0c fc04 	lsl.w	ip, ip, r4
 8004408:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800440c:	ea27 070c 	bic.w	r7, r7, ip
 8004410:	40a0      	lsls	r0, r4
 8004412:	4338      	orrs	r0, r7
 8004414:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004416:	6890      	ldr	r0, [r2, #8]
 8004418:	0745      	lsls	r5, r0, #29
 800441a:	f140 809a 	bpl.w	8004552 <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800441e:	6890      	ldr	r0, [r2, #8]
 8004420:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004422:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004424:	07e4      	lsls	r4, r4, #31
 8004426:	d530      	bpl.n	800448a <HAL_ADC_ConfigChannel+0xc2>
 8004428:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800442a:	49c2      	ldr	r1, [pc, #776]	; (8004734 <HAL_ADC_ConfigChannel+0x36c>)
 800442c:	420c      	tst	r4, r1
 800442e:	d02a      	beq.n	8004486 <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004430:	49c1      	ldr	r1, [pc, #772]	; (8004738 <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004432:	4dc2      	ldr	r5, [pc, #776]	; (800473c <HAL_ADC_ConfigChannel+0x374>)
 8004434:	6888      	ldr	r0, [r1, #8]
 8004436:	42ac      	cmp	r4, r5
 8004438:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800443c:	d01d      	beq.n	800447a <HAL_ADC_ConfigChannel+0xb2>
 800443e:	4dc0      	ldr	r5, [pc, #768]	; (8004740 <HAL_ADC_ConfigChannel+0x378>)
 8004440:	42ac      	cmp	r4, r5
 8004442:	d01a      	beq.n	800447a <HAL_ADC_ConfigChannel+0xb2>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004444:	4dbf      	ldr	r5, [pc, #764]	; (8004744 <HAL_ADC_ConfigChannel+0x37c>)
 8004446:	42ac      	cmp	r4, r5
 8004448:	f040 813e 	bne.w	80046c8 <HAL_ADC_ConfigChannel+0x300>
 800444c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004450:	d119      	bne.n	8004486 <HAL_ADC_ConfigChannel+0xbe>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004452:	4cbd      	ldr	r4, [pc, #756]	; (8004748 <HAL_ADC_ConfigChannel+0x380>)
 8004454:	42a2      	cmp	r2, r4
 8004456:	d016      	beq.n	8004486 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004458:	688a      	ldr	r2, [r1, #8]
 800445a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800445e:	4316      	orrs	r6, r2
 8004460:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8004464:	608e      	str	r6, [r1, #8]
}
 8004466:	e003      	b.n	8004470 <HAL_ADC_ConfigChannel+0xa8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800446a:	f042 0220 	orr.w	r2, r2, #32
 800446e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004476:	b003      	add	sp, #12
 8004478:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800447a:	0201      	lsls	r1, r0, #8
 800447c:	d403      	bmi.n	8004486 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800447e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004482:	f000 8102 	beq.w	800468a <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004486:	2000      	movs	r0, #0
 8004488:	e7f2      	b.n	8004470 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800448a:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800448c:	4caf      	ldr	r4, [pc, #700]	; (800474c <HAL_ADC_ConfigChannel+0x384>)
 800448e:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004492:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 800475c <HAL_ADC_ConfigChannel+0x394>
 8004496:	f006 0718 	and.w	r7, r6, #24
 800449a:	40fc      	lsrs	r4, r7
 800449c:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80044a0:	4004      	ands	r4, r0
 80044a2:	ea25 0507 	bic.w	r5, r5, r7
 80044a6:	432c      	orrs	r4, r5
 80044a8:	4566      	cmp	r6, ip
 80044aa:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80044ae:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044b0:	d1bb      	bne.n	800442a <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044b2:	2f00      	cmp	r7, #0
 80044b4:	f000 80d9 	beq.w	800466a <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b8:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044bc:	2c00      	cmp	r4, #0
 80044be:	f000 8181 	beq.w	80047c4 <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80044c2:	fab4 f484 	clz	r4, r4
 80044c6:	3401      	adds	r4, #1
 80044c8:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044cc:	2c09      	cmp	r4, #9
 80044ce:	f240 8179 	bls.w	80047c4 <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	f000 81d7 	beq.w	800488a <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80044dc:	fab5 f585 	clz	r5, r5
 80044e0:	3501      	adds	r5, #1
 80044e2:	06ad      	lsls	r5, r5, #26
 80044e4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e8:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80044ec:	2c00      	cmp	r4, #0
 80044ee:	f000 81d1 	beq.w	8004894 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 80044f2:	fab4 f484 	clz	r4, r4
 80044f6:	3401      	adds	r4, #1
 80044f8:	f004 041f 	and.w	r4, r4, #31
 80044fc:	2601      	movs	r6, #1
 80044fe:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004502:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004508:	2800      	cmp	r0, #0
 800450a:	f000 81c1 	beq.w	8004890 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800450e:	fab0 f480 	clz	r4, r0
 8004512:	3401      	adds	r4, #1
 8004514:	f004 041f 	and.w	r4, r4, #31
 8004518:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800451c:	f1a4 001e 	sub.w	r0, r4, #30
 8004520:	0500      	lsls	r0, r0, #20
 8004522:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004526:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004528:	0dc7      	lsrs	r7, r0, #23
 800452a:	f007 0704 	and.w	r7, r7, #4
 800452e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8004532:	688e      	ldr	r6, [r1, #8]
 8004534:	597c      	ldr	r4, [r7, r5]
 8004536:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800453a:	f04f 0c07 	mov.w	ip, #7
 800453e:	fa0c fc00 	lsl.w	ip, ip, r0
 8004542:	ea24 040c 	bic.w	r4, r4, ip
 8004546:	fa06 f000 	lsl.w	r0, r6, r0
 800454a:	4320      	orrs	r0, r4
 800454c:	5178      	str	r0, [r7, r5]
 800454e:	680c      	ldr	r4, [r1, #0]
}
 8004550:	e76b      	b.n	800442a <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004552:	6890      	ldr	r0, [r2, #8]
 8004554:	f010 0008 	ands.w	r0, r0, #8
 8004558:	f040 8082 	bne.w	8004660 <HAL_ADC_ConfigChannel+0x298>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800455c:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800455e:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004560:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004564:	f000 80c4 	beq.w	80046f0 <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004568:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 800456c:	f00c 0c04 	and.w	ip, ip, #4
 8004570:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8004574:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004578:	f85c 5007 	ldr.w	r5, [ip, r7]
 800457c:	f04f 0e07 	mov.w	lr, #7
 8004580:	fa0e fe06 	lsl.w	lr, lr, r6
 8004584:	40b4      	lsls	r4, r6
 8004586:	ea25 050e 	bic.w	r5, r5, lr
 800458a:	432c      	orrs	r4, r5
 800458c:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004590:	6954      	ldr	r4, [r2, #20]
 8004592:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004596:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004598:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800459c:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800459e:	f1bc 0f04 	cmp.w	ip, #4
 80045a2:	d02e      	beq.n	8004602 <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045a4:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 80045a8:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8004760 <HAL_ADC_ConfigChannel+0x398>
 80045ac:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 80045b0:	680f      	ldr	r7, [r1, #0]
 80045b2:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045b6:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 80045ba:	694d      	ldr	r5, [r1, #20]
 80045bc:	0076      	lsls	r6, r6, #1
 80045be:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80045c2:	40b5      	lsls	r5, r6
 80045c4:	ea47 070e 	orr.w	r7, r7, lr
 80045c8:	433d      	orrs	r5, r7
 80045ca:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80045ce:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045d2:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80045d4:	698e      	ldr	r6, [r1, #24]
 80045d6:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 80045da:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80045de:	4335      	orrs	r5, r6
 80045e0:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80045e4:	690e      	ldr	r6, [r1, #16]
 80045e6:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 80045e8:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 80045ec:	2f01      	cmp	r7, #1
 80045ee:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 80045f2:	bf08      	it	eq
 80045f4:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 80045f8:	4328      	orrs	r0, r5
 80045fa:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80045fe:	6808      	ldr	r0, [r1, #0]
}
 8004600:	e70f      	b.n	8004422 <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004602:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004604:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004606:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004608:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800460c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004610:	2d00      	cmp	r5, #0
 8004612:	f040 80a7 	bne.w	8004764 <HAL_ADC_ConfigChannel+0x39c>
 8004616:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800461a:	42ac      	cmp	r4, r5
 800461c:	f000 8119 	beq.w	8004852 <HAL_ADC_ConfigChannel+0x48a>
 8004620:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004622:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004624:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004628:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800462c:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8004630:	42ae      	cmp	r6, r5
 8004632:	f000 80fc 	beq.w	800482e <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004636:	68a6      	ldr	r6, [r4, #8]
 8004638:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800463a:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800463e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004642:	42ae      	cmp	r6, r5
 8004644:	f000 80e2 	beq.w	800480c <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004648:	68e6      	ldr	r6, [r4, #12]
 800464a:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800464c:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800464e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004652:	42b5      	cmp	r5, r6
 8004654:	f47f aee5 	bne.w	8004422 <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800465e:	6020      	str	r0, [r4, #0]
 8004660:	6808      	ldr	r0, [r1, #0]
}
 8004662:	e6de      	b.n	8004422 <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8004664:	2002      	movs	r0, #2
}
 8004666:	b003      	add	sp, #12
 8004668:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800466a:	0e80      	lsrs	r0, r0, #26
 800466c:	1c44      	adds	r4, r0, #1
 800466e:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004672:	2e09      	cmp	r6, #9
 8004674:	d850      	bhi.n	8004718 <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004676:	06a5      	lsls	r5, r4, #26
 8004678:	2401      	movs	r4, #1
 800467a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800467e:	40b4      	lsls	r4, r6
 8004680:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8004684:	4325      	orrs	r5, r4
 8004686:	0500      	lsls	r0, r0, #20
 8004688:	e74d      	b.n	8004526 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800468a:	482b      	ldr	r0, [pc, #172]	; (8004738 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800468c:	4a30      	ldr	r2, [pc, #192]	; (8004750 <HAL_ADC_ConfigChannel+0x388>)
 800468e:	6881      	ldr	r1, [r0, #8]
 8004690:	4c30      	ldr	r4, [pc, #192]	; (8004754 <HAL_ADC_ConfigChannel+0x38c>)
 8004692:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8004696:	430e      	orrs	r6, r1
 8004698:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 800469c:	6086      	str	r6, [r0, #8]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	0992      	lsrs	r2, r2, #6
 80046a2:	fba4 1202 	umull	r1, r2, r4, r2
 80046a6:	0992      	lsrs	r2, r2, #6
 80046a8:	3201      	adds	r2, #1
 80046aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80046b2:	9a01      	ldr	r2, [sp, #4]
 80046b4:	2a00      	cmp	r2, #0
 80046b6:	f43f aee6 	beq.w	8004486 <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 80046ba:	9a01      	ldr	r2, [sp, #4]
 80046bc:	3a01      	subs	r2, #1
 80046be:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80046c0:	9a01      	ldr	r2, [sp, #4]
 80046c2:	2a00      	cmp	r2, #0
 80046c4:	d1f9      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x2f2>
 80046c6:	e6de      	b.n	8004486 <HAL_ADC_ConfigChannel+0xbe>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80046c8:	4d23      	ldr	r5, [pc, #140]	; (8004758 <HAL_ADC_ConfigChannel+0x390>)
 80046ca:	42ac      	cmp	r4, r5
 80046cc:	f47f aedb 	bne.w	8004486 <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046d0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80046d4:	f47f aed7 	bne.w	8004486 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 80046d8:	4c1b      	ldr	r4, [pc, #108]	; (8004748 <HAL_ADC_ConfigChannel+0x380>)
 80046da:	42a2      	cmp	r2, r4
 80046dc:	f43f aed3 	beq.w	8004486 <HAL_ADC_ConfigChannel+0xbe>
 80046e0:	688a      	ldr	r2, [r1, #8]
 80046e2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80046e6:	4332      	orrs	r2, r6
 80046e8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80046ec:	608a      	str	r2, [r1, #8]
}
 80046ee:	e6bf      	b.n	8004470 <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80046f0:	0df5      	lsrs	r5, r6, #23
 80046f2:	f102 0414 	add.w	r4, r2, #20
 80046f6:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80046fa:	f3c6 5604 	ubfx	r6, r6, #20, #5
 80046fe:	592f      	ldr	r7, [r5, r4]
 8004700:	f04f 0c07 	mov.w	ip, #7
 8004704:	fa0c f606 	lsl.w	r6, ip, r6
 8004708:	ea27 0606 	bic.w	r6, r7, r6
 800470c:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800470e:	6954      	ldr	r4, [r2, #20]
 8004710:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004714:	6154      	str	r4, [r2, #20]
}
 8004716:	e73f      	b.n	8004598 <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004718:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800471c:	06a5      	lsls	r5, r4, #26
 800471e:	381e      	subs	r0, #30
 8004720:	2401      	movs	r4, #1
 8004722:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004726:	fa04 f606 	lsl.w	r6, r4, r6
 800472a:	0500      	lsls	r0, r0, #20
 800472c:	4335      	orrs	r5, r6
 800472e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8004732:	e6f8      	b.n	8004526 <HAL_ADC_ConfigChannel+0x15e>
 8004734:	80080000 	.word	0x80080000
 8004738:	50000300 	.word	0x50000300
 800473c:	c3210000 	.word	0xc3210000
 8004740:	90c00010 	.word	0x90c00010
 8004744:	c7520000 	.word	0xc7520000
 8004748:	50000100 	.word	0x50000100
 800474c:	0007ffff 	.word	0x0007ffff
 8004750:	20000658 	.word	0x20000658
 8004754:	053e2d63 	.word	0x053e2d63
 8004758:	cb840000 	.word	0xcb840000
 800475c:	407f0000 	.word	0x407f0000
 8004760:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004768:	b11d      	cbz	r5, 8004772 <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 800476a:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800476e:	42ac      	cmp	r4, r5
 8004770:	d06f      	beq.n	8004852 <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004772:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8004774:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004776:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800477a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800477e:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004786:	b11d      	cbz	r5, 8004790 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8004788:	fab5 f585 	clz	r5, r5
 800478c:	42ae      	cmp	r6, r5
 800478e:	d04e      	beq.n	800482e <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004790:	68a5      	ldr	r5, [r4, #8]
 8004792:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004794:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004798:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80047a0:	b11d      	cbz	r5, 80047aa <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 80047a2:	fab5 f585 	clz	r5, r5
 80047a6:	42ae      	cmp	r6, r5
 80047a8:	d030      	beq.n	800480c <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047aa:	68e5      	ldr	r5, [r4, #12]
 80047ac:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047ae:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047b0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80047b8:	2d00      	cmp	r5, #0
 80047ba:	f43f ae32 	beq.w	8004422 <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 80047be:	fab5 f585 	clz	r5, r5
 80047c2:	e746      	b.n	8004652 <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	d058      	beq.n	800487e <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 80047cc:	fab5 f585 	clz	r5, r5
 80047d0:	3501      	adds	r5, #1
 80047d2:	06ad      	lsls	r5, r5, #26
 80047d4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80047dc:	2c00      	cmp	r4, #0
 80047de:	d04c      	beq.n	800487a <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 80047e0:	fab4 f484 	clz	r4, r4
 80047e4:	3401      	adds	r4, #1
 80047e6:	f004 041f 	and.w	r4, r4, #31
 80047ea:	2601      	movs	r6, #1
 80047ec:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047f0:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d044      	beq.n	8004884 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 80047fa:	fab0 f480 	clz	r4, r0
 80047fe:	3401      	adds	r4, #1
 8004800:	f004 041f 	and.w	r4, r4, #31
 8004804:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004808:	0520      	lsls	r0, r4, #20
 800480a:	e68c      	b.n	8004526 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 800480c:	6838      	ldr	r0, [r7, #0]
 800480e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004812:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004814:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004816:	68e5      	ldr	r5, [r4, #12]
 8004818:	68e6      	ldr	r6, [r4, #12]
 800481a:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800481e:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004822:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004824:	2d00      	cmp	r5, #0
 8004826:	d1c5      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x3ec>
 8004828:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800482c:	e711      	b.n	8004652 <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 800482e:	6838      	ldr	r0, [r7, #0]
 8004830:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004834:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004836:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004838:	68a5      	ldr	r5, [r4, #8]
 800483a:	68a6      	ldr	r6, [r4, #8]
 800483c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004840:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004844:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004848:	2d00      	cmp	r5, #0
 800484a:	d1a7      	bne.n	800479c <HAL_ADC_ConfigChannel+0x3d4>
 800484c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004850:	e6f7      	b.n	8004642 <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 8004852:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004854:	4614      	mov	r4, r2
 8004856:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800485a:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800485e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004860:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8004862:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8004864:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004868:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800486c:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004870:	2d00      	cmp	r5, #0
 8004872:	d186      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x3ba>
 8004874:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004878:	e6da      	b.n	8004630 <HAL_ADC_ConfigChannel+0x268>
 800487a:	2402      	movs	r4, #2
 800487c:	e7b8      	b.n	80047f0 <HAL_ADC_ConfigChannel+0x428>
 800487e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004882:	e7a9      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x410>
 8004884:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004888:	e64d      	b.n	8004526 <HAL_ADC_ConfigChannel+0x15e>
 800488a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800488e:	e62b      	b.n	80044e8 <HAL_ADC_ConfigChannel+0x120>
 8004890:	4801      	ldr	r0, [pc, #4]	; (8004898 <HAL_ADC_ConfigChannel+0x4d0>)
 8004892:	e648      	b.n	8004526 <HAL_ADC_ConfigChannel+0x15e>
 8004894:	2402      	movs	r4, #2
 8004896:	e634      	b.n	8004502 <HAL_ADC_ConfigChannel+0x13a>
 8004898:	fe500000 	.word	0xfe500000

0800489c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 800489c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048a0:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048a4:	6944      	ldr	r4, [r0, #20]
{
 80048a6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 80048a8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80048aa:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 80048ac:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80048ae:	f000 8187 	beq.w	8004bc0 <HAL_ADCEx_InjectedConfigChannel+0x324>
 80048b2:	2301      	movs	r3, #1
 80048b4:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80048b8:	b1e4      	cbz	r4, 80048f4 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 80048ba:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d019      	beq.n	80048f4 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80048c0:	6e84      	ldr	r4, [r0, #104]	; 0x68
 80048c2:	2c00      	cmp	r4, #0
 80048c4:	f040 8126 	bne.w	8004b14 <HAL_ADCEx_InjectedConfigChannel+0x278>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80048c8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80048ca:	2a00      	cmp	r2, #0
 80048cc:	f000 8248 	beq.w	8004d60 <HAL_ADCEx_InjectedConfigChannel+0x4c4>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80048d0:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80048d2:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80048d6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80048d8:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80048da:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80048dc:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 80048e0:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 80048e2:	f005 051f 	and.w	r5, r5, #31
 80048e6:	f3c2 6484 	ubfx	r4, r2, #26, #5
 80048ea:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 80048ec:	4323      	orrs	r3, r4
 80048ee:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80048f0:	6803      	ldr	r3, [r0, #0]
 80048f2:	e005      	b.n	8004900 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80048f4:	684b      	ldr	r3, [r1, #4]
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	f000 80f8 	beq.w	8004aec <HAL_ADCEx_InjectedConfigChannel+0x250>
 80048fc:	680a      	ldr	r2, [r1, #0]
 80048fe:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004900:	689c      	ldr	r4, [r3, #8]
 8004902:	0724      	lsls	r4, r4, #28
 8004904:	d410      	bmi.n	8004928 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004906:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 800490a:	2c00      	cmp	r4, #0
 800490c:	f040 80e5 	bne.w	8004ada <HAL_ADCEx_InjectedConfigChannel+0x23e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004910:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8004914:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8004918:	68dd      	ldr	r5, [r3, #12]
 800491a:	0524      	lsls	r4, r4, #20
 800491c:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8004920:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004924:	432c      	orrs	r4, r5
 8004926:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004928:	689c      	ldr	r4, [r3, #8]
 800492a:	f014 0404 	ands.w	r4, r4, #4
 800492e:	d060      	beq.n	80049f2 <HAL_ADCEx_InjectedConfigChannel+0x156>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004930:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004932:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004934:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004936:	07ef      	lsls	r7, r5, #31
 8004938:	d414      	bmi.n	8004964 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800493a:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800493c:	4dbe      	ldr	r5, [pc, #760]	; (8004c38 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 800493e:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004942:	f8df e320 	ldr.w	lr, [pc, #800]	; 8004c64 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 8004946:	f007 0c18 	and.w	ip, r7, #24
 800494a:	fa25 f50c 	lsr.w	r5, r5, ip
 800494e:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8004952:	4015      	ands	r5, r2
 8004954:	ea26 060c 	bic.w	r6, r6, ip
 8004958:	4335      	orrs	r5, r6
 800495a:	4577      	cmp	r7, lr
 800495c:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 8004960:	f000 80fd 	beq.w	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004964:	49b5      	ldr	r1, [pc, #724]	; (8004c3c <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
 8004966:	420a      	tst	r2, r1
 8004968:	d019      	beq.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800496a:	4db5      	ldr	r5, [pc, #724]	; (8004c40 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800496c:	4eb5      	ldr	r6, [pc, #724]	; (8004c44 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 800496e:	68a9      	ldr	r1, [r5, #8]
 8004970:	42b2      	cmp	r2, r6
 8004972:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8004976:	d019      	beq.n	80049ac <HAL_ADCEx_InjectedConfigChannel+0x110>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004978:	4eb3      	ldr	r6, [pc, #716]	; (8004c48 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 800497a:	42b2      	cmp	r2, r6
 800497c:	d016      	beq.n	80049ac <HAL_ADCEx_InjectedConfigChannel+0x110>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800497e:	4eb3      	ldr	r6, [pc, #716]	; (8004c4c <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 8004980:	42b2      	cmp	r2, r6
 8004982:	f040 8126 	bne.w	8004bd2 <HAL_ADCEx_InjectedConfigChannel+0x336>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004986:	01ce      	lsls	r6, r1, #7
 8004988:	d409      	bmi.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800498a:	4ab1      	ldr	r2, [pc, #708]	; (8004c50 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d006      	beq.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004990:	68ab      	ldr	r3, [r5, #8]
 8004992:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004996:	431f      	orrs	r7, r3
 8004998:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 800499c:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800499e:	2300      	movs	r3, #0
 80049a0:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80049a4:	4620      	mov	r0, r4
 80049a6:	b002      	add	sp, #8
 80049a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049ac:	020a      	lsls	r2, r1, #8
 80049ae:	d4f6      	bmi.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049b4:	d1f3      	bne.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
 80049b6:	4aa2      	ldr	r2, [pc, #648]	; (8004c40 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80049b8:	49a6      	ldr	r1, [pc, #664]	; (8004c54 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 80049ba:	6893      	ldr	r3, [r2, #8]
 80049bc:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80049c0:	431f      	orrs	r7, r3
 80049c2:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 80049c6:	6097      	str	r7, [r2, #8]
 80049c8:	680b      	ldr	r3, [r1, #0]
 80049ca:	4aa3      	ldr	r2, [pc, #652]	; (8004c58 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	3318      	adds	r3, #24
 80049dc:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80049de:	9b01      	ldr	r3, [sp, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0dc      	beq.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 80049e4:	9b01      	ldr	r3, [sp, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80049ea:	9b01      	ldr	r3, [sp, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f9      	bne.n	80049e4 <HAL_ADCEx_InjectedConfigChannel+0x148>
 80049f0:	e7d5      	b.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049f2:	689d      	ldr	r5, [r3, #8]
 80049f4:	f015 0508 	ands.w	r5, r5, #8
 80049f8:	d19c      	bne.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80049fa:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80049fc:	2c00      	cmp	r4, #0
 80049fe:	f040 809f 	bne.w	8004b40 <HAL_ADCEx_InjectedConfigChannel+0x2a4>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004a02:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004a06:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004a08:	68dc      	ldr	r4, [r3, #12]
 8004a0a:	bf0c      	ite	eq
 8004a0c:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004a10:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8004a14:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a16:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004a18:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8004a1c:	2e01      	cmp	r6, #1
 8004a1e:	f000 80ff 	beq.w	8004c20 <HAL_ADCEx_InjectedConfigChannel+0x384>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004a22:	691e      	ldr	r6, [r3, #16]
 8004a24:	f026 0602 	bic.w	r6, r6, #2
 8004a28:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a2a:	688e      	ldr	r6, [r1, #8]
 8004a2c:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8004a30:	f000 80e2 	beq.w	8004bf8 <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004a34:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 8004a38:	f00e 0e04 	and.w	lr, lr, #4
 8004a3c:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004a40:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004a44:	f85e 700c 	ldr.w	r7, [lr, ip]
 8004a48:	f04f 0807 	mov.w	r8, #7
 8004a4c:	fa08 f802 	lsl.w	r8, r8, r2
 8004a50:	4096      	lsls	r6, r2
 8004a52:	ea27 0208 	bic.w	r2, r7, r8
 8004a56:	4316      	orrs	r6, r2
 8004a58:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004a62:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004a64:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004a68:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004a6a:	f1be 0f04 	cmp.w	lr, #4
 8004a6e:	f000 80fd 	beq.w	8004c6c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a72:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8004a76:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8004c68 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 8004a7a:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 8004a7e:	ea06 0808 	and.w	r8, r6, r8
 8004a82:	680e      	ldr	r6, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004a84:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 8004a88:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 8004a8c:	694e      	ldr	r6, [r1, #20]
 8004a8e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004a92:	fa06 f60c 	lsl.w	r6, r6, ip
 8004a96:	ea47 0708 	orr.w	r7, r7, r8
 8004a9a:	433e      	orrs	r6, r7
 8004a9c:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8004aa0:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004aa4:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8004aa8:	698f      	ldr	r7, [r1, #24]
 8004aaa:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8004aae:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8004ab2:	433e      	orrs	r6, r7
 8004ab4:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004ab8:	690f      	ldr	r7, [r1, #16]
 8004aba:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 8004abe:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8004ac2:	f1bc 0f01 	cmp.w	ip, #1
 8004ac6:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8004aca:	bf08      	it	eq
 8004acc:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004ad0:	4335      	orrs	r5, r6
 8004ad2:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 8004ad6:	680a      	ldr	r2, [r1, #0]
}
 8004ad8:	e72c      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8004ada:	68dc      	ldr	r4, [r3, #12]
 8004adc:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8004ae0:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004ae4:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8004ae8:	60dc      	str	r4, [r3, #12]
 8004aea:	e71d      	b.n	8004928 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004aec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004aee:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d06a      	beq.n	8004bca <HAL_ADCEx_InjectedConfigChannel+0x32e>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004af4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004af6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004afa:	0c55      	lsrs	r5, r2, #17
 8004afc:	4323      	orrs	r3, r4
 8004afe:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004b02:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004b04:	6803      	ldr	r3, [r0, #0]
 8004b06:	4e55      	ldr	r6, [pc, #340]	; (8004c5c <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004b08:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004b0a:	4034      	ands	r4, r6
 8004b0c:	432c      	orrs	r4, r5
 8004b0e:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004b10:	6645      	str	r5, [r0, #100]	; 0x64
 8004b12:	e6f5      	b.n	8004900 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b14:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004b18:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b1a:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8004b1e:	f006 061f 	and.w	r6, r6, #31
 8004b22:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004b24:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004b26:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004b28:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004b2c:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004b2e:	2c00      	cmp	r4, #0
 8004b30:	f47f aee6 	bne.w	8004900 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004b34:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004b36:	4e49      	ldr	r6, [pc, #292]	; (8004c5c <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004b38:	4034      	ands	r4, r6
 8004b3a:	4325      	orrs	r5, r4
 8004b3c:	64dd      	str	r5, [r3, #76]	; 0x4c
 8004b3e:	e6df      	b.n	8004900 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004b40:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004b42:	2c00      	cmp	r4, #0
 8004b44:	f43f af5d 	beq.w	8004a02 <HAL_ADCEx_InjectedConfigChannel+0x166>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004b48:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004b4c:	2c01      	cmp	r4, #1
 8004b4e:	f000 8154 	beq.w	8004dfa <HAL_ADCEx_InjectedConfigChannel+0x55e>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b52:	68dc      	ldr	r4, [r3, #12]
 8004b54:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8004b58:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b5a:	462c      	mov	r4, r5
 8004b5c:	e75c      	b.n	8004a18 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004b5e:	f1bc 0f00 	cmp.w	ip, #0
 8004b62:	f040 80c7 	bne.w	8004cf4 <HAL_ADCEx_InjectedConfigChannel+0x458>
 8004b66:	0e92      	lsrs	r2, r2, #26
 8004b68:	1c55      	adds	r5, r2, #1
 8004b6a:	f005 071f 	and.w	r7, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b6e:	2f09      	cmp	r7, #9
 8004b70:	f240 80f9 	bls.w	8004d66 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004b74:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8004b78:	06ae      	lsls	r6, r5, #26
 8004b7a:	3a1e      	subs	r2, #30
 8004b7c:	2501      	movs	r5, #1
 8004b7e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8004b82:	fa05 f707 	lsl.w	r7, r5, r7
 8004b86:	0512      	lsls	r2, r2, #20
 8004b88:	433e      	orrs	r6, r7
 8004b8a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b8e:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b90:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8004b94:	f00c 0c04 	and.w	ip, ip, #4
 8004b98:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8004b9c:	688e      	ldr	r6, [r1, #8]
 8004b9e:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004ba2:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004ba6:	f04f 0e07 	mov.w	lr, #7
 8004baa:	fa0e fe02 	lsl.w	lr, lr, r2
 8004bae:	ea25 050e 	bic.w	r5, r5, lr
 8004bb2:	fa06 f202 	lsl.w	r2, r6, r2
 8004bb6:	432a      	orrs	r2, r5
 8004bb8:	f84c 2007 	str.w	r2, [ip, r7]
 8004bbc:	680a      	ldr	r2, [r1, #0]
}
 8004bbe:	e6d1      	b.n	8004964 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 8004bc0:	2402      	movs	r4, #2
}
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	b002      	add	sp, #8
 8004bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004bca:	0c55      	lsrs	r5, r2, #17
 8004bcc:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004bd0:	e798      	b.n	8004b04 <HAL_ADCEx_InjectedConfigChannel+0x268>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004bd2:	4e23      	ldr	r6, [pc, #140]	; (8004c60 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 8004bd4:	42b2      	cmp	r2, r6
 8004bd6:	f47f aee2 	bne.w	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004bda:	0249      	lsls	r1, r1, #9
 8004bdc:	f53f aedf 	bmi.w	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	f43f aedb 	beq.w	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004be8:	68ab      	ldr	r3, [r5, #8]
 8004bea:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004bee:	431f      	orrs	r7, r3
 8004bf0:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8004bf4:	60af      	str	r7, [r5, #8]
}
 8004bf6:	e6d2      	b.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x102>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004bf8:	0dd7      	lsrs	r7, r2, #23
 8004bfa:	f007 0704 	and.w	r7, r7, #4
 8004bfe:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004c02:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 8004c06:	f04f 0c07 	mov.w	ip, #7
 8004c0a:	59ba      	ldr	r2, [r7, r6]
 8004c0c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004c10:	ea22 020c 	bic.w	r2, r2, ip
 8004c14:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c1c:	615a      	str	r2, [r3, #20]
}
 8004c1e:	e721      	b.n	8004a64 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004c20:	691f      	ldr	r7, [r3, #16]
 8004c22:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8004c24:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 8004c28:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8004c2a:	433e      	orrs	r6, r7
 8004c2c:	ea46 060c 	orr.w	r6, r6, ip
 8004c30:	f046 0602 	orr.w	r6, r6, #2
 8004c34:	611e      	str	r6, [r3, #16]
 8004c36:	e6f8      	b.n	8004a2a <HAL_ADCEx_InjectedConfigChannel+0x18e>
 8004c38:	0007ffff 	.word	0x0007ffff
 8004c3c:	80080000 	.word	0x80080000
 8004c40:	50000300 	.word	0x50000300
 8004c44:	c3210000 	.word	0xc3210000
 8004c48:	90c00010 	.word	0x90c00010
 8004c4c:	c7520000 	.word	0xc7520000
 8004c50:	50000100 	.word	0x50000100
 8004c54:	20000658 	.word	0x20000658
 8004c58:	053e2d63 	.word	0x053e2d63
 8004c5c:	04104000 	.word	0x04104000
 8004c60:	cb840000 	.word	0xcb840000
 8004c64:	407f0000 	.word	0x407f0000
 8004c68:	03fff000 	.word	0x03fff000
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004c6c:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004c6e:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004c70:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004c72:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c76:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	d07d      	beq.n	8004d7a <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004c82:	b126      	cbz	r6, 8004c8e <HAL_ADCEx_InjectedConfigChannel+0x3f2>
  return __builtin_clz(value);
 8004c84:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c88:	42b5      	cmp	r5, r6
 8004c8a:	f000 80bb 	beq.w	8004e04 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8004c8e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004c90:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c92:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c96:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004c9a:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004ca2:	b126      	cbz	r6, 8004cae <HAL_ADCEx_InjectedConfigChannel+0x412>
  return __builtin_clz(value);
 8004ca4:	fab6 f686 	clz	r6, r6
 8004ca8:	42b7      	cmp	r7, r6
 8004caa:	f000 80c0 	beq.w	8004e2e <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004cae:	68ae      	ldr	r6, [r5, #8]
 8004cb0:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cb2:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cb6:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004cbe:	b126      	cbz	r6, 8004cca <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 8004cc0:	fab6 f686 	clz	r6, r6
 8004cc4:	42b7      	cmp	r7, r6
 8004cc6:	f000 80c7 	beq.w	8004e58 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004cca:	68ee      	ldr	r6, [r5, #12]
 8004ccc:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cce:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cd0:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004cd8:	2e00      	cmp	r6, #0
 8004cda:	f43f ae2b 	beq.w	8004934 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8004cde:	fab6 f686 	clz	r6, r6
 8004ce2:	42be      	cmp	r6, r7
 8004ce4:	f47f ae26 	bne.w	8004934 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004ce8:	682a      	ldr	r2, [r5, #0]
 8004cea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cee:	602a      	str	r2, [r5, #0]
 8004cf0:	680a      	ldr	r2, [r1, #0]
}
 8004cf2:	e61f      	b.n	8004934 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf4:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	d05a      	beq.n	8004db2 <HAL_ADCEx_InjectedConfigChannel+0x516>
  return __builtin_clz(value);
 8004cfc:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004d00:	3501      	adds	r5, #1
 8004d02:	f005 051f 	and.w	r5, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d06:	2d09      	cmp	r5, #9
 8004d08:	d953      	bls.n	8004db2 <HAL_ADCEx_InjectedConfigChannel+0x516>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004d0e:	2e00      	cmp	r6, #0
 8004d10:	f000 80c2 	beq.w	8004e98 <HAL_ADCEx_InjectedConfigChannel+0x5fc>
  return __builtin_clz(value);
 8004d14:	fab6 f686 	clz	r6, r6
 8004d18:	3601      	adds	r6, #1
 8004d1a:	06b6      	lsls	r6, r6, #26
 8004d1c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d20:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004d24:	2d00      	cmp	r5, #0
 8004d26:	f000 80b5 	beq.w	8004e94 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
  return __builtin_clz(value);
 8004d2a:	fab5 f585 	clz	r5, r5
 8004d2e:	3501      	adds	r5, #1
 8004d30:	f005 051f 	and.w	r5, r5, #31
 8004d34:	2701      	movs	r7, #1
 8004d36:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004d3a:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004d40:	2a00      	cmp	r2, #0
 8004d42:	f000 80a5 	beq.w	8004e90 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 8004d46:	fab2 f582 	clz	r5, r2
 8004d4a:	3501      	adds	r5, #1
 8004d4c:	f005 051f 	and.w	r5, r5, #31
 8004d50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d54:	f1a5 021e 	sub.w	r2, r5, #30
 8004d58:	0512      	lsls	r2, r2, #20
 8004d5a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004d5e:	e716      	b.n	8004b8e <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004d60:	3b01      	subs	r3, #1
 8004d62:	461c      	mov	r4, r3
 8004d64:	e5ba      	b.n	80048dc <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004d66:	06ae      	lsls	r6, r5, #26
 8004d68:	2501      	movs	r5, #1
 8004d6a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8004d6e:	40bd      	lsls	r5, r7
 8004d70:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8004d74:	432e      	orrs	r6, r5
 8004d76:	0512      	lsls	r2, r2, #20
 8004d78:	e709      	b.n	8004b8e <HAL_ADCEx_InjectedConfigChannel+0x2f2>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004d7a:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d7e:	42b5      	cmp	r5, r6
 8004d80:	d040      	beq.n	8004e04 <HAL_ADCEx_InjectedConfigChannel+0x568>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d82:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004d84:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d86:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d8a:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004d8e:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004d92:	42b7      	cmp	r7, r6
 8004d94:	d04b      	beq.n	8004e2e <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d96:	68af      	ldr	r7, [r5, #8]
 8004d98:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d9a:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d9e:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004da2:	42b7      	cmp	r7, r6
 8004da4:	d058      	beq.n	8004e58 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004da6:	68ef      	ldr	r7, [r5, #12]
 8004da8:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004daa:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dac:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004db0:	e797      	b.n	8004ce2 <HAL_ADCEx_InjectedConfigChannel+0x446>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	d064      	beq.n	8004e84 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 8004dba:	fab6 f686 	clz	r6, r6
 8004dbe:	3601      	adds	r6, #1
 8004dc0:	06b6      	lsls	r6, r6, #26
 8004dc2:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004dca:	2d00      	cmp	r5, #0
 8004dcc:	d058      	beq.n	8004e80 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  return __builtin_clz(value);
 8004dce:	fab5 f585 	clz	r5, r5
 8004dd2:	3501      	adds	r5, #1
 8004dd4:	f005 051f 	and.w	r5, r5, #31
 8004dd8:	2701      	movs	r7, #1
 8004dda:	fa07 f505 	lsl.w	r5, r7, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004dde:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de0:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	d050      	beq.n	8004e8a <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  return __builtin_clz(value);
 8004de8:	fab2 f582 	clz	r5, r2
 8004dec:	3501      	adds	r5, #1
 8004dee:	f005 051f 	and.w	r5, r5, #31
 8004df2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004df6:	052a      	lsls	r2, r5, #20
 8004df8:	e6c9      	b.n	8004b8e <HAL_ADCEx_InjectedConfigChannel+0x2f2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dfa:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8004dfc:	f046 0620 	orr.w	r6, r6, #32
 8004e00:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8004e02:	e609      	b.n	8004a18 <HAL_ADCEx_InjectedConfigChannel+0x17c>
  MODIFY_REG(*preg,
 8004e04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e06:	461d      	mov	r5, r3
 8004e08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e0c:	f845 2f60 	str.w	r2, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e10:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e12:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8004e14:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004e16:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e1a:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e1e:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e22:	2e00      	cmp	r6, #0
 8004e24:	f47f af3b 	bne.w	8004c9e <HAL_ADCEx_InjectedConfigChannel+0x402>
 8004e28:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004e2c:	e7b1      	b.n	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x4f6>
  MODIFY_REG(*preg,
 8004e2e:	f8dc 2000 	ldr.w	r2, [ip]
 8004e32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e36:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e3a:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e3c:	68ae      	ldr	r6, [r5, #8]
 8004e3e:	68af      	ldr	r7, [r5, #8]
 8004e40:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e44:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e48:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e4c:	2e00      	cmp	r6, #0
 8004e4e:	f47f af34 	bne.w	8004cba <HAL_ADCEx_InjectedConfigChannel+0x41e>
 8004e52:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004e56:	e7a4      	b.n	8004da2 <HAL_ADCEx_InjectedConfigChannel+0x506>
  MODIFY_REG(*preg,
 8004e58:	f8dc 2000 	ldr.w	r2, [ip]
 8004e5c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e60:	f8cc 2000 	str.w	r2, [ip]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e64:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e66:	68ee      	ldr	r6, [r5, #12]
 8004e68:	68ef      	ldr	r7, [r5, #12]
 8004e6a:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e6e:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e72:	350c      	adds	r5, #12
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e74:	2e00      	cmp	r6, #0
 8004e76:	f47f af2d 	bne.w	8004cd4 <HAL_ADCEx_InjectedConfigChannel+0x438>
 8004e7a:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004e7e:	e730      	b.n	8004ce2 <HAL_ADCEx_InjectedConfigChannel+0x446>
 8004e80:	2502      	movs	r5, #2
 8004e82:	e7ac      	b.n	8004dde <HAL_ADCEx_InjectedConfigChannel+0x542>
 8004e84:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8004e88:	e79d      	b.n	8004dc6 <HAL_ADCEx_InjectedConfigChannel+0x52a>
 8004e8a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004e8e:	e67e      	b.n	8004b8e <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8004e90:	4a03      	ldr	r2, [pc, #12]	; (8004ea0 <HAL_ADCEx_InjectedConfigChannel+0x604>)
 8004e92:	e67c      	b.n	8004b8e <HAL_ADCEx_InjectedConfigChannel+0x2f2>
 8004e94:	2502      	movs	r5, #2
 8004e96:	e750      	b.n	8004d3a <HAL_ADCEx_InjectedConfigChannel+0x49e>
 8004e98:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 8004e9c:	e740      	b.n	8004d20 <HAL_ADCEx_InjectedConfigChannel+0x484>
 8004e9e:	bf00      	nop
 8004ea0:	fe500000 	.word	0xfe500000

08004ea4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ea4:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ea6:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eaa:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004eac:	2a01      	cmp	r2, #1
{
 8004eae:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8004eb0:	d04f      	beq.n	8004f52 <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004eb2:	6804      	ldr	r4, [r0, #0]
 8004eb4:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004eb6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004eb8:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004eba:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004ebe:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004ec0:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004ec4:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ec6:	d008      	beq.n	8004eda <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ec8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004eca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ece:	f041 0120 	orr.w	r1, r1, #32
 8004ed2:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004ed4:	b01c      	add	sp, #112	; 0x70
 8004ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8004ed8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eda:	4a23      	ldr	r2, [pc, #140]	; (8004f68 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004edc:	6890      	ldr	r0, [r2, #8]
 8004ede:	0740      	lsls	r0, r0, #29
 8004ee0:	d50b      	bpl.n	8004efa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004ee2:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ee6:	f042 0220 	orr.w	r2, r2, #32
 8004eea:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004eec:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004ef4:	b01c      	add	sp, #112	; 0x70
 8004ef6:	bcf0      	pop	{r4, r5, r6, r7}
 8004ef8:	4770      	bx	lr
 8004efa:	68a0      	ldr	r0, [r4, #8]
 8004efc:	0746      	lsls	r6, r0, #29
 8004efe:	d4f1      	bmi.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f00:	b1d5      	cbz	r5, 8004f38 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f02:	4e1a      	ldr	r6, [pc, #104]	; (8004f6c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004f04:	684f      	ldr	r7, [r1, #4]
 8004f06:	68b0      	ldr	r0, [r6, #8]
 8004f08:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004f0c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004f10:	4338      	orrs	r0, r7
 8004f12:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8004f16:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f18:	68a4      	ldr	r4, [r4, #8]
 8004f1a:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f1c:	4320      	orrs	r0, r4
 8004f1e:	f010 0001 	ands.w	r0, r0, #1
 8004f22:	d114      	bne.n	8004f4e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8004f24:	68b4      	ldr	r4, [r6, #8]
 8004f26:	688a      	ldr	r2, [r1, #8]
 8004f28:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8004f2c:	4315      	orrs	r5, r2
 8004f2e:	f021 010f 	bic.w	r1, r1, #15
 8004f32:	430d      	orrs	r5, r1
 8004f34:	60b5      	str	r5, [r6, #8]
 8004f36:	e7da      	b.n	8004eee <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f38:	4d0c      	ldr	r5, [pc, #48]	; (8004f6c <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8004f3a:	68a9      	ldr	r1, [r5, #8]
 8004f3c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004f40:	60a9      	str	r1, [r5, #8]
 8004f42:	68a1      	ldr	r1, [r4, #8]
 8004f44:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f46:	4308      	orrs	r0, r1
 8004f48:	f010 0001 	ands.w	r0, r0, #1
 8004f4c:	d005      	beq.n	8004f5a <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f4e:	2000      	movs	r0, #0
 8004f50:	e7cd      	b.n	8004eee <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8004f52:	2002      	movs	r0, #2
}
 8004f54:	b01c      	add	sp, #112	; 0x70
 8004f56:	bcf0      	pop	{r4, r5, r6, r7}
 8004f58:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004f5a:	68aa      	ldr	r2, [r5, #8]
 8004f5c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004f60:	f022 020f 	bic.w	r2, r2, #15
 8004f64:	60aa      	str	r2, [r5, #8]
 8004f66:	e7c2      	b.n	8004eee <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8004f68:	50000100 	.word	0x50000100
 8004f6c:	50000300 	.word	0x50000300

08004f70 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004f70:	b1b0      	cbz	r0, 8004fa0 <HAL_CORDIC_Init+0x30>
{
 8004f72:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004f74:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004f78:	4604      	mov	r4, r0
 8004f7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f7e:	b153      	cbz	r3, 8004f96 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004f80:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004f82:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004f84:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004f86:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 8004f8a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004f8e:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004f92:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8004f94:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8004f96:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8004f9a:	f7fe fde7 	bl	8003b6c <HAL_CORDIC_MspInit>
 8004f9e:	e7ef      	b.n	8004f80 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004fa0:	2001      	movs	r0, #1
}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fa4:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8004fa6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004faa:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fac:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004fb0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fb2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8004fc4:	60cb      	str	r3, [r1, #12]
 8004fc6:	4770      	bx	lr
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <HAL_NVIC_SetPriority+0x68>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd6:	f1c3 0507 	rsb	r5, r3, #7
 8004fda:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fdc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe0:	bf28      	it	cs
 8004fe2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fe4:	2c06      	cmp	r4, #6
 8004fe6:	d919      	bls.n	800501c <HAL_NVIC_SetPriority+0x50>
 8004fe8:	3b03      	subs	r3, #3
 8004fea:	f04f 34ff 	mov.w	r4, #4294967295
 8004fee:	409c      	lsls	r4, r3
 8004ff0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ff8:	40ac      	lsls	r4, r5
 8004ffa:	ea21 0104 	bic.w	r1, r1, r4
 8004ffe:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005000:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005002:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005006:	db0c      	blt.n	8005022 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005008:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800500c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005010:	0109      	lsls	r1, r1, #4
 8005012:	b2c9      	uxtb	r1, r1
 8005014:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005018:	bc30      	pop	{r4, r5}
 800501a:	4770      	bx	lr
 800501c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800501e:	4613      	mov	r3, r2
 8005020:	e7e8      	b.n	8004ff4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_NVIC_SetPriority+0x6c>)
 8005024:	f000 000f 	and.w	r0, r0, #15
 8005028:	0109      	lsls	r1, r1, #4
 800502a:	4403      	add	r3, r0
 800502c:	b2c9      	uxtb	r1, r1
 800502e:	7619      	strb	r1, [r3, #24]
 8005030:	bc30      	pop	{r4, r5}
 8005032:	4770      	bx	lr
 8005034:	e000ed00 	.word	0xe000ed00
 8005038:	e000ecfc 	.word	0xe000ecfc

0800503c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800503c:	2800      	cmp	r0, #0
 800503e:	db07      	blt.n	8005050 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <HAL_NVIC_EnableIRQ+0x18>)
 8005042:	f000 011f 	and.w	r1, r0, #31
 8005046:	2301      	movs	r3, #1
 8005048:	0940      	lsrs	r0, r0, #5
 800504a:	408b      	lsls	r3, r1
 800504c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	e000e100 	.word	0xe000e100

08005058 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005058:	3801      	subs	r0, #1
 800505a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800505e:	d20e      	bcs.n	800507e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005062:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005064:	4c08      	ldr	r4, [pc, #32]	; (8005088 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005066:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005068:	20f0      	movs	r0, #240	; 0xf0
 800506a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800506e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005070:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005072:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005074:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8005076:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800507a:	6019      	str	r1, [r3, #0]
 800507c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800507e:	2001      	movs	r0, #1
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	e000e010 	.word	0xe000e010
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop

08005090 <HAL_SYSTICK_IRQHandler>:
{
 8005090:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005092:	f7ff fffb 	bl	800508c <HAL_SYSTICK_Callback>
}
 8005096:	bd08      	pop	{r3, pc}

08005098 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005098:	b188      	cbz	r0, 80050be <HAL_DAC_Init+0x26>
{
 800509a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800509c:	7903      	ldrb	r3, [r0, #4]
 800509e:	4604      	mov	r4, r0
 80050a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050a4:	b13b      	cbz	r3, 80050b6 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80050a6:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80050a8:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80050aa:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80050ac:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80050ae:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80050b0:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80050b2:	4618      	mov	r0, r3
}
 80050b4:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80050b6:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80050b8:	f7fe fd70 	bl	8003b9c <HAL_DAC_MspInit>
 80050bc:	e7f3      	b.n	80050a6 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80050be:	2001      	movs	r0, #1
}
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop

080050c4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80050c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050c8:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80050ca:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	f000 80c5 	beq.w	800525c <HAL_DAC_ConfigChannel+0x198>
 80050d2:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050d4:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 80050d6:	2201      	movs	r2, #1

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80050d8:	2f04      	cmp	r7, #4
 80050da:	4606      	mov	r6, r0
 80050dc:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 80050de:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80050e0:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80050e2:	d077      	beq.n	80051d4 <HAL_DAC_ConfigChannel+0x110>
 80050e4:	6803      	ldr	r3, [r0, #0]
 80050e6:	f004 0410 	and.w	r4, r4, #16
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050ea:	69ea      	ldr	r2, [r5, #28]
 80050ec:	2a01      	cmp	r2, #1
 80050ee:	d108      	bne.n	8005102 <HAL_DAC_ConfigChannel+0x3e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80050f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050f2:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80050f4:	201f      	movs	r0, #31
 80050f6:	40a0      	lsls	r0, r4
 80050f8:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050fc:	40a2      	lsls	r2, r4
 80050fe:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005102:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 8005104:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005106:	2207      	movs	r2, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005108:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800510a:	fa02 fc04 	lsl.w	ip, r2, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800510e:	696a      	ldr	r2, [r5, #20]
 8005110:	d05e      	beq.n	80051d0 <HAL_DAC_ConfigChannel+0x10c>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005112:	2902      	cmp	r1, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005114:	bf16      	itet	ne
 8005116:	fab2 f182 	clzne	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 800511a:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800511c:	0949      	lsrne	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800511e:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005120:	792a      	ldrb	r2, [r5, #4]
 8005122:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005124:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005128:	f44f 7880 	mov.w	r8, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800512c:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005130:	fa08 f804 	lsl.w	r8, r8, r4
 8005134:	ea42 020c 	orr.w	r2, r2, ip
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005138:	ea47 0701 	orr.w	r7, r7, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800513c:	ea20 0202 	bic.w	r2, r0, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005140:	7969      	ldrb	r1, [r5, #5]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005142:	ea6f 0808 	mvn.w	r8, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005146:	ea08 0802 	and.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800514a:	682a      	ldr	r2, [r5, #0]
 800514c:	bf08      	it	eq
 800514e:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005152:	2901      	cmp	r1, #1
 8005154:	bf08      	it	eq
 8005156:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800515a:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800515c:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005160:	d073      	beq.n	800524a <HAL_DAC_ConfigChannel+0x186>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005162:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005166:	40a7      	lsls	r7, r4
 8005168:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800516c:	63df      	str	r7, [r3, #60]	; 0x3c
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800516e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8005178:	40a5      	lsls	r5, r4
 800517a:	ea20 0005 	bic.w	r0, r0, r5
 800517e:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8005180:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005182:	f640 75fe 	movw	r5, #4094	; 0xffe
 8005186:	40a5      	lsls	r5, r4
 8005188:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800518c:	fa01 f004 	lsl.w	r0, r1, r4
 8005190:	4328      	orrs	r0, r5
  hdac->Instance->CR = tmpreg1;
 8005192:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	25c0      	movs	r5, #192	; 0xc0
 8005198:	40a5      	lsls	r5, r4
 800519a:	ea20 0005 	bic.w	r0, r0, r5
 800519e:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80051a0:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80051a2:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80051a4:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80051a8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80051ac:	f640 750f 	movw	r5, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80051b0:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80051b2:	fa05 f104 	lsl.w	r1, r5, r4
 80051b6:	fa02 f404 	lsl.w	r4, r2, r4
 80051ba:	ea20 0201 	bic.w	r2, r0, r1
 80051be:	4314      	orrs	r4, r2
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051c0:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051c2:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80051c4:	661c      	str	r4, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 80051c6:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80051c8:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 80051ca:	7172      	strb	r2, [r6, #5]
}
 80051cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 80051d0:	2100      	movs	r1, #0
 80051d2:	e7a4      	b.n	800511e <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 80051d4:	f7fe ffda 	bl	800418c <HAL_GetTick>
 80051d8:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80051da:	b12c      	cbz	r4, 80051e8 <HAL_DAC_ConfigChannel+0x124>
 80051dc:	e014      	b.n	8005208 <HAL_DAC_ConfigChannel+0x144>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80051de:	f7fe ffd5 	bl	800418c <HAL_GetTick>
 80051e2:	1bc3      	subs	r3, r0, r7
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d83c      	bhi.n	8005262 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051e8:	6833      	ldr	r3, [r6, #0]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	041b      	lsls	r3, r3, #16
 80051ee:	d4f6      	bmi.n	80051de <HAL_DAC_ConfigChannel+0x11a>
      HAL_Delay(1);
 80051f0:	2001      	movs	r0, #1
 80051f2:	f7fe ffd1 	bl	8004198 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80051f6:	6833      	ldr	r3, [r6, #0]
 80051f8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40
 80051fc:	e00e      	b.n	800521c <HAL_DAC_ConfigChannel+0x158>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80051fe:	f7fe ffc5 	bl	800418c <HAL_GetTick>
 8005202:	1bc3      	subs	r3, r0, r7
 8005204:	2b01      	cmp	r3, #1
 8005206:	d82c      	bhi.n	8005262 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005208:	6833      	ldr	r3, [r6, #0]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	2b00      	cmp	r3, #0
 800520e:	dbf6      	blt.n	80051fe <HAL_DAC_ConfigChannel+0x13a>
      HAL_Delay(1U);
 8005210:	2001      	movs	r0, #1
 8005212:	f7fe ffc1 	bl	8004198 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005216:	6833      	ldr	r3, [r6, #0]
 8005218:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800521a:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800521c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800521e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005220:	68af      	ldr	r7, [r5, #8]
 8005222:	f004 0410 	and.w	r4, r4, #16
 8005226:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800522a:	40a0      	lsls	r0, r4
 800522c:	ea22 0200 	bic.w	r2, r2, r0
 8005230:	40a1      	lsls	r1, r4
 8005232:	430a      	orrs	r2, r1
 8005234:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005238:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800523a:	20ff      	movs	r0, #255	; 0xff
 800523c:	40a0      	lsls	r0, r4
 800523e:	ea22 0200 	bic.w	r2, r2, r0
 8005242:	40a1      	lsls	r1, r4
 8005244:	430a      	orrs	r2, r1
 8005246:	64da      	str	r2, [r3, #76]	; 0x4c
 8005248:	e74f      	b.n	80050ea <HAL_DAC_ConfigChannel+0x26>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800524a:	f001 fa05 	bl	8006658 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800524e:	4b0c      	ldr	r3, [pc, #48]	; (8005280 <HAL_DAC_ConfigChannel+0x1bc>)
 8005250:	4298      	cmp	r0, r3
 8005252:	d90e      	bls.n	8005272 <HAL_DAC_ConfigChannel+0x1ae>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005254:	6833      	ldr	r3, [r6, #0]
 8005256:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 800525a:	e784      	b.n	8005166 <HAL_DAC_ConfigChannel+0xa2>
  __HAL_LOCK(hdac);
 800525c:	2002      	movs	r0, #2
}
 800525e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005262:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005264:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005266:	f043 0308 	orr.w	r3, r3, #8
 800526a:	6133      	str	r3, [r6, #16]
          return HAL_TIMEOUT;
 800526c:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800526e:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 8005270:	e7ac      	b.n	80051cc <HAL_DAC_ConfigChannel+0x108>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005272:	4b04      	ldr	r3, [pc, #16]	; (8005284 <HAL_DAC_ConfigChannel+0x1c0>)
 8005274:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005276:	bf88      	it	hi
 8005278:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
 800527c:	6833      	ldr	r3, [r6, #0]
 800527e:	e772      	b.n	8005166 <HAL_DAC_ConfigChannel+0xa2>
 8005280:	09896800 	.word	0x09896800
 8005284:	04c4b400 	.word	0x04c4b400

08005288 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005288:	2800      	cmp	r0, #0
 800528a:	d07d      	beq.n	8005388 <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800528c:	4a3f      	ldr	r2, [pc, #252]	; (800538c <HAL_DMA_Init+0x104>)
 800528e:	4603      	mov	r3, r0
 8005290:	6800      	ldr	r0, [r0, #0]
 8005292:	4290      	cmp	r0, r2
{
 8005294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005298:	d962      	bls.n	8005360 <HAL_DMA_Init+0xd8>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800529a:	493d      	ldr	r1, [pc, #244]	; (8005390 <HAL_DMA_Init+0x108>)
 800529c:	4a3d      	ldr	r2, [pc, #244]	; (8005394 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 800529e:	4c3e      	ldr	r4, [pc, #248]	; (8005398 <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052a0:	4401      	add	r1, r0
 80052a2:	fba2 2101 	umull	r2, r1, r2, r1
 80052a6:	0909      	lsrs	r1, r1, #4
 80052a8:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052aa:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ae:	691e      	ldr	r6, [r3, #16]
 80052b0:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 80052b2:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052b4:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052b6:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052b8:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80053b0 <HAL_DMA_Init+0x128>
 80052bc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800538c <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c0:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 80052c2:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c6:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 80052c8:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052cc:	4c31      	ldr	r4, [pc, #196]	; (8005394 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 80052ce:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d2:	69de      	ldr	r6, [r3, #28]
 80052d4:	6459      	str	r1, [r3, #68]	; 0x44
 80052d6:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80052d8:	b2c5      	uxtb	r5, r0
 80052da:	3d08      	subs	r5, #8
 80052dc:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e0:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e2:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052e4:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052e8:	4e2c      	ldr	r6, [pc, #176]	; (800539c <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ea:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052ec:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052f0:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80052f4:	4540      	cmp	r0, r8
 80052f6:	bf88      	it	hi
 80052f8:	4676      	movhi	r6, lr
  tmp |=  hdma->Init.Direction        |
 80052fa:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80052fe:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005300:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80053b4 <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 8005304:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005306:	eb01 0e06 	add.w	lr, r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800530a:	fa05 f404 	lsl.w	r4, r5, r4
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800530e:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005312:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005316:	ea4f 0191 	mov.w	r1, r1, lsr #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800531a:	651c      	str	r4, [r3, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800531c:	d029      	beq.n	8005372 <HAL_DMA_Init+0xea>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800531e:	6858      	ldr	r0, [r3, #4]
 8005320:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005322:	3801      	subs	r0, #1
 8005324:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005326:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800532a:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800532e:	d826      	bhi.n	800537e <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005330:	491b      	ldr	r1, [pc, #108]	; (80053a0 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005332:	481c      	ldr	r0, [pc, #112]	; (80053a4 <HAL_DMA_Init+0x11c>)
 8005334:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005336:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005338:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800533a:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800533c:	f002 021f 	and.w	r2, r2, #31
 8005340:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005344:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005346:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005348:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800534a:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800534c:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800534e:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8005350:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005352:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005354:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005360:	4911      	ldr	r1, [pc, #68]	; (80053a8 <HAL_DMA_Init+0x120>)
 8005362:	4a0c      	ldr	r2, [pc, #48]	; (8005394 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8005364:	4c11      	ldr	r4, [pc, #68]	; (80053ac <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005366:	4401      	add	r1, r0
 8005368:	fba2 2101 	umull	r2, r1, r2, r1
 800536c:	0909      	lsrs	r1, r1, #4
 800536e:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8005370:	e79b      	b.n	80052aa <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005372:	2200      	movs	r2, #0
 8005374:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005376:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800537a:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 800537e:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8005380:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005384:	65da      	str	r2, [r3, #92]	; 0x5c
 8005386:	e7e2      	b.n	800534e <HAL_DMA_Init+0xc6>
    return HAL_ERROR;
 8005388:	2001      	movs	r0, #1
}
 800538a:	4770      	bx	lr
 800538c:	40020407 	.word	0x40020407
 8005390:	bffdfbf8 	.word	0xbffdfbf8
 8005394:	cccccccd 	.word	0xcccccccd
 8005398:	40020400 	.word	0x40020400
 800539c:	40020800 	.word	0x40020800
 80053a0:	1000823f 	.word	0x1000823f
 80053a4:	40020940 	.word	0x40020940
 80053a8:	bffdfff8 	.word	0xbffdfff8
 80053ac:	40020000 	.word	0x40020000
 80053b0:	40020820 	.word	0x40020820
 80053b4:	40020880 	.word	0x40020880

080053b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053bc:	680e      	ldr	r6, [r1, #0]
{
 80053be:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	f000 808b 	beq.w	80054dc <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80053c6:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 800559c <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 80053ca:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053cc:	2201      	movs	r2, #1
 80053ce:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 80053d2:	ea14 0c06 	ands.w	ip, r4, r6
 80053d6:	d07c      	beq.n	80054d2 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053d8:	684d      	ldr	r5, [r1, #4]
 80053da:	f025 0a10 	bic.w	sl, r5, #16
 80053de:	f10a 32ff 	add.w	r2, sl, #4294967295
 80053e2:	2a01      	cmp	r2, #1
 80053e4:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053e8:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053ec:	d979      	bls.n	80054e2 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 80053ee:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053f0:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053f2:	fa02 f208 	lsl.w	r2, r2, r8
 80053f6:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053fa:	fa04 f408 	lsl.w	r4, r4, r8
 80053fe:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8005400:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005402:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8005404:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005406:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800540a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800540c:	fa02 f208 	lsl.w	r2, r2, r8
 8005410:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005412:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8005414:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005416:	d55c      	bpl.n	80054d2 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005418:	4c5a      	ldr	r4, [pc, #360]	; (8005584 <HAL_GPIO_Init+0x1cc>)
 800541a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	6622      	str	r2, [r4, #96]	; 0x60
 8005422:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005424:	f023 0403 	bic.w	r4, r3, #3
 8005428:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800542c:	f002 0201 	and.w	r2, r2, #1
 8005430:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8005434:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005436:	f003 0203 	and.w	r2, r3, #3
 800543a:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800543e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005440:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005442:	220f      	movs	r2, #15
 8005444:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005448:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800544c:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005450:	d018      	beq.n	8005484 <HAL_GPIO_Init+0xcc>
 8005452:	4a4d      	ldr	r2, [pc, #308]	; (8005588 <HAL_GPIO_Init+0x1d0>)
 8005454:	4290      	cmp	r0, r2
 8005456:	f000 8084 	beq.w	8005562 <HAL_GPIO_Init+0x1aa>
 800545a:	4a4c      	ldr	r2, [pc, #304]	; (800558c <HAL_GPIO_Init+0x1d4>)
 800545c:	4290      	cmp	r0, r2
 800545e:	f000 8085 	beq.w	800556c <HAL_GPIO_Init+0x1b4>
 8005462:	4a4b      	ldr	r2, [pc, #300]	; (8005590 <HAL_GPIO_Init+0x1d8>)
 8005464:	4290      	cmp	r0, r2
 8005466:	d076      	beq.n	8005556 <HAL_GPIO_Init+0x19e>
 8005468:	4a4a      	ldr	r2, [pc, #296]	; (8005594 <HAL_GPIO_Init+0x1dc>)
 800546a:	4290      	cmp	r0, r2
 800546c:	f000 8084 	beq.w	8005578 <HAL_GPIO_Init+0x1c0>
 8005470:	4a49      	ldr	r2, [pc, #292]	; (8005598 <HAL_GPIO_Init+0x1e0>)
 8005472:	4290      	cmp	r0, r2
 8005474:	bf0c      	ite	eq
 8005476:	f04f 0805 	moveq.w	r8, #5
 800547a:	f04f 0806 	movne.w	r8, #6
 800547e:	fa08 f209 	lsl.w	r2, r8, r9
 8005482:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005484:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 8005486:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 800548a:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800548e:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8005490:	bf54      	ite	pl
 8005492:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8005494:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 8005498:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 800549c:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054a0:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 80054a2:	bf54      	ite	pl
 80054a4:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80054a6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 80054aa:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054ae:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054b2:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 80054b4:	bf54      	ite	pl
 80054b6:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80054b8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 80054bc:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 80054c0:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054c4:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 80054c6:	bf54      	ite	pl
 80054c8:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 80054ca:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 80054ce:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 80054d2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80054d4:	fa36 f203 	lsrs.w	r2, r6, r3
 80054d8:	f47f af78 	bne.w	80053cc <HAL_GPIO_Init+0x14>
  }
}
 80054dc:	b003      	add	sp, #12
 80054de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80054e2:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054e4:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054e8:	fa02 f208 	lsl.w	r2, r2, r8
 80054ec:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054f0:	68cf      	ldr	r7, [r1, #12]
 80054f2:	fa07 f708 	lsl.w	r7, r7, r8
 80054f6:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80054fa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80054fc:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054fe:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005502:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005506:	465c      	mov	r4, fp
 8005508:	409c      	lsls	r4, r3
 800550a:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 800550c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800550e:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005510:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005514:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005518:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800551c:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005520:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8005524:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005526:	f47f af6d 	bne.w	8005404 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 800552a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800552e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005532:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005536:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800553a:	0092      	lsls	r2, r2, #2
 800553c:	f04f 0a0f 	mov.w	sl, #15
 8005540:	fa0a fb02 	lsl.w	fp, sl, r2
 8005544:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005548:	690c      	ldr	r4, [r1, #16]
 800554a:	4094      	lsls	r4, r2
 800554c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005550:	f8c9 4020 	str.w	r4, [r9, #32]
 8005554:	e756      	b.n	8005404 <HAL_GPIO_Init+0x4c>
 8005556:	f04f 0803 	mov.w	r8, #3
 800555a:	fa08 f209 	lsl.w	r2, r8, r9
 800555e:	4317      	orrs	r7, r2
 8005560:	e790      	b.n	8005484 <HAL_GPIO_Init+0xcc>
 8005562:	2201      	movs	r2, #1
 8005564:	fa02 f209 	lsl.w	r2, r2, r9
 8005568:	4317      	orrs	r7, r2
 800556a:	e78b      	b.n	8005484 <HAL_GPIO_Init+0xcc>
 800556c:	f04f 0802 	mov.w	r8, #2
 8005570:	fa08 f209 	lsl.w	r2, r8, r9
 8005574:	4317      	orrs	r7, r2
 8005576:	e785      	b.n	8005484 <HAL_GPIO_Init+0xcc>
 8005578:	f04f 0804 	mov.w	r8, #4
 800557c:	fa08 f209 	lsl.w	r2, r8, r9
 8005580:	4317      	orrs	r7, r2
 8005582:	e77f      	b.n	8005484 <HAL_GPIO_Init+0xcc>
 8005584:	40021000 	.word	0x40021000
 8005588:	48000400 	.word	0x48000400
 800558c:	48000800 	.word	0x48000800
 8005590:	48000c00 	.word	0x48000c00
 8005594:	48001000 	.word	0x48001000
 8005598:	48001400 	.word	0x48001400
 800559c:	40010400 	.word	0x40010400

080055a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055a0:	b10a      	cbz	r2, 80055a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055a2:	6181      	str	r1, [r0, #24]
 80055a4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055a6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop

080055ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	4604      	mov	r4, r0
 80055b0:	460d      	mov	r5, r1
 80055b2:	4616      	mov	r6, r2
 80055b4:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	d12c      	bne.n	8005614 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	0790      	lsls	r0, r2, #30
 80055be:	d427      	bmi.n	8005610 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055c0:	699a      	ldr	r2, [r3, #24]
 80055c2:	06d1      	lsls	r1, r2, #27
 80055c4:	d5f9      	bpl.n	80055ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055c6:	699a      	ldr	r2, [r3, #24]
 80055c8:	0691      	lsls	r1, r2, #26
 80055ca:	d5fc      	bpl.n	80055c6 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055cc:	2110      	movs	r1, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055ce:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055d0:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055d2:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80055d8:	bf44      	itt	mi
 80055da:	2200      	movmi	r2, #0
 80055dc:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055de:	699a      	ldr	r2, [r3, #24]
 80055e0:	07d1      	lsls	r1, r2, #31
 80055e2:	d403      	bmi.n	80055ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	4918      	ldr	r1, [pc, #96]	; (8005650 <I2C_WaitOnTXISFlagUntilTimeout+0xa4>)
 80055f0:	400a      	ands	r2, r1
 80055f2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055f8:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fc:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055fe:	6463      	str	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005600:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005604:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005608:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      return HAL_ERROR;
 800560c:	2001      	movs	r0, #1
}
 800560e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005610:	2000      	movs	r0, #0
}
 8005612:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	0792      	lsls	r2, r2, #30
 8005618:	d4fa      	bmi.n	8005610 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	06d0      	lsls	r0, r2, #27
 800561e:	d412      	bmi.n	8005646 <I2C_WaitOnTXISFlagUntilTimeout+0x9a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005620:	f7fe fdb4 	bl	800418c <HAL_GetTick>
 8005624:	1b80      	subs	r0, r0, r6
 8005626:	42a8      	cmp	r0, r5
 8005628:	d801      	bhi.n	800562e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800562a:	2d00      	cmp	r5, #0
 800562c:	d1c2      	bne.n	80055b4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800562e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005630:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005632:	430b      	orrs	r3, r1
 8005634:	e7e2      	b.n	80055fc <I2C_WaitOnTXISFlagUntilTimeout+0x50>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fe fda9 	bl	800418c <HAL_GetTick>
 800563a:	1b80      	subs	r0, r0, r6
 800563c:	4285      	cmp	r5, r0
 800563e:	d3f6      	bcc.n	800562e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8005640:	2d00      	cmp	r5, #0
 8005642:	d0f4      	beq.n	800562e <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 8005644:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005646:	6999      	ldr	r1, [r3, #24]
 8005648:	068a      	lsls	r2, r1, #26
 800564a:	d5f4      	bpl.n	8005636 <I2C_WaitOnTXISFlagUntilTimeout+0x8a>
 800564c:	e7be      	b.n	80055cc <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800564e:	bf00      	nop
 8005650:	fe00e800 	.word	0xfe00e800

08005654 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	4604      	mov	r4, r0
 8005658:	4616      	mov	r6, r2
 800565a:	460d      	mov	r5, r1
 800565c:	b929      	cbnz	r1, 800566a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 800565e:	e03d      	b.n	80056dc <I2C_WaitOnSTOPFlagUntilTimeout+0x88>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005660:	f7fe fd94 	bl	800418c <HAL_GetTick>
 8005664:	1b80      	subs	r0, r0, r6
 8005666:	4285      	cmp	r5, r0
 8005668:	d341      	bcc.n	80056ee <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	6999      	ldr	r1, [r3, #24]
 800566e:	0688      	lsls	r0, r1, #26
 8005670:	d441      	bmi.n	80056f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005672:	6999      	ldr	r1, [r3, #24]
 8005674:	06c9      	lsls	r1, r1, #27
 8005676:	d5f3      	bpl.n	8005660 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8005678:	1c68      	adds	r0, r5, #1
 800567a:	d124      	bne.n	80056c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	0691      	lsls	r1, r2, #26
 8005680:	d5fc      	bpl.n	800567c <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005682:	2110      	movs	r1, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005684:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005686:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005688:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 800568e:	bf44      	itt	mi
 8005690:	2200      	movmi	r2, #0
 8005692:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	07d1      	lsls	r1, r2, #31
 8005698:	d403      	bmi.n	80056a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	f042 0201 	orr.w	r2, r2, #1
 80056a0:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	4915      	ldr	r1, [pc, #84]	; (80056fc <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
 80056a6:	400a      	ands	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056ac:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ae:	f043 0304 	orr.w	r3, r3, #4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b2:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056b4:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80056b6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056be:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      return HAL_ERROR;
 80056c2:	2001      	movs	r0, #1
}
 80056c4:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	0692      	lsls	r2, r2, #26
 80056ca:	d4da      	bmi.n	8005682 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056cc:	f7fe fd5e 	bl	800418c <HAL_GetTick>
 80056d0:	1b80      	subs	r0, r0, r6
 80056d2:	4285      	cmp	r5, r0
 80056d4:	d30b      	bcc.n	80056ee <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 80056d6:	b155      	cbz	r5, 80056ee <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	e7cd      	b.n	8005678 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056dc:	6803      	ldr	r3, [r0, #0]
 80056de:	699a      	ldr	r2, [r3, #24]
 80056e0:	0692      	lsls	r2, r2, #26
 80056e2:	d408      	bmi.n	80056f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xa2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	06d2      	lsls	r2, r2, #27
 80056e8:	d4c6      	bmi.n	8005678 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ea:	f7fe fd4f 	bl	800418c <HAL_GetTick>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056f0:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056f2:	430b      	orrs	r3, r1
 80056f4:	e7dd      	b.n	80056b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x5e>
  return HAL_OK;
 80056f6:	2000      	movs	r0, #0
}
 80056f8:	bd70      	pop	{r4, r5, r6, pc}
 80056fa:	bf00      	nop
 80056fc:	fe00e800 	.word	0xfe00e800

08005700 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005700:	2800      	cmp	r0, #0
 8005702:	d04f      	beq.n	80057a4 <HAL_I2C_Init+0xa4>
{
 8005704:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005706:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800570a:	4604      	mov	r4, r0
 800570c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005710:	2b00      	cmp	r3, #0
 8005712:	d042      	beq.n	800579a <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 8005714:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005716:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005718:	2224      	movs	r2, #36	; 0x24
 800571a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800571e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005720:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8005722:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005726:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800572a:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800572c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800572e:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005730:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005736:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005738:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800573a:	d02a      	beq.n	8005792 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800573c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005740:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005742:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005744:	bf04      	itt	eq
 8005746:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800574a:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800574c:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800574e:	69a5      	ldr	r5, [r4, #24]
 8005750:	e9d4 2604 	ldrd	r2, r6, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005754:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8005758:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800575c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800575e:	4332      	orrs	r2, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005760:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005762:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005764:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005768:	6a25      	ldr	r5, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800576a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800576e:	4329      	orrs	r1, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005770:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005772:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005774:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005776:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005778:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 800577a:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800577e:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8005780:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005782:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005784:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005788:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800578a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 800578e:	4610      	mov	r0, r2
}
 8005790:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005796:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005798:	e7d8      	b.n	800574c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800579a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800579e:	f7fe fa2f 	bl	8003c00 <HAL_I2C_MspInit>
 80057a2:	e7b7      	b.n	8005714 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80057a4:	2001      	movs	r0, #1
}
 80057a6:	4770      	bx	lr

080057a8 <HAL_I2C_Mem_Write>:
{
 80057a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ac:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ae:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 80057b2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 80057b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b8:	2820      	cmp	r0, #32
 80057ba:	f040 80a6 	bne.w	800590a <HAL_I2C_Mem_Write+0x162>
    if ((pData == NULL) || (Size == 0U))
 80057be:	4699      	mov	r9, r3
 80057c0:	9b08      	ldr	r3, [sp, #32]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 809b 	beq.w	80058fe <HAL_I2C_Mem_Write+0x156>
 80057c8:	f1ba 0f00 	cmp.w	sl, #0
 80057cc:	f000 8097 	beq.w	80058fe <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 80057d0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	f000 8098 	beq.w	800590a <HAL_I2C_Mem_Write+0x162>
 80057da:	2301      	movs	r3, #1
 80057dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80057e0:	460d      	mov	r5, r1
 80057e2:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 80057e4:	f7fe fcd2 	bl	800418c <HAL_GetTick>
 80057e8:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80057ea:	e005      	b.n	80057f8 <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7fe fcce 	bl	800418c <HAL_GetTick>
 80057f0:	1b80      	subs	r0, r0, r6
 80057f2:	2819      	cmp	r0, #25
 80057f4:	f200 808c 	bhi.w	8005910 <HAL_I2C_Mem_Write+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f8:	6821      	ldr	r1, [r4, #0]
 80057fa:	698b      	ldr	r3, [r1, #24]
 80057fc:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8005800:	d1f4      	bne.n	80057ec <HAL_I2C_Mem_Write+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005802:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005804:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005806:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800580a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800580e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8005810:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005814:	6848      	ldr	r0, [r1, #4]
 8005816:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 80059fc <HAL_I2C_Mem_Write+0x254>
    hi2c->pBuffPtr  = pData;
 800581a:	9a08      	ldr	r2, [sp, #32]
 800581c:	6262      	str	r2, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2,
 800581e:	ea0c 0200 	and.w	r2, ip, r0
 8005822:	fa5f f089 	uxtb.w	r0, r9
 8005826:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800582a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800582e:	4328      	orrs	r0, r5
 8005830:	f040 4001 	orr.w	r0, r0, #2164260864	; 0x81000000
 8005834:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    hi2c->XferISR   = NULL;
 8005838:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800583a:	4632      	mov	r2, r6
  MODIFY_REG(hi2c->Instance->CR2,
 800583c:	6048      	str	r0, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800583e:	4639      	mov	r1, r7
 8005840:	4620      	mov	r0, r4
 8005842:	f7ff feb3 	bl	80055ac <I2C_WaitOnTXISFlagUntilTimeout>
 8005846:	2800      	cmp	r0, #0
 8005848:	f040 8094 	bne.w	8005974 <HAL_I2C_Mem_Write+0x1cc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800584c:	f1b9 0f01 	cmp.w	r9, #1
 8005850:	f040 8084 	bne.w	800595c <HAL_I2C_Mem_Write+0x1b4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005854:	6821      	ldr	r1, [r4, #0]
 8005856:	fa5f f288 	uxtb.w	r2, r8
 800585a:	628a      	str	r2, [r1, #40]	; 0x28
 800585c:	1c78      	adds	r0, r7, #1
 800585e:	d165      	bne.n	800592c <HAL_I2C_Mem_Write+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005860:	698b      	ldr	r3, [r1, #24]
 8005862:	061a      	lsls	r2, r3, #24
 8005864:	d5fc      	bpl.n	8005860 <HAL_I2C_Mem_Write+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005866:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	2bff      	cmp	r3, #255	; 0xff
 800586c:	d86a      	bhi.n	8005944 <HAL_I2C_Mem_Write+0x19c>
      hi2c->XferSize = hi2c->XferCount;
 800586e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005870:	4860      	ldr	r0, [pc, #384]	; (80059f4 <HAL_I2C_Mem_Write+0x24c>)
 8005872:	684b      	ldr	r3, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 8005874:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 8005876:	4003      	ands	r3, r0
 8005878:	432b      	orrs	r3, r5
 800587a:	b2d0      	uxtb	r0, r2
 800587c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005884:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005886:	604b      	str	r3, [r1, #4]
 8005888:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80059f4 <HAL_I2C_Mem_Write+0x24c>
 800588c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005a00 <HAL_I2C_Mem_Write+0x258>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005890:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005894:	e004      	b.n	80058a0 <HAL_I2C_Mem_Write+0xf8>
    } while (hi2c->XferCount > 0U);
 8005896:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 808b 	beq.w	80059b6 <HAL_I2C_Mem_Write+0x20e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a0:	4632      	mov	r2, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	4620      	mov	r0, r4
 80058a6:	f7ff fe81 	bl	80055ac <I2C_WaitOnTXISFlagUntilTimeout>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f040 8081 	bne.w	80059b2 <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058b2:	6822      	ldr	r2, [r4, #0]
 80058b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058b8:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80058ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80058bc:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058c6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058cc:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80058ce:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058d0:	2900      	cmp	r1, #0
 80058d2:	d0e0      	beq.n	8005896 <HAL_I2C_Mem_Write+0xee>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1de      	bne.n	8005896 <HAL_I2C_Mem_Write+0xee>
 80058d8:	1c78      	adds	r0, r7, #1
 80058da:	d150      	bne.n	800597e <HAL_I2C_Mem_Write+0x1d6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058dc:	6993      	ldr	r3, [r2, #24]
 80058de:	0619      	lsls	r1, r3, #24
 80058e0:	d5fc      	bpl.n	80058dc <HAL_I2C_Mem_Write+0x134>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2bff      	cmp	r3, #255	; 0xff
 80058e8:	d955      	bls.n	8005996 <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2,
 80058ea:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ec:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80058f0:	ea03 0308 	and.w	r3, r3, r8
 80058f4:	432b      	orrs	r3, r5
 80058f6:	ea43 030a 	orr.w	r3, r3, sl
 80058fa:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80058fc:	e7cb      	b.n	8005896 <HAL_I2C_Mem_Write+0xee>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005902:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005904:	2001      	movs	r0, #1
}
 8005906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800590a:	2002      	movs	r0, #2
}
 800590c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005910:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005912:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005914:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005916:	430b      	orrs	r3, r1
 8005918:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800591a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800591e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005922:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 8005926:	2001      	movs	r0, #1
}
 8005928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800592c:	698b      	ldr	r3, [r1, #24]
 800592e:	061b      	lsls	r3, r3, #24
 8005930:	d499      	bmi.n	8005866 <HAL_I2C_Mem_Write+0xbe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005932:	f7fe fc2b 	bl	800418c <HAL_GetTick>
 8005936:	1b80      	subs	r0, r0, r6
 8005938:	4287      	cmp	r7, r0
 800593a:	d351      	bcc.n	80059e0 <HAL_I2C_Mem_Write+0x238>
 800593c:	2f00      	cmp	r7, #0
 800593e:	d04f      	beq.n	80059e0 <HAL_I2C_Mem_Write+0x238>
 8005940:	6821      	ldr	r1, [r4, #0]
 8005942:	e78b      	b.n	800585c <HAL_I2C_Mem_Write+0xb4>
  MODIFY_REG(hi2c->Instance->CR2,
 8005944:	684b      	ldr	r3, [r1, #4]
 8005946:	4a2b      	ldr	r2, [pc, #172]	; (80059f4 <HAL_I2C_Mem_Write+0x24c>)
 8005948:	4013      	ands	r3, r2
 800594a:	432b      	orrs	r3, r5
 800594c:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8005950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005954:	22ff      	movs	r2, #255	; 0xff
 8005956:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005958:	604b      	str	r3, [r1, #4]
}
 800595a:	e795      	b.n	8005888 <HAL_I2C_Mem_Write+0xe0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005962:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005964:	4639      	mov	r1, r7
 8005966:	4632      	mov	r2, r6
 8005968:	4620      	mov	r0, r4
 800596a:	f7ff fe1f 	bl	80055ac <I2C_WaitOnTXISFlagUntilTimeout>
 800596e:	2800      	cmp	r0, #0
 8005970:	f43f af70 	beq.w	8005854 <HAL_I2C_Mem_Write+0xac>
      __HAL_UNLOCK(hi2c);
 8005974:	2300      	movs	r3, #0
 8005976:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800597a:	2001      	movs	r0, #1
 800597c:	e7c3      	b.n	8005906 <HAL_I2C_Mem_Write+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800597e:	6993      	ldr	r3, [r2, #24]
 8005980:	061b      	lsls	r3, r3, #24
 8005982:	d4ae      	bmi.n	80058e2 <HAL_I2C_Mem_Write+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005984:	f7fe fc02 	bl	800418c <HAL_GetTick>
 8005988:	1b80      	subs	r0, r0, r6
 800598a:	4287      	cmp	r7, r0
 800598c:	d3c0      	bcc.n	8005910 <HAL_I2C_Mem_Write+0x168>
 800598e:	2f00      	cmp	r7, #0
 8005990:	d0be      	beq.n	8005910 <HAL_I2C_Mem_Write+0x168>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	e7a0      	b.n	80058d8 <HAL_I2C_Mem_Write+0x130>
          hi2c->XferSize = hi2c->XferCount;
 8005996:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005998:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800599a:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 800599c:	ea03 0308 	and.w	r3, r3, r8
 80059a0:	432b      	orrs	r3, r5
 80059a2:	b2c8      	uxtb	r0, r1
 80059a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80059a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80059ac:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80059ae:	6053      	str	r3, [r2, #4]
}
 80059b0:	e771      	b.n	8005896 <HAL_I2C_Mem_Write+0xee>
        return HAL_ERROR;
 80059b2:	2001      	movs	r0, #1
 80059b4:	e7a7      	b.n	8005906 <HAL_I2C_Mem_Write+0x15e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059b6:	4632      	mov	r2, r6
 80059b8:	4639      	mov	r1, r7
 80059ba:	4620      	mov	r0, r4
 80059bc:	f7ff fe4a 	bl	8005654 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d1f6      	bne.n	80059b2 <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059c4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80059c6:	4d0c      	ldr	r5, [pc, #48]	; (80059f8 <HAL_I2C_Mem_Write+0x250>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059c8:	2120      	movs	r1, #32
 80059ca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	402a      	ands	r2, r5
 80059d0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80059d2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80059d6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059da:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80059de:	e792      	b.n	8005906 <HAL_I2C_Mem_Write+0x15e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059e2:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e4:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e6:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ee:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    return HAL_ERROR;
 80059f2:	e7bf      	b.n	8005974 <HAL_I2C_Mem_Write+0x1cc>
 80059f4:	fc009c00 	.word	0xfc009c00
 80059f8:	fe00e800 	.word	0xfe00e800
 80059fc:	fc009800 	.word	0xfc009800
 8005a00:	01ff0000 	.word	0x01ff0000

08005a04 <HAL_I2C_Mem_Read>:
{
 8005a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a0a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8005a0e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 8005a12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a14:	2820      	cmp	r0, #32
 8005a16:	f040 80a9 	bne.w	8005b6c <HAL_I2C_Mem_Read+0x168>
    if ((pData == NULL) || (Size == 0U))
 8005a1a:	4699      	mov	r9, r3
 8005a1c:	9b08      	ldr	r3, [sp, #32]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 809e 	beq.w	8005b60 <HAL_I2C_Mem_Read+0x15c>
 8005a24:	f1ba 0f00 	cmp.w	sl, #0
 8005a28:	f000 809a 	beq.w	8005b60 <HAL_I2C_Mem_Read+0x15c>
    __HAL_LOCK(hi2c);
 8005a2c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	f000 809b 	beq.w	8005b6c <HAL_I2C_Mem_Read+0x168>
 8005a36:	2301      	movs	r3, #1
 8005a38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005a3c:	460e      	mov	r6, r1
 8005a3e:	4690      	mov	r8, r2
    tickstart = HAL_GetTick();
 8005a40:	f7fe fba4 	bl	800418c <HAL_GetTick>
 8005a44:	4607      	mov	r7, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8005a46:	e004      	b.n	8005a52 <HAL_I2C_Mem_Read+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a48:	f7fe fba0 	bl	800418c <HAL_GetTick>
 8005a4c:	1bc0      	subs	r0, r0, r7
 8005a4e:	2819      	cmp	r0, #25
 8005a50:	d878      	bhi.n	8005b44 <HAL_I2C_Mem_Read+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a52:	6821      	ldr	r1, [r4, #0]
 8005a54:	698b      	ldr	r3, [r1, #24]
 8005a56:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8005a5a:	d1f5      	bne.n	8005a48 <HAL_I2C_Mem_Read+0x44>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a5c:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a5e:	2240      	movs	r2, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a60:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a64:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a68:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8005a6a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005a6e:	6848      	ldr	r0, [r1, #4]
 8005a70:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 8005c54 <HAL_I2C_Mem_Read+0x250>
    hi2c->pBuffPtr  = pData;
 8005a74:	9a08      	ldr	r2, [sp, #32]
 8005a76:	6262      	str	r2, [r4, #36]	; 0x24
  MODIFY_REG(hi2c->Instance->CR2,
 8005a78:	ea0c 0200 	and.w	r2, ip, r0
 8005a7c:	fa5f f089 	uxtb.w	r0, r9
 8005a80:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8005a84:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005a88:	4330      	orrs	r0, r6
 8005a8a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005a8e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    hi2c->XferISR   = NULL;
 8005a92:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a94:	463a      	mov	r2, r7
  MODIFY_REG(hi2c->Instance->CR2,
 8005a96:	6048      	str	r0, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a98:	4629      	mov	r1, r5
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f7ff fd86 	bl	80055ac <I2C_WaitOnTXISFlagUntilTimeout>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	f040 80bc 	bne.w	8005c1e <HAL_I2C_Mem_Read+0x21a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aa6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005aaa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aac:	f040 8095 	bne.w	8005bda <HAL_I2C_Mem_Read+0x1d6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ab0:	fa5f f288 	uxtb.w	r2, r8
 8005ab4:	629a      	str	r2, [r3, #40]	; 0x28
 8005ab6:	1c68      	adds	r0, r5, #1
 8005ab8:	d15b      	bne.n	8005b72 <HAL_I2C_Mem_Read+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aba:	699a      	ldr	r2, [r3, #24]
 8005abc:	0651      	lsls	r1, r2, #25
 8005abe:	d5fc      	bpl.n	8005aba <HAL_I2C_Mem_Read+0xb6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ac0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005ac2:	b292      	uxth	r2, r2
 8005ac4:	2aff      	cmp	r2, #255	; 0xff
 8005ac6:	d87e      	bhi.n	8005bc6 <HAL_I2C_Mem_Read+0x1c2>
      hi2c->XferSize = hi2c->XferCount;
 8005ac8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005aca:	4862      	ldr	r0, [pc, #392]	; (8005c54 <HAL_I2C_Mem_Read+0x250>)
 8005acc:	685a      	ldr	r2, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 8005ace:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 8005ad0:	4002      	ands	r2, r0
 8005ad2:	4332      	orrs	r2, r6
 8005ad4:	b2c8      	uxtb	r0, r1
 8005ad6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005ada:	f042 4202 	orr.w	r2, r2, #2181038080	; 0x82000000
 8005ade:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 8005ae2:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	1c68      	adds	r0, r5, #1
 8005ae8:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8005c60 <HAL_I2C_Mem_Read+0x25c>
 8005aec:	f8df a174 	ldr.w	sl, [pc, #372]	; 8005c64 <HAL_I2C_Mem_Read+0x260>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005af0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005af4:	d11c      	bne.n	8005b30 <HAL_I2C_Mem_Read+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005af6:	699a      	ldr	r2, [r3, #24]
 8005af8:	0751      	lsls	r1, r2, #29
 8005afa:	d5fc      	bpl.n	8005af6 <HAL_I2C_Mem_Read+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005afc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005b02:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005b06:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005b08:	3901      	subs	r1, #1
 8005b0a:	b289      	uxth	r1, r1
 8005b0c:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b0e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8005b14:	3201      	adds	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b16:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8005b18:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005b1a:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b1c:	b109      	cbz	r1, 8005b22 <HAL_I2C_Mem_Read+0x11e>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d03d      	beq.n	8005b9e <HAL_I2C_Mem_Read+0x19a>
    } while (hi2c->XferCount > 0U);
 8005b22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d07e      	beq.n	8005c28 <HAL_I2C_Mem_Read+0x224>
 8005b2a:	1c68      	adds	r0, r5, #1
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	d0e2      	beq.n	8005af6 <HAL_I2C_Mem_Read+0xf2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	0752      	lsls	r2, r2, #29
 8005b34:	d4e2      	bmi.n	8005afc <HAL_I2C_Mem_Read+0xf8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b36:	f7fe fb29 	bl	800418c <HAL_GetTick>
 8005b3a:	1bc0      	subs	r0, r0, r7
 8005b3c:	4285      	cmp	r5, r0
 8005b3e:	d301      	bcc.n	8005b44 <HAL_I2C_Mem_Read+0x140>
 8005b40:	2d00      	cmp	r5, #0
 8005b42:	d1f2      	bne.n	8005b2a <HAL_I2C_Mem_Read+0x126>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b44:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b46:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b48:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b4a:	430b      	orrs	r3, r1
 8005b4c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005b4e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8005b52:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b56:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 8005b5a:	2001      	movs	r0, #1
}
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b64:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005b66:	2001      	movs	r0, #1
}
 8005b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8005b6c:	2002      	movs	r0, #2
}
 8005b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b72:	699a      	ldr	r2, [r3, #24]
 8005b74:	0652      	lsls	r2, r2, #25
 8005b76:	d4a3      	bmi.n	8005ac0 <HAL_I2C_Mem_Read+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b78:	f7fe fb08 	bl	800418c <HAL_GetTick>
 8005b7c:	1bc0      	subs	r0, r0, r7
 8005b7e:	4285      	cmp	r5, r0
 8005b80:	d344      	bcc.n	8005c0c <HAL_I2C_Mem_Read+0x208>
 8005b82:	2d00      	cmp	r5, #0
 8005b84:	d042      	beq.n	8005c0c <HAL_I2C_Mem_Read+0x208>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	e795      	b.n	8005ab6 <HAL_I2C_Mem_Read+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b8a:	6993      	ldr	r3, [r2, #24]
 8005b8c:	061b      	lsls	r3, r3, #24
 8005b8e:	d40c      	bmi.n	8005baa <HAL_I2C_Mem_Read+0x1a6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b90:	f7fe fafc 	bl	800418c <HAL_GetTick>
 8005b94:	1bc0      	subs	r0, r0, r7
 8005b96:	4285      	cmp	r5, r0
 8005b98:	d3d4      	bcc.n	8005b44 <HAL_I2C_Mem_Read+0x140>
 8005b9a:	2d00      	cmp	r5, #0
 8005b9c:	d0d2      	beq.n	8005b44 <HAL_I2C_Mem_Read+0x140>
 8005b9e:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	d1f2      	bne.n	8005b8a <HAL_I2C_Mem_Read+0x186>
 8005ba4:	6993      	ldr	r3, [r2, #24]
 8005ba6:	0619      	lsls	r1, r3, #24
 8005ba8:	d5fc      	bpl.n	8005ba4 <HAL_I2C_Mem_Read+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005baa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2bff      	cmp	r3, #255	; 0xff
 8005bb0:	d91e      	bls.n	8005bf0 <HAL_I2C_Mem_Read+0x1ec>
  MODIFY_REG(hi2c->Instance->CR2,
 8005bb2:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bb4:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005bb8:	ea03 0308 	and.w	r3, r3, r8
 8005bbc:	4333      	orrs	r3, r6
 8005bbe:	ea43 030a 	orr.w	r3, r3, sl
 8005bc2:	6053      	str	r3, [r2, #4]
}
 8005bc4:	e7ad      	b.n	8005b22 <HAL_I2C_Mem_Read+0x11e>
  MODIFY_REG(hi2c->Instance->CR2,
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	4822      	ldr	r0, [pc, #136]	; (8005c54 <HAL_I2C_Mem_Read+0x250>)
 8005bca:	4923      	ldr	r1, [pc, #140]	; (8005c58 <HAL_I2C_Mem_Read+0x254>)
 8005bcc:	4002      	ands	r2, r0
 8005bce:	4332      	orrs	r2, r6
 8005bd0:	4311      	orrs	r1, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd2:	22ff      	movs	r2, #255	; 0xff
 8005bd4:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005bd6:	6059      	str	r1, [r3, #4]
}
 8005bd8:	e785      	b.n	8005ae6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bda:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be0:	4629      	mov	r1, r5
 8005be2:	463a      	mov	r2, r7
 8005be4:	4620      	mov	r0, r4
 8005be6:	f7ff fce1 	bl	80055ac <I2C_WaitOnTXISFlagUntilTimeout>
 8005bea:	b9c0      	cbnz	r0, 8005c1e <HAL_I2C_Mem_Read+0x21a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	e75f      	b.n	8005ab0 <HAL_I2C_Mem_Read+0xac>
          hi2c->XferSize = hi2c->XferCount;
 8005bf0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005bf2:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8005bf4:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2,
 8005bf6:	ea03 0308 	and.w	r3, r3, r8
 8005bfa:	4333      	orrs	r3, r6
 8005bfc:	b2c8      	uxtb	r0, r1
 8005bfe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8005c06:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005c08:	6053      	str	r3, [r2, #4]
}
 8005c0a:	e78a      	b.n	8005b22 <HAL_I2C_Mem_Read+0x11e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c0e:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c10:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c12:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c14:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c16:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005c24:	2001      	movs	r0, #1
 8005c26:	e79f      	b.n	8005b68 <HAL_I2C_Mem_Read+0x164>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c28:	463a      	mov	r2, r7
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7ff fd11 	bl	8005654 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c32:	b968      	cbnz	r0, 8005c50 <HAL_I2C_Mem_Read+0x24c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c34:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005c36:	4d09      	ldr	r5, [pc, #36]	; (8005c5c <HAL_I2C_Mem_Read+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c38:	2120      	movs	r1, #32
 8005c3a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	402a      	ands	r2, r5
 8005c40:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c42:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005c46:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c4a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005c4e:	e78b      	b.n	8005b68 <HAL_I2C_Mem_Read+0x164>
      return HAL_ERROR;
 8005c50:	2001      	movs	r0, #1
 8005c52:	e789      	b.n	8005b68 <HAL_I2C_Mem_Read+0x164>
 8005c54:	fc009800 	.word	0xfc009800
 8005c58:	81ff2400 	.word	0x81ff2400
 8005c5c:	fe00e800 	.word	0xfe00e800
 8005c60:	fc009c00 	.word	0xfc009c00
 8005c64:	01ff0000 	.word	0x01ff0000

08005c68 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c68:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005c6c:	2a20      	cmp	r2, #32
 8005c6e:	d121      	bne.n	8005cb4 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
{
 8005c70:	b430      	push	{r4, r5}
 8005c72:	b2d4      	uxtb	r4, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c74:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005c78:	2a01      	cmp	r2, #1
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	d01c      	beq.n	8005cb8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c7e:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c80:	2024      	movs	r0, #36	; 0x24
 8005c82:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8005c86:	6810      	ldr	r0, [r2, #0]
 8005c88:	f020 0001 	bic.w	r0, r0, #1
 8005c8c:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c8e:	6810      	ldr	r0, [r2, #0]
 8005c90:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8005c94:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c96:	6810      	ldr	r0, [r2, #0]
 8005c98:	4301      	orrs	r1, r0
 8005c9a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c9c:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c9e:	2500      	movs	r5, #0
    __HAL_I2C_ENABLE(hi2c);
 8005ca0:	f041 0101 	orr.w	r1, r1, #1
 8005ca4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ca6:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005caa:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40

    return HAL_OK;
 8005cae:	4628      	mov	r0, r5
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005cb0:	bc30      	pop	{r4, r5}
 8005cb2:	4770      	bx	lr
    return HAL_BUSY;
 8005cb4:	2002      	movs	r0, #2
}
 8005cb6:	4770      	bx	lr
    return HAL_BUSY;
 8005cb8:	2002      	movs	r0, #2
}
 8005cba:	bc30      	pop	{r4, r5}
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop

08005cc0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cc0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005cc4:	2a20      	cmp	r2, #32
 8005cc6:	d120      	bne.n	8005d0a <HAL_I2CEx_ConfigDigitalFilter+0x4a>
{
 8005cc8:	b430      	push	{r4, r5}
 8005cca:	b2d5      	uxtb	r5, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ccc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005cd0:	2a01      	cmp	r2, #1
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	d01b      	beq.n	8005d0e <HAL_I2CEx_ConfigDigitalFilter+0x4e>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cd6:	681a      	ldr	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd8:	2024      	movs	r0, #36	; 0x24
 8005cda:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8005cde:	6810      	ldr	r0, [r2, #0]
 8005ce0:	f020 0001 	bic.w	r0, r0, #1
 8005ce4:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ce6:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ce8:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cec:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cf0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cf2:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf4:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 8005cf6:	f041 0101 	orr.w	r1, r1, #1
 8005cfa:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	f883 5041 	strb.w	r5, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005d00:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40

    return HAL_OK;
 8005d04:	4620      	mov	r0, r4
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005d06:	bc30      	pop	{r4, r5}
 8005d08:	4770      	bx	lr
    return HAL_BUSY;
 8005d0a:	2002      	movs	r0, #2
}
 8005d0c:	4770      	bx	lr
    return HAL_BUSY;
 8005d0e:	2002      	movs	r0, #2
}
 8005d10:	bc30      	pop	{r4, r5}
 8005d12:	4770      	bx	lr

08005d14 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005d14:	2800      	cmp	r0, #0
 8005d16:	d07d      	beq.n	8005e14 <HAL_OPAMP_Init+0x100>
{
 8005d18:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005d1a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005d1e:	2b05      	cmp	r3, #5
{
 8005d20:	b082      	sub	sp, #8
 8005d22:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005d24:	d057      	beq.n	8005dd6 <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005d26:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d053      	beq.n	8005dd6 <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d2e:	4b3a      	ldr	r3, [pc, #232]	; (8005e18 <HAL_OPAMP_Init+0x104>)
 8005d30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	661a      	str	r2, [r3, #96]	; 0x60
 8005d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005d42:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005d46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d4a:	b90b      	cbnz	r3, 8005d50 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005d4c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7fd ff8d 	bl	8003c70 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005d56:	68a3      	ldr	r3, [r4, #8]
 8005d58:	f023 0220 	bic.w	r2, r3, #32
 8005d5c:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005d5e:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005d60:	d03c      	beq.n	8005ddc <HAL_OPAMP_Init+0xc8>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005d62:	6860      	ldr	r0, [r4, #4]
 8005d64:	68e6      	ldr	r6, [r4, #12]
 8005d66:	6811      	ldr	r1, [r2, #0]
 8005d68:	6925      	ldr	r5, [r4, #16]
 8005d6a:	4303      	orrs	r3, r0
 8005d6c:	4333      	orrs	r3, r6
 8005d6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005d70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d72:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8005d74:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8005d78:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8005d7a:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8005d7c:	4333      	orrs	r3, r6
 8005d7e:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR,
 8005d82:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005d84:	432b      	orrs	r3, r5
 8005d86:	4925      	ldr	r1, [pc, #148]	; (8005e1c <HAL_OPAMP_Init+0x108>)
 8005d88:	6815      	ldr	r5, [r2, #0]
 8005d8a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8005d8e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005d92:	7d20      	ldrb	r0, [r4, #20]
 8005d94:	4029      	ands	r1, r5
 8005d96:	2801      	cmp	r0, #1
 8005d98:	ea43 0301 	orr.w	r3, r3, r1
 8005d9c:	bf0c      	ite	eq
 8005d9e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8005da2:	2100      	movne	r1, #0
 8005da4:	430b      	orrs	r3, r1
 8005da6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005da8:	6993      	ldr	r3, [r2, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	db09      	blt.n	8005dc2 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005dae:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8005db2:	6a20      	ldr	r0, [r4, #32]
 8005db4:	6991      	ldr	r1, [r2, #24]
 8005db6:	432b      	orrs	r3, r5
 8005db8:	4303      	orrs	r3, r0
 8005dba:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005dc2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8005dc6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005dca:	bb03      	cbnz	r3, 8005e0e <HAL_OPAMP_Init+0xfa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8005dd2:	b002      	add	sp, #8
 8005dd4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005dd6:	2001      	movs	r0, #1
}
 8005dd8:	b002      	add	sp, #8
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8005ddc:	6866      	ldr	r6, [r4, #4]
 8005dde:	6811      	ldr	r1, [r2, #0]
 8005de0:	6920      	ldr	r0, [r4, #16]
 8005de2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005de4:	4333      	orrs	r3, r6
 8005de6:	4303      	orrs	r3, r0
 8005de8:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8005dec:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 8005dee:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8005df0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8005df2:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005df4:	4303      	orrs	r3, r0
 8005df6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005df8:	6816      	ldr	r6, [r2, #0]
 8005dfa:	4908      	ldr	r1, [pc, #32]	; (8005e1c <HAL_OPAMP_Init+0x108>)
 8005dfc:	432b      	orrs	r3, r5
 8005dfe:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005e00:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8005e04:	4031      	ands	r1, r6
 8005e06:	7d20      	ldrb	r0, [r4, #20]
 8005e08:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005e0c:	e7c3      	b.n	8005d96 <HAL_OPAMP_Init+0x82>
    return status;
 8005e0e:	2000      	movs	r0, #0
}
 8005e10:	b002      	add	sp, #8
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005e14:	2001      	movs	r0, #1
}
 8005e16:	4770      	bx	lr
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	e0003e11 	.word	0xe0003e11

08005e20 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e20:	4a3b      	ldr	r2, [pc, #236]	; (8005f10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8005e22:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e24:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e26:	b968      	cbnz	r0, 8005e44 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e30:	d014      	beq.n	8005e5c <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e32:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8005e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e42:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e44:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005e48:	d02f      	beq.n	8005eaa <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e52:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005e54:	2000      	movs	r0, #0
}
 8005e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e5a:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e5c:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e60:	4b2c      	ldr	r3, [pc, #176]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005e62:	482d      	ldr	r0, [pc, #180]	; (8005f18 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e64:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005e68:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e6c:	6811      	ldr	r1, [r2, #0]
 8005e6e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005e72:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005e76:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e78:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e7a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e7c:	2332      	movs	r3, #50	; 0x32
 8005e7e:	fb03 f304 	mul.w	r3, r3, r4
 8005e82:	fba0 0303 	umull	r0, r3, r0, r3
 8005e86:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e88:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e8a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e8e:	d506      	bpl.n	8005e9e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005e90:	e000      	b.n	8005e94 <HAL_PWREx_ControlVoltageScaling+0x74>
 8005e92:	b123      	cbz	r3, 8005e9e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005e94:	6951      	ldr	r1, [r2, #20]
 8005e96:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005e98:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e9c:	d4f9      	bmi.n	8005e92 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e9e:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	055c      	lsls	r4, r3, #21
 8005ea4:	d5d6      	bpl.n	8005e54 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8005ea6:	2003      	movs	r0, #3
 8005ea8:	e7c9      	b.n	8005e3e <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb2:	d009      	beq.n	8005ec8 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005eb4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8005eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8005ec0:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ec2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005ec6:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ec8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005ece:	4812      	ldr	r0, [pc, #72]	; (8005f18 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ed0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005ed4:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ed8:	6811      	ldr	r1, [r2, #0]
 8005eda:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005ede:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005ee2:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ee4:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ee6:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ee8:	2332      	movs	r3, #50	; 0x32
 8005eea:	fb03 f304 	mul.w	r3, r3, r4
 8005eee:	fba0 0303 	umull	r0, r3, r0, r3
 8005ef2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ef4:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ef6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005efa:	d5d0      	bpl.n	8005e9e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005efc:	e001      	b.n	8005f02 <HAL_PWREx_ControlVoltageScaling+0xe2>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0cd      	beq.n	8005e9e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005f02:	6951      	ldr	r1, [r2, #20]
 8005f04:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005f06:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f0a:	d5c8      	bpl.n	8005e9e <HAL_PWREx_ControlVoltageScaling+0x7e>
 8005f0c:	e7f7      	b.n	8005efe <HAL_PWREx_ControlVoltageScaling+0xde>
 8005f0e:	bf00      	nop
 8005f10:	40007000 	.word	0x40007000
 8005f14:	20000658 	.word	0x20000658
 8005f18:	431bde83 	.word	0x431bde83

08005f1c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005f1c:	4a02      	ldr	r2, [pc, #8]	; (8005f28 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005f1e:	6893      	ldr	r3, [r2, #8]
 8005f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f24:	6093      	str	r3, [r2, #8]
}
 8005f26:	4770      	bx	lr
 8005f28:	40007000 	.word	0x40007000

08005f2c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f000 81c3 	beq.w	80062b8 <HAL_RCC_OscConfig+0x38c>
{
 8005f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f36:	6803      	ldr	r3, [r0, #0]
 8005f38:	07d9      	lsls	r1, r3, #31
{
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f3e:	d52d      	bpl.n	8005f9c <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f40:	49b5      	ldr	r1, [pc, #724]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 8005f42:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f44:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f46:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f4a:	2a0c      	cmp	r2, #12
 8005f4c:	f000 810a 	beq.w	8006164 <HAL_RCC_OscConfig+0x238>
 8005f50:	2a08      	cmp	r2, #8
 8005f52:	f000 810c 	beq.w	800616e <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	f000 8133 	beq.w	80061c6 <HAL_RCC_OscConfig+0x29a>
 8005f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f64:	f000 819b 	beq.w	800629e <HAL_RCC_OscConfig+0x372>
 8005f68:	4dab      	ldr	r5, [pc, #684]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 8005f6a:	682a      	ldr	r2, [r5, #0]
 8005f6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f70:	602a      	str	r2, [r5, #0]
 8005f72:	682a      	ldr	r2, [r5, #0]
 8005f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f78:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 8128 	bne.w	80061d0 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f80:	f7fe f904 	bl	800418c <HAL_GetTick>
 8005f84:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f86:	e005      	b.n	8005f94 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fe f900 	bl	800418c <HAL_GetTick>
 8005f8c:	1b80      	subs	r0, r0, r6
 8005f8e:	2864      	cmp	r0, #100	; 0x64
 8005f90:	f200 813b 	bhi.w	800620a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	039f      	lsls	r7, r3, #14
 8005f98:	d4f6      	bmi.n	8005f88 <HAL_RCC_OscConfig+0x5c>
 8005f9a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9c:	079e      	lsls	r6, r3, #30
 8005f9e:	d528      	bpl.n	8005ff2 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fa0:	4a9d      	ldr	r2, [pc, #628]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 8005fa2:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fa4:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fa6:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005faa:	2b0c      	cmp	r3, #12
 8005fac:	f000 80ec 	beq.w	8006188 <HAL_RCC_OscConfig+0x25c>
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	f000 80ee 	beq.w	8006192 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fb6:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fb8:	4d97      	ldr	r5, [pc, #604]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8116 	beq.w	80061ec <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc6:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc8:	f7fe f8e0 	bl	800418c <HAL_GetTick>
 8005fcc:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fce:	e005      	b.n	8005fdc <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd0:	f7fe f8dc 	bl	800418c <HAL_GetTick>
 8005fd4:	1b80      	subs	r0, r0, r6
 8005fd6:	2802      	cmp	r0, #2
 8005fd8:	f200 8117 	bhi.w	800620a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	0558      	lsls	r0, r3, #21
 8005fe0:	d5f6      	bpl.n	8005fd0 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe2:	686b      	ldr	r3, [r5, #4]
 8005fe4:	6922      	ldr	r2, [r4, #16]
 8005fe6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005fea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fee:	606b      	str	r3, [r5, #4]
 8005ff0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ff2:	071a      	lsls	r2, r3, #28
 8005ff4:	d519      	bpl.n	800602a <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ff6:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff8:	4d87      	ldr	r5, [pc, #540]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 809e 	beq.w	800613c <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8006000:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600c:	f7fe f8be 	bl	800418c <HAL_GetTick>
 8006010:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006012:	e005      	b.n	8006020 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006014:	f7fe f8ba 	bl	800418c <HAL_GetTick>
 8006018:	1b80      	subs	r0, r0, r6
 800601a:	2802      	cmp	r0, #2
 800601c:	f200 80f5 	bhi.w	800620a <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006020:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006024:	079f      	lsls	r7, r3, #30
 8006026:	d5f5      	bpl.n	8006014 <HAL_RCC_OscConfig+0xe8>
 8006028:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800602a:	0759      	lsls	r1, r3, #29
 800602c:	d541      	bpl.n	80060b2 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800602e:	4b7a      	ldr	r3, [pc, #488]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 8006030:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006032:	00d2      	lsls	r2, r2, #3
 8006034:	f100 80ed 	bmi.w	8006212 <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800603a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800603e:	659a      	str	r2, [r3, #88]	; 0x58
 8006040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800604a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800604c:	4e73      	ldr	r6, [pc, #460]	; (800621c <HAL_RCC_OscConfig+0x2f0>)
 800604e:	6833      	ldr	r3, [r6, #0]
 8006050:	05df      	lsls	r7, r3, #23
 8006052:	f140 8113 	bpl.w	800627c <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006056:	68a3      	ldr	r3, [r4, #8]
 8006058:	2b01      	cmp	r3, #1
 800605a:	f000 80e3 	beq.w	8006224 <HAL_RCC_OscConfig+0x2f8>
 800605e:	2b05      	cmp	r3, #5
 8006060:	f000 8169 	beq.w	8006336 <HAL_RCC_OscConfig+0x40a>
 8006064:	4e6c      	ldr	r6, [pc, #432]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 8006066:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8006072:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8006076:	f022 0204 	bic.w	r2, r2, #4
 800607a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 80d7 	bne.w	8006232 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006084:	f7fe f882 	bl	800418c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006088:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800608c:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800608e:	e005      	b.n	800609c <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006090:	f7fe f87c 	bl	800418c <HAL_GetTick>
 8006094:	1bc0      	subs	r0, r0, r7
 8006096:	4540      	cmp	r0, r8
 8006098:	f200 80b7 	bhi.w	800620a <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800609c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80060a0:	079a      	lsls	r2, r3, #30
 80060a2:	d4f5      	bmi.n	8006090 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060a4:	b125      	cbz	r5, 80060b0 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a6:	4a5c      	ldr	r2, [pc, #368]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 80060a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80060aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ae:	6593      	str	r3, [r2, #88]	; 0x58
 80060b0:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060b2:	069b      	lsls	r3, r3, #26
 80060b4:	d518      	bpl.n	80060e8 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060b6:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060b8:	4d57      	ldr	r5, [pc, #348]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80ca 	beq.w	8006254 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80060c0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80060c4:	f043 0301 	orr.w	r3, r3, #1
 80060c8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060cc:	f7fe f85e 	bl	800418c <HAL_GetTick>
 80060d0:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060d2:	e005      	b.n	80060e0 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060d4:	f7fe f85a 	bl	800418c <HAL_GetTick>
 80060d8:	1b80      	subs	r0, r0, r6
 80060da:	2802      	cmp	r0, #2
 80060dc:	f200 8095 	bhi.w	800620a <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060e0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80060e4:	079f      	lsls	r7, r3, #30
 80060e6:	d5f5      	bpl.n	80060d4 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060e8:	69e0      	ldr	r0, [r4, #28]
 80060ea:	b318      	cbz	r0, 8006134 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ec:	4d4a      	ldr	r5, [pc, #296]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 80060ee:	68ab      	ldr	r3, [r5, #8]
 80060f0:	f003 030c 	and.w	r3, r3, #12
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	f000 812c 	beq.w	8006352 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060fa:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060fc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80060fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006102:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006104:	f000 80da 	beq.w	80062bc <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006108:	68eb      	ldr	r3, [r5, #12]
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006110:	68eb      	ldr	r3, [r5, #12]
 8006112:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611a:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611c:	f7fe f836 	bl	800418c <HAL_GetTick>
 8006120:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006122:	e004      	b.n	800612e <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006124:	f7fe f832 	bl	800418c <HAL_GetTick>
 8006128:	1b00      	subs	r0, r0, r4
 800612a:	2802      	cmp	r0, #2
 800612c:	d86d      	bhi.n	800620a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800612e:	682b      	ldr	r3, [r5, #0]
 8006130:	019b      	lsls	r3, r3, #6
 8006132:	d4f7      	bmi.n	8006124 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8006134:	2000      	movs	r0, #0
}
 8006136:	b002      	add	sp, #8
 8006138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800613c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006148:	f7fe f820 	bl	800418c <HAL_GetTick>
 800614c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800614e:	e004      	b.n	800615a <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006150:	f7fe f81c 	bl	800418c <HAL_GetTick>
 8006154:	1b80      	subs	r0, r0, r6
 8006156:	2802      	cmp	r0, #2
 8006158:	d857      	bhi.n	800620a <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800615a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800615e:	0798      	lsls	r0, r3, #30
 8006160:	d4f6      	bmi.n	8006150 <HAL_RCC_OscConfig+0x224>
 8006162:	e761      	b.n	8006028 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006164:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006168:	2903      	cmp	r1, #3
 800616a:	f47f aef4 	bne.w	8005f56 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800616e:	4a2a      	ldr	r2, [pc, #168]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	0392      	lsls	r2, r2, #14
 8006174:	f57f af12 	bpl.w	8005f9c <HAL_RCC_OscConfig+0x70>
 8006178:	6862      	ldr	r2, [r4, #4]
 800617a:	2a00      	cmp	r2, #0
 800617c:	f47f af0e 	bne.w	8005f9c <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8006180:	2001      	movs	r0, #1
}
 8006182:	b002      	add	sp, #8
 8006184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006188:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800618c:	2a02      	cmp	r2, #2
 800618e:	f47f af12 	bne.w	8005fb6 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006192:	4b21      	ldr	r3, [pc, #132]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	055d      	lsls	r5, r3, #21
 8006198:	d502      	bpl.n	80061a0 <HAL_RCC_OscConfig+0x274>
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ef      	beq.n	8006180 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a0:	4a1d      	ldr	r2, [pc, #116]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 80061a2:	6920      	ldr	r0, [r4, #16]
 80061a4:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80061a6:	491e      	ldr	r1, [pc, #120]	; (8006220 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061ac:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80061b0:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80061b2:	6808      	ldr	r0, [r1, #0]
 80061b4:	f7fd ffa8 	bl	8004108 <HAL_InitTick>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d1e1      	bne.n	8006180 <HAL_RCC_OscConfig+0x254>
 80061bc:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061be:	071a      	lsls	r2, r3, #28
 80061c0:	f57f af33 	bpl.w	800602a <HAL_RCC_OscConfig+0xfe>
 80061c4:	e717      	b.n	8005ff6 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c6:	4a14      	ldr	r2, [pc, #80]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
 80061c8:	6813      	ldr	r3, [r2, #0]
 80061ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80061d0:	f7fd ffdc 	bl	800418c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061d4:	4e10      	ldr	r6, [pc, #64]	; (8006218 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 80061d6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061d8:	e004      	b.n	80061e4 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061da:	f7fd ffd7 	bl	800418c <HAL_GetTick>
 80061de:	1b40      	subs	r0, r0, r5
 80061e0:	2864      	cmp	r0, #100	; 0x64
 80061e2:	d812      	bhi.n	800620a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061e4:	6833      	ldr	r3, [r6, #0]
 80061e6:	039b      	lsls	r3, r3, #14
 80061e8:	d5f7      	bpl.n	80061da <HAL_RCC_OscConfig+0x2ae>
 80061ea:	e6d6      	b.n	8005f9a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80061f4:	f7fd ffca 	bl	800418c <HAL_GetTick>
 80061f8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061fa:	682b      	ldr	r3, [r5, #0]
 80061fc:	0559      	lsls	r1, r3, #21
 80061fe:	d5dd      	bpl.n	80061bc <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006200:	f7fd ffc4 	bl	800418c <HAL_GetTick>
 8006204:	1b80      	subs	r0, r0, r6
 8006206:	2802      	cmp	r0, #2
 8006208:	d9f7      	bls.n	80061fa <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 800620a:	2003      	movs	r0, #3
}
 800620c:	b002      	add	sp, #8
 800620e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006212:	2500      	movs	r5, #0
 8006214:	e71a      	b.n	800604c <HAL_RCC_OscConfig+0x120>
 8006216:	bf00      	nop
 8006218:	40021000 	.word	0x40021000
 800621c:	40007000 	.word	0x40007000
 8006220:	20000660 	.word	0x20000660
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006224:	4a65      	ldr	r2, [pc, #404]	; (80063bc <HAL_RCC_OscConfig+0x490>)
 8006226:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8006232:	f7fd ffab 	bl	800418c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006236:	4f61      	ldr	r7, [pc, #388]	; (80063bc <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8006238:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623a:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800623e:	e004      	b.n	800624a <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006240:	f7fd ffa4 	bl	800418c <HAL_GetTick>
 8006244:	1b80      	subs	r0, r0, r6
 8006246:	4540      	cmp	r0, r8
 8006248:	d8df      	bhi.n	800620a <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800624a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800624e:	0799      	lsls	r1, r3, #30
 8006250:	d5f6      	bpl.n	8006240 <HAL_RCC_OscConfig+0x314>
 8006252:	e727      	b.n	80060a4 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8006254:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8006260:	f7fd ff94 	bl	800418c <HAL_GetTick>
 8006264:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006266:	e004      	b.n	8006272 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006268:	f7fd ff90 	bl	800418c <HAL_GetTick>
 800626c:	1b80      	subs	r0, r0, r6
 800626e:	2802      	cmp	r0, #2
 8006270:	d8cb      	bhi.n	800620a <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006272:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8006276:	0798      	lsls	r0, r3, #30
 8006278:	d4f6      	bmi.n	8006268 <HAL_RCC_OscConfig+0x33c>
 800627a:	e735      	b.n	80060e8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800627c:	6833      	ldr	r3, [r6, #0]
 800627e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006282:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006284:	f7fd ff82 	bl	800418c <HAL_GetTick>
 8006288:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800628a:	6833      	ldr	r3, [r6, #0]
 800628c:	05d8      	lsls	r0, r3, #23
 800628e:	f53f aee2 	bmi.w	8006056 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006292:	f7fd ff7b 	bl	800418c <HAL_GetTick>
 8006296:	1bc0      	subs	r0, r0, r7
 8006298:	2802      	cmp	r0, #2
 800629a:	d9f6      	bls.n	800628a <HAL_RCC_OscConfig+0x35e>
 800629c:	e7b5      	b.n	800620a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800629e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062a2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80062b4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062b6:	e78b      	b.n	80061d0 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80062b8:	2001      	movs	r0, #1
}
 80062ba:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80062bc:	f7fd ff66 	bl	800418c <HAL_GetTick>
 80062c0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062c2:	e004      	b.n	80062ce <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c4:	f7fd ff62 	bl	800418c <HAL_GetTick>
 80062c8:	1b80      	subs	r0, r0, r6
 80062ca:	2802      	cmp	r0, #2
 80062cc:	d89d      	bhi.n	800620a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ce:	682b      	ldr	r3, [r5, #0]
 80062d0:	0199      	lsls	r1, r3, #6
 80062d2:	d4f7      	bmi.n	80062c4 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062d4:	68e9      	ldr	r1, [r5, #12]
 80062d6:	4b3a      	ldr	r3, [pc, #232]	; (80063c0 <HAL_RCC_OscConfig+0x494>)
 80062d8:	6a22      	ldr	r2, [r4, #32]
 80062da:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80062dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062e0:	400b      	ands	r3, r1
 80062e2:	4313      	orrs	r3, r2
 80062e4:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80062e8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80062ec:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 80062f0:	3801      	subs	r0, #1
 80062f2:	0849      	lsrs	r1, r1, #1
 80062f4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80062f8:	3901      	subs	r1, #1
 80062fa:	0852      	lsrs	r2, r2, #1
 80062fc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006300:	3a01      	subs	r2, #1
 8006302:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8006306:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006308:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800630a:	4e2c      	ldr	r6, [pc, #176]	; (80063bc <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 800630c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006310:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006312:	68eb      	ldr	r3, [r5, #12]
 8006314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006318:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800631a:	f7fd ff37 	bl	800418c <HAL_GetTick>
 800631e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006320:	e005      	b.n	800632e <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006322:	f7fd ff33 	bl	800418c <HAL_GetTick>
 8006326:	1b00      	subs	r0, r0, r4
 8006328:	2802      	cmp	r0, #2
 800632a:	f63f af6e 	bhi.w	800620a <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800632e:	6833      	ldr	r3, [r6, #0]
 8006330:	019a      	lsls	r2, r3, #6
 8006332:	d5f6      	bpl.n	8006322 <HAL_RCC_OscConfig+0x3f6>
 8006334:	e6fe      	b.n	8006134 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006336:	4b21      	ldr	r3, [pc, #132]	; (80063bc <HAL_RCC_OscConfig+0x490>)
 8006338:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800633c:	f042 0204 	orr.w	r2, r2, #4
 8006340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006344:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006348:	f042 0201 	orr.w	r2, r2, #1
 800634c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006350:	e76f      	b.n	8006232 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006352:	2801      	cmp	r0, #1
 8006354:	f43f aeef 	beq.w	8006136 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8006358:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800635a:	6a22      	ldr	r2, [r4, #32]
 800635c:	f003 0103 	and.w	r1, r3, #3
 8006360:	4291      	cmp	r1, r2
 8006362:	f47f af0d 	bne.w	8006180 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006366:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800636c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8006372:	f47f af05 	bne.w	8006180 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006376:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006378:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800637c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006380:	f47f aefe 	bne.w	8006180 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006384:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006386:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800638a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800638e:	f47f aef7 	bne.w	8006180 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006392:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006394:	0852      	lsrs	r2, r2, #1
 8006396:	3a01      	subs	r2, #1
 8006398:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800639c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80063a0:	f47f aeee 	bne.w	8006180 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80063a6:	0852      	lsrs	r2, r2, #1
 80063a8:	3a01      	subs	r2, #1
 80063aa:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063ae:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80063b2:	bf14      	ite	ne
 80063b4:	2001      	movne	r0, #1
 80063b6:	2000      	moveq	r0, #0
 80063b8:	e6bd      	b.n	8006136 <HAL_RCC_OscConfig+0x20a>
 80063ba:	bf00      	nop
 80063bc:	40021000 	.word	0x40021000
 80063c0:	019f800c 	.word	0x019f800c

080063c4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063c4:	4b18      	ldr	r3, [pc, #96]	; (8006428 <HAL_RCC_GetSysClockFreq+0x64>)
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	f002 020c 	and.w	r2, r2, #12
 80063cc:	2a04      	cmp	r2, #4
 80063ce:	d027      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	f002 020c 	and.w	r2, r2, #12
 80063d6:	2a08      	cmp	r2, #8
 80063d8:	d024      	beq.n	8006424 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	f002 020c 	and.w	r2, r2, #12
 80063e0:	2a0c      	cmp	r2, #12
 80063e2:	d001      	beq.n	80063e8 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80063e4:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80063e6:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063e8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063ea:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063ec:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063ee:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063f2:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 80063f6:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063f8:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063fc:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006400:	bf0c      	ite	eq
 8006402:	480a      	ldreq	r0, [pc, #40]	; (800642c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006404:	480a      	ldrne	r0, [pc, #40]	; (8006430 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006406:	fbb0 f0f2 	udiv	r0, r0, r2
 800640a:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <HAL_RCC_GetSysClockFreq+0x64>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006416:	3301      	adds	r3, #1
 8006418:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800641a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800641e:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006420:	4803      	ldr	r0, [pc, #12]	; (8006430 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006422:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <HAL_RCC_GetSysClockFreq+0x68>)
 8006426:	4770      	bx	lr
 8006428:	40021000 	.word	0x40021000
 800642c:	016e3600 	.word	0x016e3600
 8006430:	00f42400 	.word	0x00f42400

08006434 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006434:	2800      	cmp	r0, #0
 8006436:	f000 80ef 	beq.w	8006618 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800643a:	4a7f      	ldr	r2, [pc, #508]	; (8006638 <HAL_RCC_ClockConfig+0x204>)
{
 800643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006440:	6813      	ldr	r3, [r2, #0]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	428b      	cmp	r3, r1
 8006448:	460d      	mov	r5, r1
 800644a:	4604      	mov	r4, r0
 800644c:	d20c      	bcs.n	8006468 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	f023 030f 	bic.w	r3, r3, #15
 8006454:	430b      	orrs	r3, r1
 8006456:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006458:	6813      	ldr	r3, [r2, #0]
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	428b      	cmp	r3, r1
 8006460:	d002      	beq.n	8006468 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006462:	2001      	movs	r0, #1
}
 8006464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	07de      	lsls	r6, r3, #31
 800646c:	d563      	bpl.n	8006536 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800646e:	6862      	ldr	r2, [r4, #4]
 8006470:	2a03      	cmp	r2, #3
 8006472:	f000 809a 	beq.w	80065aa <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006476:	4b71      	ldr	r3, [pc, #452]	; (800663c <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006478:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800647a:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800647c:	f000 8091 	beq.w	80065a2 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006480:	055b      	lsls	r3, r3, #21
 8006482:	d5ee      	bpl.n	8006462 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006484:	f7ff ff9e 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8006488:	4b6d      	ldr	r3, [pc, #436]	; (8006640 <HAL_RCC_ClockConfig+0x20c>)
 800648a:	4298      	cmp	r0, r3
 800648c:	f200 80c6 	bhi.w	800661c <HAL_RCC_ClockConfig+0x1e8>
 8006490:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006492:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006496:	4e69      	ldr	r6, [pc, #420]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 8006498:	68b3      	ldr	r3, [r6, #8]
 800649a:	f023 0303 	bic.w	r3, r3, #3
 800649e:	431a      	orrs	r2, r3
 80064a0:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80064a2:	f7fd fe73 	bl	800418c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80064aa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ac:	e004      	b.n	80064b8 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ae:	f7fd fe6d 	bl	800418c <HAL_GetTick>
 80064b2:	1bc0      	subs	r0, r0, r7
 80064b4:	4540      	cmp	r0, r8
 80064b6:	d871      	bhi.n	800659c <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064b8:	68b3      	ldr	r3, [r6, #8]
 80064ba:	6862      	ldr	r2, [r4, #4]
 80064bc:	f003 030c 	and.w	r3, r3, #12
 80064c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80064c4:	d1f3      	bne.n	80064ae <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	079f      	lsls	r7, r3, #30
 80064ca:	d436      	bmi.n	800653a <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80064cc:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80064d0:	d103      	bne.n	80064da <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80064d2:	68b3      	ldr	r3, [r6, #8]
 80064d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064d8:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064da:	4e57      	ldr	r6, [pc, #348]	; (8006638 <HAL_RCC_ClockConfig+0x204>)
 80064dc:	6833      	ldr	r3, [r6, #0]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	42ab      	cmp	r3, r5
 80064e4:	d846      	bhi.n	8006574 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	075a      	lsls	r2, r3, #29
 80064ea:	d506      	bpl.n	80064fa <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064ec:	4953      	ldr	r1, [pc, #332]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 80064ee:	68e0      	ldr	r0, [r4, #12]
 80064f0:	688a      	ldr	r2, [r1, #8]
 80064f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064f6:	4302      	orrs	r2, r0
 80064f8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fa:	071b      	lsls	r3, r3, #28
 80064fc:	d507      	bpl.n	800650e <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064fe:	4a4f      	ldr	r2, [pc, #316]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 8006500:	6921      	ldr	r1, [r4, #16]
 8006502:	6893      	ldr	r3, [r2, #8]
 8006504:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006508:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800650c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800650e:	f7ff ff59 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
 8006512:	4a4a      	ldr	r2, [pc, #296]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 8006514:	4c4b      	ldr	r4, [pc, #300]	; (8006644 <HAL_RCC_ClockConfig+0x210>)
 8006516:	6892      	ldr	r2, [r2, #8]
 8006518:	494b      	ldr	r1, [pc, #300]	; (8006648 <HAL_RCC_ClockConfig+0x214>)
 800651a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800651e:	4603      	mov	r3, r0
 8006520:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006522:	484a      	ldr	r0, [pc, #296]	; (800664c <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006524:	f002 021f 	and.w	r2, r2, #31
 8006528:	40d3      	lsrs	r3, r2
 800652a:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800652c:	6800      	ldr	r0, [r0, #0]
}
 800652e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006532:	f7fd bde9 	b.w	8004108 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006536:	0798      	lsls	r0, r3, #30
 8006538:	d5cf      	bpl.n	80064da <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800653a:	0758      	lsls	r0, r3, #29
 800653c:	d504      	bpl.n	8006548 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800653e:	493f      	ldr	r1, [pc, #252]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 8006540:	688a      	ldr	r2, [r1, #8]
 8006542:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006546:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006548:	0719      	lsls	r1, r3, #28
 800654a:	d506      	bpl.n	800655a <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800654c:	4a3b      	ldr	r2, [pc, #236]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 800654e:	6893      	ldr	r3, [r2, #8]
 8006550:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006554:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006558:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800655a:	4a38      	ldr	r2, [pc, #224]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 800655c:	68a1      	ldr	r1, [r4, #8]
 800655e:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006560:	4e35      	ldr	r6, [pc, #212]	; (8006638 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006566:	430b      	orrs	r3, r1
 8006568:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800656a:	6833      	ldr	r3, [r6, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	42ab      	cmp	r3, r5
 8006572:	d9b8      	bls.n	80064e6 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006574:	6833      	ldr	r3, [r6, #0]
 8006576:	f023 030f 	bic.w	r3, r3, #15
 800657a:	432b      	orrs	r3, r5
 800657c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800657e:	f7fd fe05 	bl	800418c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006582:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006586:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006588:	6833      	ldr	r3, [r6, #0]
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	42ab      	cmp	r3, r5
 8006590:	d0a9      	beq.n	80064e6 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006592:	f7fd fdfb 	bl	800418c <HAL_GetTick>
 8006596:	1bc0      	subs	r0, r0, r7
 8006598:	4540      	cmp	r0, r8
 800659a:	d9f5      	bls.n	8006588 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 800659c:	2003      	movs	r0, #3
}
 800659e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065a2:	039a      	lsls	r2, r3, #14
 80065a4:	f53f af6e 	bmi.w	8006484 <HAL_RCC_ClockConfig+0x50>
 80065a8:	e75b      	b.n	8006462 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065aa:	4824      	ldr	r0, [pc, #144]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 80065ac:	6801      	ldr	r1, [r0, #0]
 80065ae:	0189      	lsls	r1, r1, #6
 80065b0:	f57f af57 	bpl.w	8006462 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065b4:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065b6:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065b8:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065ba:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065be:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 80065c2:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065c4:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065c8:	bf0c      	ite	eq
 80065ca:	4921      	ldreq	r1, [pc, #132]	; (8006650 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065cc:	4921      	ldrne	r1, [pc, #132]	; (8006654 <HAL_RCC_ClockConfig+0x220>)
 80065ce:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065d2:	4e1a      	ldr	r6, [pc, #104]	; (800663c <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 80065d4:	4f1a      	ldr	r7, [pc, #104]	; (8006640 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065d6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80065da:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065de:	68f0      	ldr	r0, [r6, #12]
 80065e0:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80065e4:	3001      	adds	r0, #1
 80065e6:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80065e8:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80065ec:	42b9      	cmp	r1, r7
 80065ee:	d920      	bls.n	8006632 <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80065f0:	68b1      	ldr	r1, [r6, #8]
 80065f2:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80065f6:	d005      	beq.n	8006604 <HAL_RCC_ClockConfig+0x1d0>
 80065f8:	f013 0902 	ands.w	r9, r3, #2
 80065fc:	f43f af4b 	beq.w	8006496 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006600:	68a3      	ldr	r3, [r4, #8]
 8006602:	b9b3      	cbnz	r3, 8006632 <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006604:	490d      	ldr	r1, [pc, #52]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 8006606:	688b      	ldr	r3, [r1, #8]
 8006608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800660c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006610:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006612:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006616:	e73e      	b.n	8006496 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8006618:	2001      	movs	r0, #1
}
 800661a:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800661c:	4a07      	ldr	r2, [pc, #28]	; (800663c <HAL_RCC_ClockConfig+0x208>)
 800661e:	6893      	ldr	r3, [r2, #8]
 8006620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006628:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800662a:	6862      	ldr	r2, [r4, #4]
 800662c:	f04f 0980 	mov.w	r9, #128	; 0x80
 8006630:	e731      	b.n	8006496 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006632:	f04f 0900 	mov.w	r9, #0
 8006636:	e72e      	b.n	8006496 <HAL_RCC_ClockConfig+0x62>
 8006638:	40022000 	.word	0x40022000
 800663c:	40021000 	.word	0x40021000
 8006640:	04c4b400 	.word	0x04c4b400
 8006644:	0800a558 	.word	0x0800a558
 8006648:	20000658 	.word	0x20000658
 800664c:	20000660 	.word	0x20000660
 8006650:	016e3600 	.word	0x016e3600
 8006654:	00f42400 	.word	0x00f42400

08006658 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006658:	4b01      	ldr	r3, [pc, #4]	; (8006660 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20000658 	.word	0x20000658

08006664 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <HAL_RCC_GetPCLK1Freq+0x18>)
 8006666:	4a06      	ldr	r2, [pc, #24]	; (8006680 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006668:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800666a:	4906      	ldr	r1, [pc, #24]	; (8006684 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800666c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006670:	6808      	ldr	r0, [r1, #0]
 8006672:	5cd3      	ldrb	r3, [r2, r3]
 8006674:	f003 031f 	and.w	r3, r3, #31
}
 8006678:	40d8      	lsrs	r0, r3
 800667a:	4770      	bx	lr
 800667c:	40021000 	.word	0x40021000
 8006680:	0800a568 	.word	0x0800a568
 8006684:	20000658 	.word	0x20000658

08006688 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800668a:	4a06      	ldr	r2, [pc, #24]	; (80066a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800668c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800668e:	4906      	ldr	r1, [pc, #24]	; (80066a8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006690:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006694:	6808      	ldr	r0, [r1, #0]
 8006696:	5cd3      	ldrb	r3, [r2, r3]
 8006698:	f003 031f 	and.w	r3, r3, #31
}
 800669c:	40d8      	lsrs	r0, r3
 800669e:	4770      	bx	lr
 80066a0:	40021000 	.word	0x40021000
 80066a4:	0800a568 	.word	0x0800a568
 80066a8:	20000658 	.word	0x20000658

080066ac <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80066ac:	4a02      	ldr	r2, [pc, #8]	; (80066b8 <HAL_RCC_EnableCSS+0xc>)
 80066ae:	6813      	ldr	r3, [r2, #0]
 80066b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066b4:	6013      	str	r3, [r2, #0]
}
 80066b6:	4770      	bx	lr
 80066b8:	40021000 	.word	0x40021000

080066bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066c0:	6803      	ldr	r3, [r0, #0]
{
 80066c2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066c4:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80066c8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066ca:	d056      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066cc:	4b9f      	ldr	r3, [pc, #636]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80066ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066d0:	00d5      	lsls	r5, r2, #3
 80066d2:	f140 810c 	bpl.w	80068ee <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80066d6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066d8:	4d9d      	ldr	r5, [pc, #628]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80066da:	682b      	ldr	r3, [r5, #0]
 80066dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066e2:	f7fd fd53 	bl	800418c <HAL_GetTick>
 80066e6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066e8:	e005      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ea:	f7fd fd4f 	bl	800418c <HAL_GetTick>
 80066ee:	1b83      	subs	r3, r0, r6
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	f200 8107 	bhi.w	8006904 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066f6:	682b      	ldr	r3, [r5, #0]
 80066f8:	05d8      	lsls	r0, r3, #23
 80066fa:	d5f6      	bpl.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066fc:	4d93      	ldr	r5, [pc, #588]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80066fe:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006702:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006706:	d027      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8006708:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800670a:	429a      	cmp	r2, r3
 800670c:	d025      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800670e:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006712:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800671a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800671e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006722:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800672a:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800672c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006730:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006734:	f140 8108 	bpl.w	8006948 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006738:	f7fd fd28 	bl	800418c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006740:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006742:	e005      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006744:	f7fd fd22 	bl	800418c <HAL_GetTick>
 8006748:	1b80      	subs	r0, r0, r6
 800674a:	4540      	cmp	r0, r8
 800674c:	f200 80da 	bhi.w	8006904 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006750:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8006754:	079b      	lsls	r3, r3, #30
 8006756:	d5f5      	bpl.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8006758:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800675a:	497c      	ldr	r1, [pc, #496]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800675c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006760:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800676a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800676c:	b127      	cbz	r7, 8006778 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800676e:	4a77      	ldr	r2, [pc, #476]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006770:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006776:	6593      	str	r3, [r2, #88]	; 0x58
 8006778:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800677a:	07de      	lsls	r6, r3, #31
 800677c:	d508      	bpl.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800677e:	4973      	ldr	r1, [pc, #460]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006780:	6865      	ldr	r5, [r4, #4]
 8006782:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006786:	f022 0203 	bic.w	r2, r2, #3
 800678a:	432a      	orrs	r2, r5
 800678c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006790:	079d      	lsls	r5, r3, #30
 8006792:	d508      	bpl.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006794:	496d      	ldr	r1, [pc, #436]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006796:	68a5      	ldr	r5, [r4, #8]
 8006798:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800679c:	f022 020c 	bic.w	r2, r2, #12
 80067a0:	432a      	orrs	r2, r5
 80067a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067a6:	0759      	lsls	r1, r3, #29
 80067a8:	d508      	bpl.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067aa:	4968      	ldr	r1, [pc, #416]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80067ac:	68e5      	ldr	r5, [r4, #12]
 80067ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067b2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80067b6:	432a      	orrs	r2, r5
 80067b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067bc:	071a      	lsls	r2, r3, #28
 80067be:	d508      	bpl.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067c0:	4962      	ldr	r1, [pc, #392]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80067c2:	6925      	ldr	r5, [r4, #16]
 80067c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80067cc:	432a      	orrs	r2, r5
 80067ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067d2:	069f      	lsls	r7, r3, #26
 80067d4:	d508      	bpl.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067d6:	495d      	ldr	r1, [pc, #372]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80067d8:	6965      	ldr	r5, [r4, #20]
 80067da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067e2:	432a      	orrs	r2, r5
 80067e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067e8:	065e      	lsls	r6, r3, #25
 80067ea:	d508      	bpl.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ec:	4957      	ldr	r1, [pc, #348]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80067ee:	69a5      	ldr	r5, [r4, #24]
 80067f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067f4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80067f8:	432a      	orrs	r2, r5
 80067fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067fe:	061d      	lsls	r5, r3, #24
 8006800:	d508      	bpl.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006802:	4952      	ldr	r1, [pc, #328]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006804:	69e5      	ldr	r5, [r4, #28]
 8006806:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800680a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800680e:	432a      	orrs	r2, r5
 8006810:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006814:	05d9      	lsls	r1, r3, #23
 8006816:	d508      	bpl.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006818:	494c      	ldr	r1, [pc, #304]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800681a:	6a25      	ldr	r5, [r4, #32]
 800681c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006820:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006824:	432a      	orrs	r2, r5
 8006826:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800682a:	059a      	lsls	r2, r3, #22
 800682c:	d508      	bpl.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800682e:	4947      	ldr	r1, [pc, #284]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006830:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006832:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006836:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800683a:	432a      	orrs	r2, r5
 800683c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006840:	055f      	lsls	r7, r3, #21
 8006842:	d50b      	bpl.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006844:	4941      	ldr	r1, [pc, #260]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006846:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006848:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800684c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006850:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006852:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006856:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800685a:	d055      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800685c:	051e      	lsls	r6, r3, #20
 800685e:	d50b      	bpl.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006860:	493a      	ldr	r1, [pc, #232]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006862:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8006864:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006868:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800686c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800686e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006872:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006876:	d04c      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006878:	04dd      	lsls	r5, r3, #19
 800687a:	d50b      	bpl.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800687c:	4933      	ldr	r1, [pc, #204]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800687e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8006880:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006884:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006888:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800688a:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800688e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006892:	d043      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006894:	0499      	lsls	r1, r3, #18
 8006896:	d50b      	bpl.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006898:	492c      	ldr	r1, [pc, #176]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800689a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800689c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068a0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80068a4:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068a6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068ae:	d03a      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068b0:	045a      	lsls	r2, r3, #17
 80068b2:	d50b      	bpl.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068b4:	4925      	ldr	r1, [pc, #148]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80068b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80068b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80068bc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80068c0:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068c2:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068ca:	d031      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80068cc:	041b      	lsls	r3, r3, #16
 80068ce:	d50b      	bpl.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068d0:	4a1e      	ldr	r2, [pc, #120]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80068d2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80068d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80068d8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80068dc:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068de:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068e6:	d028      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 80068e8:	b002      	add	sp, #8
 80068ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80068f4:	659a      	str	r2, [r3, #88]	; 0x58
 80068f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006900:	2701      	movs	r7, #1
 8006902:	e6e9      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8006904:	2003      	movs	r0, #3
 8006906:	e731      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006908:	68ca      	ldr	r2, [r1, #12]
 800690a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800690e:	60ca      	str	r2, [r1, #12]
 8006910:	e7a4      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006912:	68ca      	ldr	r2, [r1, #12]
 8006914:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006918:	60ca      	str	r2, [r1, #12]
 800691a:	e7ad      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800691c:	68ca      	ldr	r2, [r1, #12]
 800691e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006922:	60ca      	str	r2, [r1, #12]
 8006924:	e7b6      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006926:	68ca      	ldr	r2, [r1, #12]
 8006928:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800692c:	60ca      	str	r2, [r1, #12]
 800692e:	e7bf      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006930:	68ca      	ldr	r2, [r1, #12]
 8006932:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006936:	60ca      	str	r2, [r1, #12]
 8006938:	e7c8      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800693a:	68d3      	ldr	r3, [r2, #12]
 800693c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006940:	60d3      	str	r3, [r2, #12]
}
 8006942:	b002      	add	sp, #8
 8006944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006948:	4613      	mov	r3, r2
 800694a:	e706      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800694c:	40021000 	.word	0x40021000
 8006950:	40007000 	.word	0x40007000

08006954 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006954:	6a03      	ldr	r3, [r0, #32]
 8006956:	f023 0301 	bic.w	r3, r3, #1
 800695a:	6203      	str	r3, [r0, #32]
{
 800695c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006960:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006962:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006964:	4f18      	ldr	r7, [pc, #96]	; (80069c8 <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 8006966:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8006968:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800696a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 800696e:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006972:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006976:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8006978:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 800697c:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006980:	d00e      	beq.n	80069a0 <TIM_OC1_SetConfig+0x4c>
 8006982:	4c12      	ldr	r4, [pc, #72]	; (80069cc <TIM_OC1_SetConfig+0x78>)
 8006984:	42a0      	cmp	r0, r4
 8006986:	d00b      	beq.n	80069a0 <TIM_OC1_SetConfig+0x4c>
 8006988:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800698c:	42a0      	cmp	r0, r4
 800698e:	d007      	beq.n	80069a0 <TIM_OC1_SetConfig+0x4c>
 8006990:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006994:	42a0      	cmp	r0, r4
 8006996:	d003      	beq.n	80069a0 <TIM_OC1_SetConfig+0x4c>
 8006998:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800699c:	42a0      	cmp	r0, r4
 800699e:	d10b      	bne.n	80069b8 <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069a0:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80069a2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80069a6:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069a8:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069ac:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80069b0:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80069b2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80069b6:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069b8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80069ba:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80069bc:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80069be:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80069c0:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80069c2:	6203      	str	r3, [r0, #32]
}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40013400 	.word	0x40013400

080069d0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069d0:	6a03      	ldr	r3, [r0, #32]
 80069d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d6:	6203      	str	r3, [r0, #32]
{
 80069d8:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069dc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069de:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069e0:	4f19      	ldr	r7, [pc, #100]	; (8006a48 <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069e2:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80069e4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80069ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069f2:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069f4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80069f8:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069fc:	d00f      	beq.n	8006a1e <TIM_OC3_SetConfig+0x4e>
 80069fe:	4c13      	ldr	r4, [pc, #76]	; (8006a4c <TIM_OC3_SetConfig+0x7c>)
 8006a00:	42a0      	cmp	r0, r4
 8006a02:	d00c      	beq.n	8006a1e <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006a08:	42a0      	cmp	r0, r4
 8006a0a:	d00f      	beq.n	8006a2c <TIM_OC3_SetConfig+0x5c>
 8006a0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006a10:	42a0      	cmp	r0, r4
 8006a12:	d00b      	beq.n	8006a2c <TIM_OC3_SetConfig+0x5c>
 8006a14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d10e      	bne.n	8006a3a <TIM_OC3_SetConfig+0x6a>
 8006a1c:	e006      	b.n	8006a2c <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a1e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a24:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a2c:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a30:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a34:	432c      	orrs	r4, r5
 8006a36:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a3a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006a3c:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006a3e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006a40:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8006a42:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006a44:	6203      	str	r3, [r0, #32]
}
 8006a46:	4770      	bx	lr
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40013400 	.word	0x40013400

08006a50 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a50:	6a03      	ldr	r3, [r0, #32]
 8006a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a56:	6203      	str	r3, [r0, #32]
{
 8006a58:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a5c:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a5e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a60:	4f19      	ldr	r7, [pc, #100]	; (8006ac8 <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a62:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a64:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a66:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8006a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a6e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a72:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a74:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a78:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a7c:	d00f      	beq.n	8006a9e <TIM_OC4_SetConfig+0x4e>
 8006a7e:	4c13      	ldr	r4, [pc, #76]	; (8006acc <TIM_OC4_SetConfig+0x7c>)
 8006a80:	42a0      	cmp	r0, r4
 8006a82:	d00c      	beq.n	8006a9e <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006a88:	42a0      	cmp	r0, r4
 8006a8a:	d00f      	beq.n	8006aac <TIM_OC4_SetConfig+0x5c>
 8006a8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	d00b      	beq.n	8006aac <TIM_OC4_SetConfig+0x5c>
 8006a94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006a98:	42a0      	cmp	r0, r4
 8006a9a:	d10e      	bne.n	8006aba <TIM_OC4_SetConfig+0x6a>
 8006a9c:	e006      	b.n	8006aac <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a9e:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006aa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006aa4:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006aac:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ab0:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006ab4:	432c      	orrs	r4, r5
 8006ab6:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aba:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006abc:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006abe:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006ac0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8006ac2:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8006ac4:	6203      	str	r3, [r0, #32]
}
 8006ac6:	4770      	bx	lr
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40013400 	.word	0x40013400

08006ad0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d07d      	beq.n	8006bd0 <HAL_TIM_Base_Init+0x100>
{
 8006ad4:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ada:	4604      	mov	r4, r0
 8006adc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d06d      	beq.n	8006bc0 <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae4:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae6:	4a3b      	ldr	r2, [pc, #236]	; (8006bd4 <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	2302      	movs	r3, #2
 8006aea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aee:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8006af0:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af2:	d051      	beq.n	8006b98 <HAL_TIM_Base_Init+0xc8>
 8006af4:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8006af8:	d021      	beq.n	8006b3e <HAL_TIM_Base_Init+0x6e>
 8006afa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006afe:	4291      	cmp	r1, r2
 8006b00:	d01d      	beq.n	8006b3e <HAL_TIM_Base_Init+0x6e>
 8006b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b06:	4291      	cmp	r1, r2
 8006b08:	d019      	beq.n	8006b3e <HAL_TIM_Base_Init+0x6e>
 8006b0a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006b0e:	4291      	cmp	r1, r2
 8006b10:	d042      	beq.n	8006b98 <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b12:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006b16:	4291      	cmp	r1, r2
 8006b18:	d057      	beq.n	8006bca <HAL_TIM_Base_Init+0xfa>
 8006b1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b1e:	4291      	cmp	r1, r2
 8006b20:	d053      	beq.n	8006bca <HAL_TIM_Base_Init+0xfa>
 8006b22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b26:	4291      	cmp	r1, r2
 8006b28:	d04f      	beq.n	8006bca <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b2a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006b2e:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b34:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006b36:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b38:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b3a:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b3c:	e010      	b.n	8006b60 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8006b3e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b40:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b42:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b48:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b4e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b50:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b56:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8006b58:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006b5a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b5c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b5e:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006b60:	2301      	movs	r3, #1
 8006b62:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b64:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b68:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006b6c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006b70:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006b74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b80:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b88:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006b8c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006b90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006b94:	2000      	movs	r0, #0
}
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006b98:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b9a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b9c:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ba2:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ba8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006bb0:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb2:	68e3      	ldr	r3, [r4, #12]
 8006bb4:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006bb6:	6863      	ldr	r3, [r4, #4]
 8006bb8:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006bba:	6963      	ldr	r3, [r4, #20]
 8006bbc:	630b      	str	r3, [r1, #48]	; 0x30
 8006bbe:	e7cf      	b.n	8006b60 <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8006bc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006bc4:	f7fd f8c0 	bl	8003d48 <HAL_TIM_Base_MspInit>
 8006bc8:	e78c      	b.n	8006ae4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bca:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bcc:	69a2      	ldr	r2, [r4, #24]
 8006bce:	e7e9      	b.n	8006ba4 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 8006bd0:	2001      	movs	r0, #1
}
 8006bd2:	4770      	bx	lr
 8006bd4:	40012c00 	.word	0x40012c00

08006bd8 <HAL_TIM_PWM_MspInit>:
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop

08006bdc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d07d      	beq.n	8006cdc <HAL_TIM_PWM_Init+0x100>
{
 8006be0:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006be2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006be6:	4604      	mov	r4, r0
 8006be8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d06d      	beq.n	8006ccc <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf0:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf2:	4a3b      	ldr	r2, [pc, #236]	; (8006ce0 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bfa:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8006bfc:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bfe:	d051      	beq.n	8006ca4 <HAL_TIM_PWM_Init+0xc8>
 8006c00:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8006c04:	d021      	beq.n	8006c4a <HAL_TIM_PWM_Init+0x6e>
 8006c06:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	d01d      	beq.n	8006c4a <HAL_TIM_PWM_Init+0x6e>
 8006c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c12:	4291      	cmp	r1, r2
 8006c14:	d019      	beq.n	8006c4a <HAL_TIM_PWM_Init+0x6e>
 8006c16:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	d042      	beq.n	8006ca4 <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c1e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006c22:	4291      	cmp	r1, r2
 8006c24:	d057      	beq.n	8006cd6 <HAL_TIM_PWM_Init+0xfa>
 8006c26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c2a:	4291      	cmp	r1, r2
 8006c2c:	d053      	beq.n	8006cd6 <HAL_TIM_PWM_Init+0xfa>
 8006c2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c32:	4291      	cmp	r1, r2
 8006c34:	d04f      	beq.n	8006cd6 <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c36:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c38:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006c3a:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c40:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006c42:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c44:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c46:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c48:	e010      	b.n	8006c6c <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8006c4a:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c4c:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c4e:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c54:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c5a:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c5c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c62:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8006c64:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006c66:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c68:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c6a:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c70:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006c78:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006c7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006c80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006c90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c94:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006c98:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006ca0:	2000      	movs	r0, #0
}
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006ca4:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ca6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ca8:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006cae:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cb4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006cbc:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cbe:	68e3      	ldr	r3, [r4, #12]
 8006cc0:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc6:	6963      	ldr	r3, [r4, #20]
 8006cc8:	630b      	str	r3, [r1, #48]	; 0x30
 8006cca:	e7cf      	b.n	8006c6c <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8006ccc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006cd0:	f7ff ff82 	bl	8006bd8 <HAL_TIM_PWM_MspInit>
 8006cd4:	e78c      	b.n	8006bf0 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cd6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cd8:	69a2      	ldr	r2, [r4, #24]
 8006cda:	e7e9      	b.n	8006cb0 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 8006cdc:	2001      	movs	r0, #1
}
 8006cde:	4770      	bx	lr
 8006ce0:	40012c00 	.word	0x40012c00

08006ce4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006ce4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d04d      	beq.n	8006d88 <HAL_TIM_SlaveConfigSynchro+0xa4>
 8006cec:	4602      	mov	r2, r0
{
 8006cee:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf0:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8006cf2:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8006cf6:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfa:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006cfe:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d00:	e9d1 5400 	ldrd	r5, r4, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d0c:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d12:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d16:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d18:	2c60      	cmp	r4, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8006d1a:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8006d1c:	d051      	beq.n	8006dc2 <HAL_TIM_SlaveConfigSynchro+0xde>
 8006d1e:	d825      	bhi.n	8006d6c <HAL_TIM_SlaveConfigSynchro+0x88>
 8006d20:	2c40      	cmp	r4, #64	; 0x40
 8006d22:	d033      	beq.n	8006d8c <HAL_TIM_SlaveConfigSynchro+0xa8>
 8006d24:	2c50      	cmp	r4, #80	; 0x50
 8006d26:	d110      	bne.n	8006d4a <HAL_TIM_SlaveConfigSynchro+0x66>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d28:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d2a:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2c:	688c      	ldr	r4, [r1, #8]
 8006d2e:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d30:	f026 0601 	bic.w	r6, r6, #1
 8006d34:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d36:	6983      	ldr	r3, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d38:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006d40:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d42:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d46:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006d48:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006d4a:	68c3      	ldr	r3, [r0, #12]
 8006d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d50:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006d52:	68c3      	ldr	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006d54:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8006d56:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d5c:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8006d5e:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006d62:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8006d66:	4608      	mov	r0, r1
}
 8006d68:	bcf0      	pop	{r4, r5, r6, r7}
 8006d6a:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8006d6c:	2c70      	cmp	r4, #112	; 0x70
 8006d6e:	d1ec      	bne.n	8006d4a <HAL_TIM_SlaveConfigSynchro+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d70:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8006d74:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8006d76:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d78:	432b      	orrs	r3, r5
 8006d7a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d7e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d82:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d84:	6083      	str	r3, [r0, #8]
 8006d86:	e7e0      	b.n	8006d4a <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8006d88:	2002      	movs	r0, #2
}
 8006d8a:	4770      	bx	lr
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006d8c:	2d05      	cmp	r5, #5
 8006d8e:	d010      	beq.n	8006db2 <HAL_TIM_SlaveConfigSynchro+0xce>
 8006d90:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8006d94:	d00d      	beq.n	8006db2 <HAL_TIM_SlaveConfigSynchro+0xce>
      tmpccer = htim->Instance->CCER;
 8006d96:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006d98:	6a04      	ldr	r4, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006d9a:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006d9c:	f024 0401 	bic.w	r4, r4, #1
 8006da0:	6204      	str	r4, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006da2:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006da8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8006dac:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8006dae:	6205      	str	r5, [r0, #32]
      break;
 8006db0:	e7cb      	b.n	8006d4a <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8006db2:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8006db4:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8006db6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006dba:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8006dbe:	bcf0      	pop	{r4, r5, r6, r7}
 8006dc0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc2:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dc4:	688d      	ldr	r5, [r1, #8]
 8006dc6:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc8:	f024 0410 	bic.w	r4, r4, #16
 8006dcc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dce:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8006dd0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dd2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dda:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dde:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006de2:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8006de4:	6203      	str	r3, [r0, #32]
 8006de6:	e7b0      	b.n	8006d4a <HAL_TIM_SlaveConfigSynchro+0x66>

08006de8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de8:	6a03      	ldr	r3, [r0, #32]
 8006dea:	f023 0310 	bic.w	r3, r3, #16
 8006dee:	6203      	str	r3, [r0, #32]
{
 8006df0:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8006df2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006df4:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006df6:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006df8:	4f19      	ldr	r7, [pc, #100]	; (8006e60 <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dfa:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dfc:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dfe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8006e02:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e06:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e0a:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e10:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e14:	d00f      	beq.n	8006e36 <TIM_OC2_SetConfig+0x4e>
 8006e16:	4c13      	ldr	r4, [pc, #76]	; (8006e64 <TIM_OC2_SetConfig+0x7c>)
 8006e18:	42a0      	cmp	r0, r4
 8006e1a:	d00c      	beq.n	8006e36 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8006e20:	42a0      	cmp	r0, r4
 8006e22:	d00f      	beq.n	8006e44 <TIM_OC2_SetConfig+0x5c>
 8006e24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006e28:	42a0      	cmp	r0, r4
 8006e2a:	d00b      	beq.n	8006e44 <TIM_OC2_SetConfig+0x5c>
 8006e2c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006e30:	42a0      	cmp	r0, r4
 8006e32:	d10e      	bne.n	8006e52 <TIM_OC2_SetConfig+0x6a>
 8006e34:	e006      	b.n	8006e44 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e36:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e3c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e44:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e48:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e4c:	432c      	orrs	r4, r5
 8006e4e:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006e52:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006e54:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006e56:	6182      	str	r2, [r0, #24]
}
 8006e58:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8006e5a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006e5c:	6203      	str	r3, [r0, #32]
}
 8006e5e:	4770      	bx	lr
 8006e60:	40012c00 	.word	0x40012c00
 8006e64:	40013400 	.word	0x40013400

08006e68 <HAL_TIM_PWM_ConfigChannel>:
{
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8006e6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	f000 80e4 	beq.w	800703c <HAL_TIM_PWM_ConfigChannel+0x1d4>
 8006e74:	2301      	movs	r3, #1
 8006e76:	4604      	mov	r4, r0
 8006e78:	460d      	mov	r5, r1
 8006e7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006e7e:	2a14      	cmp	r2, #20
 8006e80:	d844      	bhi.n	8006f0c <HAL_TIM_PWM_ConfigChannel+0xa4>
 8006e82:	e8df f002 	tbb	[pc, r2]
 8006e86:	4347      	.short	0x4347
 8006e88:	435b4343 	.word	0x435b4343
 8006e8c:	43704343 	.word	0x43704343
 8006e90:	43844343 	.word	0x43844343
 8006e94:	43994343 	.word	0x43994343
 8006e98:	4343      	.short	0x4343
 8006e9a:	0b          	.byte	0x0b
 8006e9b:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e9c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e9e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ea2:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea4:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea6:	4e6c      	ldr	r6, [pc, #432]	; (8007058 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ea8:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8006eac:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8006eae:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006eb0:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006eb4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006eb8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ebc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec0:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ec2:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eca:	d008      	beq.n	8006ede <HAL_TIM_PWM_ConfigChannel+0x76>
 8006ecc:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006ed0:	42b3      	cmp	r3, r6
 8006ed2:	d004      	beq.n	8006ede <HAL_TIM_PWM_ConfigChannel+0x76>
 8006ed4:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006ed8:	42b3      	cmp	r3, r6
 8006eda:	f040 80b1 	bne.w	8007040 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ede:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ee0:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ee4:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8006ee8:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8006eea:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8006eee:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006ef0:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ef2:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ef4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ef6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006efa:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006efc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006efe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006f02:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f06:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006f0a:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f14:	6800      	ldr	r0, [r0, #0]
 8006f16:	f7ff fd1d 	bl	8006954 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f1a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f1c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f1e:	6999      	ldr	r1, [r3, #24]
 8006f20:	f041 0108 	orr.w	r1, r1, #8
 8006f24:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f26:	6999      	ldr	r1, [r3, #24]
 8006f28:	f021 0104 	bic.w	r1, r1, #4
 8006f2c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f2e:	699a      	ldr	r2, [r3, #24]
 8006f30:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8006f32:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f34:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006f36:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006f3a:	e7ea      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f3c:	6800      	ldr	r0, [r0, #0]
 8006f3e:	f7ff ff53 	bl	8006de8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f42:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f44:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f46:	6999      	ldr	r1, [r3, #24]
 8006f48:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006f4c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f4e:	6999      	ldr	r1, [r3, #24]
 8006f50:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006f54:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8006f5c:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f5e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006f60:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006f64:	e7d5      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	f7ff fd32 	bl	80069d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f6c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f6e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f70:	69d9      	ldr	r1, [r3, #28]
 8006f72:	f041 0108 	orr.w	r1, r1, #8
 8006f76:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f78:	69d9      	ldr	r1, [r3, #28]
 8006f7a:	f021 0104 	bic.w	r1, r1, #4
 8006f7e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8006f84:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f86:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006f88:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006f8c:	e7c1      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f8e:	6800      	ldr	r0, [r0, #0]
 8006f90:	f7ff fd5e 	bl	8006a50 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f94:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f96:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f98:	69d9      	ldr	r1, [r3, #28]
 8006f9a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006f9e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fa0:	69d9      	ldr	r1, [r3, #28]
 8006fa2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006fa6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fa8:	69da      	ldr	r2, [r3, #28]
 8006faa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8006fae:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fb0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006fb2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8006fb6:	e7ac      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fb8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fba:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fbe:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8006fc0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc2:	4e25      	ldr	r6, [pc, #148]	; (8007058 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fc4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8006fc8:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8006fca:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006fcc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006fce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8006fd4:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fdc:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fde:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8006fe2:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe6:	d00f      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006fe8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006fec:	42b3      	cmp	r3, r6
 8006fee:	d00b      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006ff0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006ff4:	42b3      	cmp	r3, r6
 8006ff6:	d007      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006ff8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006ffc:	42b3      	cmp	r3, r6
 8006ffe:	d003      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8007000:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007004:	42b3      	cmp	r3, r6
 8007006:	d104      	bne.n	8007012 <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007008:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800700a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800700e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8007012:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8007014:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007016:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8007018:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800701a:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800701c:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800701e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007020:	f041 0108 	orr.w	r1, r1, #8
 8007024:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007026:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007028:	f021 0104 	bic.w	r1, r1, #4
 800702c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800702e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007030:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8007032:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007034:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8007036:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800703a:	e76a      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 800703c:	2002      	movs	r0, #2
}
 800703e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007040:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007044:	42b3      	cmp	r3, r6
 8007046:	f43f af4a 	beq.w	8006ede <HAL_TIM_PWM_ConfigChannel+0x76>
 800704a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800704e:	42b3      	cmp	r3, r6
 8007050:	f47f af4a 	bne.w	8006ee8 <HAL_TIM_PWM_ConfigChannel+0x80>
 8007054:	e743      	b.n	8006ede <HAL_TIM_PWM_ConfigChannel+0x76>
 8007056:	bf00      	nop
 8007058:	40012c00 	.word	0x40012c00

0800705c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800705c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d03c      	beq.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 8007064:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007066:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007068:	4c1e      	ldr	r4, [pc, #120]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800706a:	2302      	movs	r3, #2
 800706c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007070:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8007072:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007074:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007076:	d026      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8007078:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800707c:	42a2      	cmp	r2, r4
 800707e:	d022      	beq.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007080:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007082:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800708a:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8007090:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007092:	d00a      	beq.n	80070aa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8007094:	4b14      	ldr	r3, [pc, #80]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8007096:	429a      	cmp	r2, r3
 8007098:	d007      	beq.n	80070aa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800709a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800709e:	429a      	cmp	r2, r3
 80070a0:	d003      	beq.n	80070aa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80070a2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d104      	bne.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070aa:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ac:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070b0:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b2:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80070b4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80070b6:	2201      	movs	r2, #1
 80070b8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80070bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80070c0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80070c2:	4618      	mov	r0, r3
}
 80070c4:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c6:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070ce:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80070d0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80070d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070d8:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80070da:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070dc:	e7e5      	b.n	80070aa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 80070de:	2002      	movs	r0, #2
}
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40012c00 	.word	0x40012c00
 80070e8:	40000400 	.word	0x40000400

080070ec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d044      	beq.n	800717e <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 80070f4:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070f6:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80070fa:	4602      	mov	r2, r0
 80070fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007100:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007104:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800710a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800710c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007110:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007114:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800711a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800711c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007120:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007122:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007124:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800712a:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800712c:	4c15      	ldr	r4, [pc, #84]	; (8007184 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 800712e:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007130:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007134:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007136:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800713a:	d00a      	beq.n	8007152 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 800713c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007140:	42a0      	cmp	r0, r4
 8007142:	d006      	beq.n	8007152 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007144:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007146:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007148:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800714c:	4608      	mov	r0, r1
}
 800714e:	bc30      	pop	{r4, r5}
 8007150:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007152:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007154:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800715a:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800715c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007160:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007164:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800716c:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800716e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007172:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007174:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007176:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800717a:	430b      	orrs	r3, r1
 800717c:	e7e2      	b.n	8007144 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800717e:	2002      	movs	r0, #2
}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40012c00 	.word	0x40012c00

08007188 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007188:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800718a:	07da      	lsls	r2, r3, #31
{
 800718c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800718e:	d506      	bpl.n	800719e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007190:	6801      	ldr	r1, [r0, #0]
 8007192:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007194:	684a      	ldr	r2, [r1, #4]
 8007196:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800719a:	4322      	orrs	r2, r4
 800719c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800719e:	079c      	lsls	r4, r3, #30
 80071a0:	d506      	bpl.n	80071b0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071a2:	6801      	ldr	r1, [r0, #0]
 80071a4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80071a6:	684a      	ldr	r2, [r1, #4]
 80071a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071ac:	4322      	orrs	r2, r4
 80071ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b0:	0759      	lsls	r1, r3, #29
 80071b2:	d506      	bpl.n	80071c2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071b4:	6801      	ldr	r1, [r0, #0]
 80071b6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80071b8:	684a      	ldr	r2, [r1, #4]
 80071ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071be:	4322      	orrs	r2, r4
 80071c0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071c2:	071a      	lsls	r2, r3, #28
 80071c4:	d506      	bpl.n	80071d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071c6:	6801      	ldr	r1, [r0, #0]
 80071c8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80071ca:	684a      	ldr	r2, [r1, #4]
 80071cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071d0:	4322      	orrs	r2, r4
 80071d2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071d4:	06dc      	lsls	r4, r3, #27
 80071d6:	d506      	bpl.n	80071e6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071d8:	6801      	ldr	r1, [r0, #0]
 80071da:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80071dc:	688a      	ldr	r2, [r1, #8]
 80071de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071e2:	4322      	orrs	r2, r4
 80071e4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071e6:	0699      	lsls	r1, r3, #26
 80071e8:	d506      	bpl.n	80071f8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071ea:	6801      	ldr	r1, [r0, #0]
 80071ec:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80071ee:	688a      	ldr	r2, [r1, #8]
 80071f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071f4:	4322      	orrs	r2, r4
 80071f6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071f8:	065a      	lsls	r2, r3, #25
 80071fa:	d509      	bpl.n	8007210 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071fc:	6801      	ldr	r1, [r0, #0]
 80071fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007200:	684a      	ldr	r2, [r1, #4]
 8007202:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007206:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007208:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800720c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800720e:	d00b      	beq.n	8007228 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007210:	061b      	lsls	r3, r3, #24
 8007212:	d506      	bpl.n	8007222 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007214:	6802      	ldr	r2, [r0, #0]
 8007216:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007218:	6853      	ldr	r3, [r2, #4]
 800721a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800721e:	430b      	orrs	r3, r1
 8007220:	6053      	str	r3, [r2, #4]
  }
}
 8007222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007226:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007228:	684a      	ldr	r2, [r1, #4]
 800722a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800722c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007230:	4322      	orrs	r2, r4
 8007232:	604a      	str	r2, [r1, #4]
 8007234:	e7ec      	b.n	8007210 <UART_AdvFeatureConfig+0x88>
 8007236:	bf00      	nop

08007238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007238:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723a:	2300      	movs	r3, #0
{
 800723c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800723e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007242:	f7fc ffa3 	bl	800418c <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800724c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800724e:	d40d      	bmi.n	800726c <UART_CheckIdleState+0x34>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	0752      	lsls	r2, r2, #29
 8007254:	d431      	bmi.n	80072ba <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007256:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007258:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 800725a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 800725e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  return HAL_OK;
 8007262:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8007264:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007268:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800726a:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726c:	69da      	ldr	r2, [r3, #28]
 800726e:	0292      	lsls	r2, r2, #10
 8007270:	d4ee      	bmi.n	8007250 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007272:	f7fc ff8b 	bl	800418c <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007276:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007278:	1b40      	subs	r0, r0, r5
 800727a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800727e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007280:	d22c      	bcs.n	80072dc <UART_CheckIdleState+0xa4>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007282:	0750      	lsls	r0, r2, #29
 8007284:	d5f2      	bpl.n	800726c <UART_CheckIdleState+0x34>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007286:	69da      	ldr	r2, [r3, #28]
 8007288:	0511      	lsls	r1, r2, #20
 800728a:	d5ef      	bpl.n	800726c <UART_CheckIdleState+0x34>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800728c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007290:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007298:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729a:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800729c:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729e:	f021 0101 	bic.w	r1, r1, #1
 80072a2:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80072a4:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 80072a6:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80072aa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 80072ae:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 80072b0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072b4:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 80072b8:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	0258      	lsls	r0, r3, #9
 80072be:	d4ca      	bmi.n	8007256 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c0:	f7fc ff64 	bl	800418c <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80072c4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c6:	1b40      	subs	r0, r0, r5
 80072c8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80072cc:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ce:	d205      	bcs.n	80072dc <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072d0:	0751      	lsls	r1, r2, #29
 80072d2:	d5f2      	bpl.n	80072ba <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072d4:	69da      	ldr	r2, [r3, #28]
 80072d6:	0512      	lsls	r2, r2, #20
 80072d8:	d5ef      	bpl.n	80072ba <UART_CheckIdleState+0x82>
 80072da:	e7d7      	b.n	800728c <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80072dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 80072e4:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80072ec:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80072ee:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80072f2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 80072f6:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80072f8:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 80072fc:	bd38      	pop	{r3, r4, r5, pc}
 80072fe:	bf00      	nop

08007300 <HAL_UART_Init>:
  if (huart == NULL)
 8007300:	2800      	cmp	r0, #0
 8007302:	f000 817f 	beq.w	8007604 <HAL_UART_Init+0x304>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007306:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800730a:	b570      	push	{r4, r5, r6, lr}
 800730c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800730e:	2b00      	cmp	r3, #0
 8007310:	d056      	beq.n	80073c0 <HAL_UART_Init+0xc0>
  __HAL_UART_DISABLE(huart);
 8007312:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007314:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007316:	49c1      	ldr	r1, [pc, #772]	; (800761c <HAL_UART_Init+0x31c>)
  huart->gState = HAL_UART_STATE_BUSY;
 8007318:	2224      	movs	r2, #36	; 0x24
 800731a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800731e:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007320:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8007322:	f020 0001 	bic.w	r0, r0, #1
 8007326:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007328:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800732a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800732c:	4332      	orrs	r2, r6
 800732e:	4302      	orrs	r2, r0
 8007330:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007332:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007334:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007336:	430a      	orrs	r2, r1
 8007338:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800733e:	49b8      	ldr	r1, [pc, #736]	; (8007620 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007340:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007344:	432a      	orrs	r2, r5
 8007346:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007348:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800734a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800734c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800734e:	d03c      	beq.n	80073ca <HAL_UART_Init+0xca>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007350:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007354:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007358:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800735c:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800735e:	430a      	orrs	r2, r1
 8007360:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007364:	49af      	ldr	r1, [pc, #700]	; (8007624 <HAL_UART_Init+0x324>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007366:	f022 020f 	bic.w	r2, r2, #15
 800736a:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800736c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800736e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007370:	d012      	beq.n	8007398 <HAL_UART_Init+0x98>
 8007372:	4aad      	ldr	r2, [pc, #692]	; (8007628 <HAL_UART_Init+0x328>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d07b      	beq.n	8007470 <HAL_UART_Init+0x170>
 8007378:	4aac      	ldr	r2, [pc, #688]	; (800762c <HAL_UART_Init+0x32c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	f000 8130 	beq.w	80075e0 <HAL_UART_Init+0x2e0>
 8007380:	4aab      	ldr	r2, [pc, #684]	; (8007630 <HAL_UART_Init+0x330>)
 8007382:	4293      	cmp	r3, r2
 8007384:	f000 80cf 	beq.w	8007526 <HAL_UART_Init+0x226>
  huart->NbRxDataToProcess = 1;
 8007388:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800738c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800738e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8007392:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8007394:	2001      	movs	r0, #1
 8007396:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007398:	4ba6      	ldr	r3, [pc, #664]	; (8007634 <HAL_UART_Init+0x334>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	f240 80d7 	bls.w	8007558 <HAL_UART_Init+0x258>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073aa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80073ae:	f000 8131 	beq.w	8007614 <HAL_UART_Init+0x314>
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b2:	f7ff f969 	bl	8006688 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f000 80d1 	beq.w	800755e <HAL_UART_Init+0x25e>
 80073bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80073be:	e081      	b.n	80074c4 <HAL_UART_Init+0x1c4>
    huart->Lock = HAL_UNLOCKED;
 80073c0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80073c4:	f7fc fd06 	bl	8003dd4 <HAL_UART_MspInit>
 80073c8:	e7a3      	b.n	8007312 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ca:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80073ce:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80073d2:	430a      	orrs	r2, r1
 80073d4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073da:	4896      	ldr	r0, [pc, #600]	; (8007634 <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073dc:	f022 020f 	bic.w	r2, r2, #15
 80073e0:	430a      	orrs	r2, r1
 80073e2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073e4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80073e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f0:	f000 8134 	beq.w	800765c <HAL_UART_Init+0x35c>
 80073f4:	d80c      	bhi.n	8007410 <HAL_UART_Init+0x110>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 812b 	beq.w	8007652 <HAL_UART_Init+0x352>
 80073fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007400:	d1c2      	bne.n	8007388 <HAL_UART_Init+0x88>
        pclk = HAL_RCC_GetSysClockFreq();
 8007402:	f7fe ffdf 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007406:	2800      	cmp	r0, #0
 8007408:	f000 80a9 	beq.w	800755e <HAL_UART_Init+0x25e>
 800740c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800740e:	e004      	b.n	800741a <HAL_UART_Init+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007410:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007414:	d1b8      	bne.n	8007388 <HAL_UART_Init+0x88>
        pclk = (uint32_t) LSE_VALUE;
 8007416:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800741a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800741c:	4b86      	ldr	r3, [pc, #536]	; (8007638 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800741e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007422:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8007426:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800742a:	42b3      	cmp	r3, r6
 800742c:	d3ac      	bcc.n	8007388 <HAL_UART_Init+0x88>
 800742e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007432:	d8a9      	bhi.n	8007388 <HAL_UART_Init+0x88>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007434:	2600      	movs	r6, #0
 8007436:	2300      	movs	r3, #0
 8007438:	4631      	mov	r1, r6
 800743a:	f7f8 feed 	bl	8000218 <__aeabi_uldivmod>
 800743e:	020b      	lsls	r3, r1, #8
 8007440:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007444:	0202      	lsls	r2, r0, #8
 8007446:	0868      	lsrs	r0, r5, #1
 8007448:	1810      	adds	r0, r2, r0
 800744a:	f143 0100 	adc.w	r1, r3, #0
 800744e:	462a      	mov	r2, r5
 8007450:	4633      	mov	r3, r6
 8007452:	f7f8 fee1 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007456:	4b79      	ldr	r3, [pc, #484]	; (800763c <HAL_UART_Init+0x33c>)
 8007458:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800745c:	429a      	cmp	r2, r3
 800745e:	d893      	bhi.n	8007388 <HAL_UART_Init+0x88>
          huart->Instance->BRR = usartdiv;
 8007460:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8007462:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8007466:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8007468:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800746c:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 800746e:	e043      	b.n	80074f8 <HAL_UART_Init+0x1f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007470:	4b70      	ldr	r3, [pc, #448]	; (8007634 <HAL_UART_Init+0x334>)
 8007472:	4a73      	ldr	r2, [pc, #460]	; (8007640 <HAL_UART_Init+0x340>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f003 030c 	and.w	r3, r3, #12
 800747c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800747e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007482:	d079      	beq.n	8007578 <HAL_UART_Init+0x278>
    switch (clocksource)
 8007484:	2b08      	cmp	r3, #8
 8007486:	f63f af7f 	bhi.w	8007388 <HAL_UART_Init+0x88>
 800748a:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <HAL_UART_Init+0x190>)
 800748c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007490:	08007553 	.word	0x08007553
 8007494:	080073b3 	.word	0x080073b3
 8007498:	08007523 	.word	0x08007523
 800749c:	08007389 	.word	0x08007389
 80074a0:	08007547 	.word	0x08007547
 80074a4:	08007389 	.word	0x08007389
 80074a8:	08007389 	.word	0x08007389
 80074ac:	08007389 	.word	0x08007389
 80074b0:	080074c1 	.word	0x080074c1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074b4:	2b30      	cmp	r3, #48	; 0x30
 80074b6:	f47f af67 	bne.w	8007388 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80074be:	d074      	beq.n	80075aa <HAL_UART_Init+0x2aa>
 80074c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c4:	6862      	ldr	r2, [r4, #4]
 80074c6:	4b5c      	ldr	r3, [pc, #368]	; (8007638 <HAL_UART_Init+0x338>)
 80074c8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80074cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80074d0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80074d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074d8:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074da:	f1a3 0110 	sub.w	r1, r3, #16
 80074de:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80074e2:	4291      	cmp	r1, r2
 80074e4:	f63f af50 	bhi.w	8007388 <HAL_UART_Init+0x88>
        huart->Instance->BRR = usartdiv;
 80074e8:	6820      	ldr	r0, [r4, #0]
 80074ea:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 80074ec:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 80074ee:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80074f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074f6:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d138      	bne.n	8007570 <HAL_UART_Init+0x270>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800750e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8007516:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007518:	601a      	str	r2, [r3, #0]
}
 800751a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 800751e:	f7ff be8b 	b.w	8007238 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8007522:	4848      	ldr	r0, [pc, #288]	; (8007644 <HAL_UART_Init+0x344>)
 8007524:	e7ce      	b.n	80074c4 <HAL_UART_Init+0x1c4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007526:	4b43      	ldr	r3, [pc, #268]	; (8007634 <HAL_UART_Init+0x334>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007530:	2b80      	cmp	r3, #128	; 0x80
 8007532:	f000 8095 	beq.w	8007660 <HAL_UART_Init+0x360>
 8007536:	d861      	bhi.n	80075fc <HAL_UART_Init+0x2fc>
 8007538:	b143      	cbz	r3, 800754c <HAL_UART_Init+0x24c>
 800753a:	2b40      	cmp	r3, #64	; 0x40
 800753c:	f47f af24 	bne.w	8007388 <HAL_UART_Init+0x88>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007540:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007544:	d060      	beq.n	8007608 <HAL_UART_Init+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 8007546:	f7fe ff3d 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
        break;
 800754a:	e734      	b.n	80073b6 <HAL_UART_Init+0xb6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800754c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007550:	d07c      	beq.n	800764c <HAL_UART_Init+0x34c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007552:	f7ff f887 	bl	8006664 <HAL_RCC_GetPCLK1Freq>
        break;
 8007556:	e72e      	b.n	80073b6 <HAL_UART_Init+0xb6>
 8007558:	4a3b      	ldr	r2, [pc, #236]	; (8007648 <HAL_UART_Init+0x348>)
 800755a:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800755c:	e78f      	b.n	800747e <HAL_UART_Init+0x17e>
  huart->RxISR = NULL;
 800755e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8007560:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 8007566:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800756a:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0c6      	beq.n	80074fe <HAL_UART_Init+0x1fe>
    UART_AdvFeatureConfig(huart);
 8007570:	4620      	mov	r0, r4
 8007572:	f7ff fe09 	bl	8007188 <UART_AdvFeatureConfig>
 8007576:	e7c2      	b.n	80074fe <HAL_UART_Init+0x1fe>
    switch (clocksource)
 8007578:	2b08      	cmp	r3, #8
 800757a:	f63f af05 	bhi.w	8007388 <HAL_UART_Init+0x88>
 800757e:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <HAL_UART_Init+0x284>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	0800764d 	.word	0x0800764d
 8007588:	08007615 	.word	0x08007615
 800758c:	080075a9 	.word	0x080075a9
 8007590:	08007389 	.word	0x08007389
 8007594:	08007609 	.word	0x08007609
 8007598:	08007389 	.word	0x08007389
 800759c:	08007389 	.word	0x08007389
 80075a0:	08007389 	.word	0x08007389
 80075a4:	080075ab 	.word	0x080075ab
        pclk = (uint32_t) HSI_VALUE;
 80075a8:	4826      	ldr	r0, [pc, #152]	; (8007644 <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075aa:	6862      	ldr	r2, [r4, #4]
 80075ac:	4922      	ldr	r1, [pc, #136]	; (8007638 <HAL_UART_Init+0x338>)
 80075ae:	0853      	lsrs	r3, r2, #1
 80075b0:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 80075b4:	fbb0 f0f1 	udiv	r0, r0, r1
 80075b8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80075bc:	fbb0 f0f2 	udiv	r0, r0, r2
 80075c0:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075c2:	f1a2 0110 	sub.w	r1, r2, #16
 80075c6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80075ca:	4299      	cmp	r1, r3
 80075cc:	f63f aedc 	bhi.w	8007388 <HAL_UART_Init+0x88>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075d0:	f020 030f 	bic.w	r3, r0, #15
 80075d4:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075d6:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 80075da:	6820      	ldr	r0, [r4, #0]
 80075dc:	4313      	orrs	r3, r2
 80075de:	e784      	b.n	80074ea <HAL_UART_Init+0x1ea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075e0:	4b14      	ldr	r3, [pc, #80]	; (8007634 <HAL_UART_Init+0x334>)
 80075e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d038      	beq.n	8007660 <HAL_UART_Init+0x360>
 80075ee:	f63f af61 	bhi.w	80074b4 <HAL_UART_Init+0x1b4>
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0aa      	beq.n	800754c <HAL_UART_Init+0x24c>
 80075f6:	2b10      	cmp	r3, #16
 80075f8:	d0a2      	beq.n	8007540 <HAL_UART_Init+0x240>
 80075fa:	e6c5      	b.n	8007388 <HAL_UART_Init+0x88>
 80075fc:	2bc0      	cmp	r3, #192	; 0xc0
 80075fe:	f43f af5c 	beq.w	80074ba <HAL_UART_Init+0x1ba>
 8007602:	e6c1      	b.n	8007388 <HAL_UART_Init+0x88>
}
 8007604:	2001      	movs	r0, #1
 8007606:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8007608:	f7fe fedc 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800760c:	2800      	cmp	r0, #0
 800760e:	d0a6      	beq.n	800755e <HAL_UART_Init+0x25e>
 8007610:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007612:	e7ca      	b.n	80075aa <HAL_UART_Init+0x2aa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007614:	f7ff f838 	bl	8006688 <HAL_RCC_GetPCLK2Freq>
        break;
 8007618:	e7f8      	b.n	800760c <HAL_UART_Init+0x30c>
 800761a:	bf00      	nop
 800761c:	cfff69f3 	.word	0xcfff69f3
 8007620:	40008000 	.word	0x40008000
 8007624:	40013800 	.word	0x40013800
 8007628:	40004400 	.word	0x40004400
 800762c:	40004800 	.word	0x40004800
 8007630:	40004c00 	.word	0x40004c00
 8007634:	40021000 	.word	0x40021000
 8007638:	0800a584 	.word	0x0800a584
 800763c:	000ffcff 	.word	0x000ffcff
 8007640:	0800a574 	.word	0x0800a574
 8007644:	00f42400 	.word	0x00f42400
 8007648:	0800a570 	.word	0x0800a570
        pclk = HAL_RCC_GetPCLK1Freq();
 800764c:	f7ff f80a 	bl	8006664 <HAL_RCC_GetPCLK1Freq>
        break;
 8007650:	e7dc      	b.n	800760c <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007652:	f7ff f807 	bl	8006664 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007656:	2800      	cmp	r0, #0
 8007658:	d081      	beq.n	800755e <HAL_UART_Init+0x25e>
 800765a:	e6d7      	b.n	800740c <HAL_UART_Init+0x10c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800765c:	4803      	ldr	r0, [pc, #12]	; (800766c <HAL_UART_Init+0x36c>)
 800765e:	e6dc      	b.n	800741a <HAL_UART_Init+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007660:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8007664:	4801      	ldr	r0, [pc, #4]	; (800766c <HAL_UART_Init+0x36c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007666:	f47f af2d 	bne.w	80074c4 <HAL_UART_Init+0x1c4>
 800766a:	e79e      	b.n	80075aa <HAL_UART_Init+0x2aa>
 800766c:	00f42400 	.word	0x00f42400

08007670 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007670:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007674:	2a01      	cmp	r2, #1
 8007676:	d017      	beq.n	80076a8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007678:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800767a:	2124      	movs	r1, #36	; 0x24
{
 800767c:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 800767e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8007682:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007684:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007686:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007688:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800768a:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800768e:	f024 0401 	bic.w	r4, r4, #1
 8007692:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8007694:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007696:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007698:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800769a:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 800769e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80076a0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80076a4:	bc30      	pop	{r4, r5}
 80076a6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80076a8:	2002      	movs	r0, #2
}
 80076aa:	4770      	bx	lr

080076ac <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076ac:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80076b0:	2a01      	cmp	r2, #1
 80076b2:	d033      	beq.n	800771c <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 80076b4:	4603      	mov	r3, r0
 80076b6:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076b8:	681a      	ldr	r2, [r3, #0]
{
 80076ba:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80076bc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076c0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076c2:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076c4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80076c6:	f020 0001 	bic.w	r0, r0, #1
 80076ca:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076cc:	6890      	ldr	r0, [r2, #8]
 80076ce:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80076d2:	4301      	orrs	r1, r0
 80076d4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076d6:	b1f5      	cbz	r5, 8007716 <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076d8:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076da:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076dc:	4810      	ldr	r0, [pc, #64]	; (8007720 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80076de:	4f11      	ldr	r7, [pc, #68]	; (8007724 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076e0:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076e4:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076e6:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076e8:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80076ea:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80076ec:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076ee:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076f0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076f2:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076f6:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076fa:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80076fe:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8007700:	2520      	movs	r5, #32
 8007702:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007706:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007708:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800770c:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800770e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8007712:	bcf0      	pop	{r4, r5, r6, r7}
 8007714:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8007716:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007718:	4608      	mov	r0, r1
 800771a:	e7ee      	b.n	80076fa <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800771c:	2002      	movs	r0, #2
}
 800771e:	4770      	bx	lr
 8007720:	0800a5a4 	.word	0x0800a5a4
 8007724:	0800a59c 	.word	0x0800a59c

08007728 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007728:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800772c:	2a01      	cmp	r2, #1
 800772e:	d033      	beq.n	8007798 <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 8007730:	4603      	mov	r3, r0
 8007732:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007734:	681a      	ldr	r2, [r3, #0]
{
 8007736:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8007738:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800773c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800773e:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007740:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8007742:	f020 0001 	bic.w	r0, r0, #1
 8007746:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007748:	6890      	ldr	r0, [r2, #8]
 800774a:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800774e:	4301      	orrs	r1, r0
 8007750:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007752:	b1f5      	cbz	r5, 8007792 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007754:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007756:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007758:	4810      	ldr	r0, [pc, #64]	; (800779c <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800775a:	4f11      	ldr	r7, [pc, #68]	; (80077a0 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800775c:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007760:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007762:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007764:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007766:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007768:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800776a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800776c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800776e:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007772:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007776:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800777a:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 800777c:	2520      	movs	r5, #32
 800777e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007782:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007784:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8007788:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800778a:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 800778e:	bcf0      	pop	{r4, r5, r6, r7}
 8007790:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8007792:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007794:	4608      	mov	r0, r1
 8007796:	e7ee      	b.n	8007776 <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 8007798:	2002      	movs	r0, #2
}
 800779a:	4770      	bx	lr
 800779c:	0800a5a4 	.word	0x0800a5a4
 80077a0:	0800a59c 	.word	0x0800a59c

080077a4 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80077a4:	88c0      	ldrh	r0, [r0, #6]
 80077a6:	4770      	bx	lr

080077a8 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80077a8:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80077aa:	8840      	ldrh	r0, [r0, #2]
 80077ac:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80077b0:	0c00      	lsrs	r0, r0, #16
 80077b2:	4770      	bx	lr

080077b4 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(CircleLimitation_Handle_t * pHandle, qd_t Vqd)
{
 80077b4:	b570      	push	{r4, r5, r6, lr}
  int32_t vd_square_limit;
  int32_t new_q;
  int32_t new_d;
  qd_t Local_Vqd=Vqd;

  MaxModule = pHandle->MaxModule;
 80077b6:	8803      	ldrh	r3, [r0, #0]
 80077b8:	140c      	asrs	r4, r1, #16
{
 80077ba:	b084      	sub	sp, #16
 80077bc:	b20d      	sxth	r5, r1

  square_q = (int32_t)(Vqd.q) * Vqd.q;
  square_d = (int32_t)(Vqd.d) * Vqd.d;
 80077be:	fb04 f204 	mul.w	r2, r4, r4
{
 80077c2:	9101      	str	r1, [sp, #4]
  square_limit = MaxModule * MaxModule;
 80077c4:	fb03 f303 	mul.w	r3, r3, r3
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
  square_sum = square_q + square_d;
 80077c8:	fb05 2105 	mla	r1, r5, r5, r2

  if (square_sum > square_limit)
 80077cc:	428b      	cmp	r3, r1
 80077ce:	da10      	bge.n	80077f2 <Circle_Limitation+0x3e>
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
 80077d0:	8846      	ldrh	r6, [r0, #2]
 80077d2:	fb06 f006 	mul.w	r0, r6, r6
  {
    if(square_d <= vd_square_limit)
 80077d6:	4282      	cmp	r2, r0
 80077d8:	dd14      	ble.n	8007804 <Circle_Limitation+0x50>
      new_d = Vqd.d;
    }
    else
    {
      new_d = pHandle->MaxVd;
      if(Vqd.d < 0)
 80077da:	2c00      	cmp	r4, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
      square_temp = (square_limit - vd_square_limit)/1048576;
      new_q = SqrtTable[square_temp];
#else
      square_temp = square_limit - vd_square_limit;
      new_q = MCM_Sqrt(square_temp);
 80077dc:	eba3 0000 	sub.w	r0, r3, r0
        new_d = -new_d;
 80077e0:	bfb8      	it	lt
 80077e2:	4276      	neglt	r6, r6
      new_q = MCM_Sqrt(square_temp);
 80077e4:	f7f9 ff74 	bl	80016d0 <MCM_Sqrt>
#endif
      if(Vqd.q < 0)
 80077e8:	2d00      	cmp	r5, #0
      {
        new_q = - new_q;
 80077ea:	bfb8      	it	lt
 80077ec:	4240      	neglt	r0, r0
 80077ee:	b234      	sxth	r4, r6
      }
    }
    Local_Vqd.q = new_q;
 80077f0:	b205      	sxth	r5, r0
    Local_Vqd.d = new_d;
  }
  return(Local_Vqd);
 80077f2:	b2ad      	uxth	r5, r5
 80077f4:	2000      	movs	r0, #0
 80077f6:	b2a4      	uxth	r4, r4
 80077f8:	f365 000f 	bfi	r0, r5, #0, #16
 80077fc:	f364 401f 	bfi	r0, r4, #16, #16
}
 8007800:	b004      	add	sp, #16
 8007802:	bd70      	pop	{r4, r5, r6, pc}
      new_q = MCM_Sqrt(square_temp);
 8007804:	1a98      	subs	r0, r3, r2
 8007806:	f7f9 ff63 	bl	80016d0 <MCM_Sqrt>
      if(Vqd.q < 0)
 800780a:	2d00      	cmp	r5, #0
 800780c:	daf0      	bge.n	80077f0 <Circle_Limitation+0x3c>
        new_q = -new_q;
 800780e:	4240      	negs	r0, r0
 8007810:	e7ee      	b.n	80077f0 <Circle_Limitation+0x3c>
 8007812:	bf00      	nop

08007814 <MCP_ReceivedPacket>:
  uint8_t motorID;
  uint8_t MCPResponse;
  uint8_t userCommand=0;
  int16_t txSyncFreeSpace;
  
  if (pHandle->rxLength != 0)
 8007814:	8982      	ldrh	r2, [r0, #12]
 8007816:	2a00      	cmp	r2, #0
 8007818:	d060      	beq.n	80078dc <MCP_ReceivedPacket+0xc8>
{
 800781a:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    packetHeader = (uint16_t *) pHandle->rxBuffer;  
 800781c:	6846      	ldr	r6, [r0, #4]
    command = *packetHeader & CMD_MASK;
 800781e:	8833      	ldrh	r3, [r6, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007820:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
    command = *packetHeader & CMD_MASK;
 8007824:	f023 0507 	bic.w	r5, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007828:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 800782c:	b083      	sub	sp, #12
 800782e:	4604      	mov	r4, r0
    command = *packetHeader & CMD_MASK;
 8007830:	b2ad      	uxth	r5, r5
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8007832:	d06c      	beq.n	800790e <MCP_ReceivedPacket+0xfa>
    MCI_Handle_t * pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007834:	6801      	ldr	r1, [r0, #0]
    MCI_Handle_t * pMCI = &Mci[motorID];
 8007836:	4f60      	ldr	r7, [pc, #384]	; (80079b8 <MCP_ReceivedPacket+0x1a4>)
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007838:	8989      	ldrh	r1, [r1, #12]
    motorID = (*packetHeader & MOTOR_MASK)-1;
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	3b01      	subs	r3, #1
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007840:	3a02      	subs	r2, #2
    MCI_Handle_t * pMCI = &Mci[motorID];
 8007842:	b2db      	uxtb	r3, r3
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007844:	b290      	uxth	r0, r2
    MCI_Handle_t * pMCI = &Mci[motorID];
 8007846:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 800784a:	3602      	adds	r6, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800784c:	3901      	subs	r1, #1
    /* Initialization of the tx length, command which send back data has to set the txLength (case of Read register)*/
    pHandle->txLength = 0;
 800784e:	2200      	movs	r2, #0
    
    switch (command) 
 8007850:	2d60      	cmp	r5, #96	; 0x60
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007852:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007854:	6066      	str	r6, [r4, #4]
    MCI_Handle_t * pMCI = &Mci[motorID];
 8007856:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800785a:	b289      	uxth	r1, r1
    pHandle->txLength = 0;
 800785c:	81e2      	strh	r2, [r4, #14]
    switch (command) 
 800785e:	d83e      	bhi.n	80078de <MCP_ReceivedPacket+0xca>
 8007860:	2d60      	cmp	r5, #96	; 0x60
 8007862:	d832      	bhi.n	80078ca <MCP_ReceivedPacket+0xb6>
 8007864:	e8df f005 	tbb	[pc, r5]
 8007868:	31313197 	.word	0x31313197
 800786c:	31313131 	.word	0x31313131
 8007870:	3131319f 	.word	0x3131319f
 8007874:	31313131 	.word	0x31313131
 8007878:	31313175 	.word	0x31313175
 800787c:	31313131 	.word	0x31313131
 8007880:	3131314b 	.word	0x3131314b
 8007884:	31313131 	.word	0x31313131
 8007888:	31313145 	.word	0x31313145
 800788c:	31313131 	.word	0x31313131
 8007890:	3131317a 	.word	0x3131317a
 8007894:	31313131 	.word	0x31313131
 8007898:	31313141 	.word	0x31313141
 800789c:	31313131 	.word	0x31313131
 80078a0:	31313185 	.word	0x31313185
 80078a4:	31313131 	.word	0x31313131
 80078a8:	3131318b 	.word	0x3131318b
 80078ac:	31313131 	.word	0x31313131
 80078b0:	31313191 	.word	0x31313191
 80078b4:	31313131 	.word	0x31313131
 80078b8:	313131a4 	.word	0x313131a4
 80078bc:	31313131 	.word	0x31313131
 80078c0:	313131a4 	.word	0x313131a4
 80078c4:	31313131 	.word	0x31313131
 80078c8:	a4          	.byte	0xa4
 80078c9:	00          	.byte	0x00
 80078ca:	2300      	movs	r3, #0
 80078cc:	2002      	movs	r0, #2
    	  }
        break;
      default :
        MCPResponse = MCP_CMD_UNKNOWN;
      }
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80078ce:	68a2      	ldr	r2, [r4, #8]
 80078d0:	54d0      	strb	r0, [r2, r3]
      pHandle->txLength++;
 80078d2:	89e3      	ldrh	r3, [r4, #14]
 80078d4:	3301      	adds	r3, #1
 80078d6:	81e3      	strh	r3, [r4, #14]
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
    /* Nothing to do, txBuffer and txLength have not been modified */
  } 
}
 80078d8:	b003      	add	sp, #12
 80078da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078dc:	4770      	bx	lr
    switch (command) 
 80078de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80078e2:	d065      	beq.n	80079b0 <MCP_ReceivedPacket+0x19c>
 80078e4:	4613      	mov	r3, r2
 80078e6:	2002      	movs	r0, #2
 80078e8:	e7f1      	b.n	80078ce <MCP_ReceivedPacket+0xba>
          if (MCI_GetSTMState(pMCI) == IDLE)
 80078ea:	4638      	mov	r0, r7
 80078ec:	f7f9 fdaa 	bl	8001444 <MCI_GetSTMState>
 80078f0:	b128      	cbz	r0, 80078fe <MCP_ReceivedPacket+0xea>
            MCI_StopMotor(pMCI);
 80078f2:	4638      	mov	r0, r7
 80078f4:	f7f9 fd5e 	bl	80013b4 <MCI_StopMotor>
            MCPResponse = MCP_CMD_OK;
 80078f8:	89e3      	ldrh	r3, [r4, #14]
 80078fa:	2000      	movs	r0, #0
 80078fc:	e7e7      	b.n	80078ce <MCP_ReceivedPacket+0xba>
            MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 80078fe:	4638      	mov	r0, r7
 8007900:	f7f9 fd4e 	bl	80013a0 <MCI_StartMotor>
 8007904:	f080 0001 	eor.w	r0, r0, #1
 8007908:	89e3      	ldrh	r3, [r4, #14]
 800790a:	b2c0      	uxtb	r0, r0
 800790c:	e7df      	b.n	80078ce <MCP_ReceivedPacket+0xba>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800790e:	6801      	ldr	r1, [r0, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007910:	3a02      	subs	r2, #2
        userCommand = (command >> 3) & 0x1f;
 8007912:	f3c5 03c7 	ubfx	r3, r5, #3, #8
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007916:	b290      	uxth	r0, r2
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007918:	3602      	adds	r6, #2
    pHandle->txLength = 0;
 800791a:	2200      	movs	r2, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 800791c:	f013 0f1e 	tst.w	r3, #30
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007920:	8989      	ldrh	r1, [r1, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8007922:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8007924:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0;
 8007926:	81e2      	strh	r2, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007928:	d002      	beq.n	8007930 <MCP_ReceivedPacket+0x11c>
        MCPResponse = MCP_CMD_OK;
 800792a:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 800792c:	200d      	movs	r0, #13
 800792e:	e7ce      	b.n	80078ce <MCP_ReceivedPacket+0xba>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8007930:	3901      	subs	r1, #1
 8007932:	b20a      	sxth	r2, r1
        userCommand = (command >> 3) & 0x1f;
 8007934:	f003 031f 	and.w	r3, r3, #31
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8007938:	4920      	ldr	r1, [pc, #128]	; (80079bc <MCP_ReceivedPacket+0x1a8>)
 800793a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800793e:	2d00      	cmp	r5, #0
 8007940:	d0f3      	beq.n	800792a <MCP_ReceivedPacket+0x116>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8007942:	68a3      	ldr	r3, [r4, #8]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	4631      	mov	r1, r6
 8007948:	f104 030e 	add.w	r3, r4, #14
 800794c:	47a8      	blx	r5
 800794e:	89e3      	ldrh	r3, [r4, #14]
 8007950:	e7bd      	b.n	80078ce <MCP_ReceivedPacket+0xba>
        MCPResponse = RI_GetRegCommandParser (pHandle,txSyncFreeSpace); 
 8007952:	4620      	mov	r0, r4
 8007954:	f7fb f8d4 	bl	8002b00 <RI_GetRegCommandParser>
        break;
 8007958:	89e3      	ldrh	r3, [r4, #14]
 800795a:	e7b8      	b.n	80078ce <MCP_ReceivedPacket+0xba>
          if (MCI_GetSTMState(pMCI) == RUN)
 800795c:	4638      	mov	r0, r7
 800795e:	f7f9 fd71 	bl	8001444 <MCI_GetSTMState>
 8007962:	2806      	cmp	r0, #6
 8007964:	d1c8      	bne.n	80078f8 <MCP_ReceivedPacket+0xe4>
            MCI_StopRamp(pMCI);
 8007966:	4638      	mov	r0, r7
 8007968:	f7f9 fd9e 	bl	80014a8 <MCI_StopRamp>
 800796c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800796e:	2000      	movs	r0, #0
 8007970:	e7ad      	b.n	80078ce <MCP_ReceivedPacket+0xba>
          MCI_FaultAcknowledged(pMCI);
 8007972:	4638      	mov	r0, r7
 8007974:	f7f9 fd22 	bl	80013bc <MCI_FaultAcknowledged>
        break;
 8007978:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 800797a:	2000      	movs	r0, #0
        break;
 800797c:	e7a7      	b.n	80078ce <MCP_ReceivedPacket+0xba>
        MCI_EncoderAlign(pMCI);
 800797e:	4638      	mov	r0, r7
 8007980:	f7f9 fd20 	bl	80013c4 <MCI_EncoderAlign>
        break;
 8007984:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007986:	2000      	movs	r0, #0
        break;
 8007988:	e7a1      	b.n	80078ce <MCP_ReceivedPacket+0xba>
        MCI_Clear_Iqdref(pMCI);
 800798a:	4638      	mov	r0, r7
 800798c:	f7f9 fdf4 	bl	8001578 <MCI_Clear_Iqdref>
        break;
 8007990:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8007992:	2000      	movs	r0, #0
        break;
 8007994:	e79b      	b.n	80078ce <MCP_ReceivedPacket+0xba>
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8007996:	68a3      	ldr	r3, [r4, #8]
    	pHandle->txLength = 4;
 8007998:	2104      	movs	r1, #4
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 800799a:	2201      	movs	r2, #1
    	pHandle->txLength = 4;
 800799c:	81e1      	strh	r1, [r4, #14]
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 800799e:	701a      	strb	r2, [r3, #0]
      break;
 80079a0:	89e3      	ldrh	r3, [r4, #14]
    	MCPResponse = MCP_CMD_OK;
 80079a2:	2000      	movs	r0, #0
      break;
 80079a4:	e793      	b.n	80078ce <MCP_ReceivedPacket+0xba>
        MCPResponse = RI_SetRegCommandParser (pHandle,txSyncFreeSpace); 
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7fa fcf0 	bl	800238c <RI_SetRegCommandParser>
      break;
 80079ac:	89e3      	ldrh	r3, [r4, #14]
 80079ae:	e78e      	b.n	80078ce <MCP_ReceivedPacket+0xba>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80079b0:	b20a      	sxth	r2, r1
  uint8_t userCommand=0;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e7c0      	b.n	8007938 <MCP_ReceivedPacket+0x124>
 80079b6:	bf00      	nop
 80079b8:	20000a14 	.word	0x20000a14
 80079bc:	20000aac 	.word	0x20000aac

080079c0 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog (MCPA_Handle_t *pHandle)
{
 80079c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80079c2:	7fc3      	ldrb	r3, [r0, #31]
 80079c4:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 80079c8:	429a      	cmp	r2, r3
{
 80079ca:	4604      	mov	r4, r0
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80079cc:	d002      	beq.n	80079d4 <MCPA_dataLog+0x14>
    }     
  }
  else 
  {
    /* nothing to log just waiting next call to MCPA_datalog*/
    pHandle->HFIndex++;
 80079ce:	3301      	adds	r3, #1
 80079d0:	77c3      	strb	r3, [r0, #31]
  }
}  
 80079d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pHandle->bufferIndex == 0)
 80079d4:	8b05      	ldrh	r5, [r0, #24]
    pHandle->HFIndex = 0;
 80079d6:	2300      	movs	r3, #0
 80079d8:	77c3      	strb	r3, [r0, #31]
    if (pHandle->bufferIndex == 0)
 80079da:	b1a5      	cbz	r5, 8007a06 <MCPA_dataLog+0x46>
 80079dc:	6961      	ldr	r1, [r4, #20]
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 80079de:	8ba0      	ldrh	r0, [r4, #28]
 80079e0:	42a8      	cmp	r0, r5
 80079e2:	d24d      	bcs.n	8007a80 <MCPA_dataLog+0xc0>
 80079e4:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
      if (pHandle->MFRateBuff == 254) /* MFRateBuff = 254 means we dump MF data once per buffer */
 80079e8:	2afe      	cmp	r2, #254	; 0xfe
 80079ea:	d068      	beq.n	8007abe <MCPA_dataLog+0xfe>
       *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 80079ec:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80079f0:	534b      	strh	r3, [r1, r5]
       pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 80079f2:	8b22      	ldrh	r2, [r4, #24]
 80079f4:	6820      	ldr	r0, [r4, #0]
 80079f6:	3202      	adds	r2, #2
 80079f8:	2309      	movs	r3, #9
 80079fa:	6845      	ldr	r5, [r0, #4]
 80079fc:	b292      	uxth	r2, r2
 80079fe:	47a8      	blx	r5
       pHandle->bufferIndex = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	8323      	strh	r3, [r4, #24]
}  
 8007a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer, (void **) &pHandle->currentBuffer, MCTL_ASYNC))
 8007a06:	4601      	mov	r1, r0
 8007a08:	2209      	movs	r2, #9
 8007a0a:	f851 0b14 	ldr.w	r0, [r1], #20
 8007a0e:	6803      	ldr	r3, [r0, #0]
 8007a10:	4798      	blx	r3
 8007a12:	b388      	cbz	r0, 8007a78 <MCPA_dataLog+0xb8>
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007a14:	4b4b      	ldr	r3, [pc, #300]	; (8007b44 <MCPA_dataLog+0x184>)
        logValue = (uint32_t *) pHandle->currentBuffer;
 8007a16:	6961      	ldr	r1, [r4, #20]
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	600b      	str	r3, [r1, #0]
        if (pHandle->Mark != pHandle->MarkBuff)
 8007a1c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8007a20:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
        pHandle->MFIndex = 0; /* Restart the motif from scratch at each buffer*/
 8007a24:	f884 5020 	strb.w	r5, [r4, #32]
        if (pHandle->Mark != pHandle->MarkBuff)
 8007a28:	429a      	cmp	r2, r3
        pHandle->bufferIndex = 4; 
 8007a2a:	f04f 0504 	mov.w	r5, #4
 8007a2e:	8325      	strh	r5, [r4, #24]
        if (pHandle->Mark != pHandle->MarkBuff)
 8007a30:	d0d5      	beq.n	80079de <MCPA_dataLog+0x1e>
          pHandle->HFNumBuff = pHandle->HFNum;
 8007a32:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
          pHandle->MFNumBuff = pHandle->MFNum;
 8007a36:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
          pHandle->HFRateBuff = pHandle->HFRate;
 8007a3a:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
          pHandle->MFRateBuff = pHandle->MFRate;
 8007a3e:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
          pHandle->MarkBuff = pHandle->Mark;
 8007a42:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8007a46:	1842      	adds	r2, r0, r1
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8007a48:	8b63      	ldrh	r3, [r4, #26]
          pHandle->HFNumBuff = pHandle->HFNum;
 8007a4a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
          pHandle->MFNumBuff = pHandle->MFNum;
 8007a4e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8007a52:	0092      	lsls	r2, r2, #2
 8007a54:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8007a58:	83a3      	strh	r3, [r4, #28]
          pHandle->HFRateBuff = pHandle->HFRate;
 8007a5a:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
          pHandle->MFRateBuff = pHandle->MFRate;
 8007a5e:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8007a62:	f002 fbd5 	bl	800a210 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8007a66:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8007a6a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8007a6e:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8007a72:	441a      	add	r2, r3
 8007a74:	f002 fbcc 	bl	800a210 <memcpy>
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8007a78:	8b25      	ldrh	r5, [r4, #24]
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	d1ae      	bne.n	80079dc <MCPA_dataLog+0x1c>
}  
 8007a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007a80:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8007a84:	194e      	adds	r6, r1, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d055      	beq.n	8007b36 <MCPA_dataLog+0x176>
        *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]);
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	68a7      	ldr	r7, [r4, #8]
 8007a8e:	4610      	mov	r0, r2
 8007a90:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	f826 3b02 	strh.w	r3, [r6], #2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8007a9a:	8b25      	ldrh	r5, [r4, #24]
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007a9c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007aa0:	3201      	adds	r2, #1
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8007aa2:	3502      	adds	r5, #2
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007aa4:	b2d0      	uxtb	r0, r2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8007aa6:	b2ad      	uxth	r5, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007aa8:	4283      	cmp	r3, r0
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 8007aaa:	8325      	strh	r5, [r4, #24]
      for (i=0; i<pHandle->HFNumBuff; i++)
 8007aac:	d8f0      	bhi.n	8007a90 <MCPA_dataLog+0xd0>
      if (pHandle->MFRateBuff < 254) 
 8007aae:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8007ab2:	2afd      	cmp	r2, #253	; 0xfd
 8007ab4:	d919      	bls.n	8007aea <MCPA_dataLog+0x12a>
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007ab6:	8ba3      	ldrh	r3, [r4, #28]
 8007ab8:	42ab      	cmp	r3, r5
 8007aba:	d395      	bcc.n	80079e8 <MCPA_dataLog+0x28>
}  
 8007abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007abe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007ac2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8007ac6:	4418      	add	r0, r3
 8007ac8:	4298      	cmp	r0, r3
 8007aca:	dd8f      	ble.n	80079ec <MCPA_dataLog+0x2c>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007acc:	68a7      	ldr	r7, [r4, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007ace:	6926      	ldr	r6, [r4, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007ad0:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007ad8:	5cf2      	ldrb	r2, [r6, r3]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007ada:	3301      	adds	r3, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007adc:	4415      	add	r5, r2
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007ade:	b2db      	uxtb	r3, r3
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007ae0:	b2ad      	uxth	r5, r5
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007ae2:	4283      	cmp	r3, r0
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007ae4:	8325      	strh	r5, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007ae6:	dbf3      	blt.n	8007ad0 <MCPA_dataLog+0x110>
 8007ae8:	e780      	b.n	80079ec <MCPA_dataLog+0x2c>
 8007aea:	8ba0      	ldrh	r0, [r4, #28]
        if (pHandle->MFIndex == pHandle->MFRateBuff)  
 8007aec:	f894 5020 	ldrb.w	r5, [r4, #32]
 8007af0:	4295      	cmp	r5, r2
 8007af2:	d007      	beq.n	8007b04 <MCPA_dataLog+0x144>
          pHandle->MFIndex ++;
 8007af4:	3501      	adds	r5, #1
 8007af6:	f884 5020 	strb.w	r5, [r4, #32]
 8007afa:	8b25      	ldrh	r5, [r4, #24]
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007afc:	42a8      	cmp	r0, r5
 8007afe:	f4ff af75 	bcc.w	80079ec <MCPA_dataLog+0x2c>
}  
 8007b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b04:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 8007b08:	441e      	add	r6, r3
          pHandle->MFIndex = 0;
 8007b0a:	2200      	movs	r2, #0
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b0c:	429e      	cmp	r6, r3
          pHandle->MFIndex = 0;
 8007b0e:	f884 2020 	strb.w	r2, [r4, #32]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b12:	dd15      	ble.n	8007b40 <MCPA_dataLog+0x180>
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007b14:	f8d4 c008 	ldr.w	ip, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b18:	6927      	ldr	r7, [r4, #16]
 8007b1a:	8b25      	ldrh	r5, [r4, #24]
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007b1c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8007b20:	6812      	ldr	r2, [r2, #0]
 8007b22:	514a      	str	r2, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b24:	5cfa      	ldrb	r2, [r7, r3]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b26:	3301      	adds	r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b28:	4415      	add	r5, r2
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b2a:	b2db      	uxtb	r3, r3
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b2c:	b2ad      	uxth	r5, r5
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b2e:	42b3      	cmp	r3, r6
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b30:	8325      	strh	r5, [r4, #24]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b32:	dbf3      	blt.n	8007b1c <MCPA_dataLog+0x15c>
 8007b34:	e7e2      	b.n	8007afc <MCPA_dataLog+0x13c>
      if (pHandle->MFRateBuff < 254) 
 8007b36:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8007b3a:	2afd      	cmp	r2, #253	; 0xfd
 8007b3c:	d9d6      	bls.n	8007aec <MCPA_dataLog+0x12c>
}  
 8007b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b40:	8b25      	ldrh	r5, [r4, #24]
 8007b42:	e7db      	b.n	8007afc <MCPA_dataLog+0x13c>
 8007b44:	20000690 	.word	0x20000690

08007b48 <MCPA_flushDataLog>:

void MCPA_flushDataLog (MCPA_Handle_t *pHandle)
{
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8007b4a:	8b03      	ldrh	r3, [r0, #24]
 8007b4c:	b18b      	cbz	r3, 8007b72 <MCPA_flushDataLog+0x2a>
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8007b4e:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8007b52:	2afe      	cmp	r2, #254	; 0xfe
 8007b54:	4604      	mov	r4, r0
 8007b56:	d00d      	beq.n	8007b74 <MCPA_flushDataLog+0x2c>
 8007b58:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8007b5a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8007b5e:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8007b60:	8b22      	ldrh	r2, [r4, #24]
 8007b62:	6820      	ldr	r0, [r4, #0]
 8007b64:	3202      	adds	r2, #2
 8007b66:	2309      	movs	r3, #9
 8007b68:	6845      	ldr	r5, [r0, #4]
 8007b6a:	b292      	uxth	r2, r2
 8007b6c:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	8323      	strh	r3, [r4, #24]
  }   
}
 8007b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b74:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8007b78:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8007b7c:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b7e:	4415      	add	r5, r2
 8007b80:	42aa      	cmp	r2, r5
 8007b82:	daea      	bge.n	8007b5a <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007b84:	6887      	ldr	r7, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b86:	6906      	ldr	r6, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8007b88:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b90:	5cb0      	ldrb	r0, [r6, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b92:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b94:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b96:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b98:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b9a:	42aa      	cmp	r2, r5
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007b9c:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8007b9e:	dbf3      	blt.n	8007b88 <MCPA_flushDataLog+0x40>
 8007ba0:	e7db      	b.n	8007b5a <MCPA_flushDataLog+0x12>
 8007ba2:	bf00      	nop

08007ba4 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}
  
uint8_t MCPA_cfgLog (MCPA_Handle_t *pHandle, uint8_t * cfgdata)
{
 8007ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t newID, buffSize;
  uint8_t i;
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
  uint8_t result = MCP_CMD_OK;
  
  buffSize = *((uint16_t *) cfgdata);
 8007ba8:	880e      	ldrh	r6, [r1, #0]
{
 8007baa:	4604      	mov	r4, r0
  if (buffSize == 0)
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	d041      	beq.n	8007c34 <MCPA_cfgLog+0x90>
  { 
    /* Switch Off condition */
    MCPA_stopDataLog(pHandle);
  }
  else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8007bb0:	6803      	ldr	r3, [r0, #0]
 8007bb2:	89db      	ldrh	r3, [r3, #14]
 8007bb4:	42b3      	cmp	r3, r6
 8007bb6:	d33a      	bcc.n	8007c2e <MCPA_cfgLog+0x8a>
  {
    result = MCP_ERROR_NO_TXASYNC_SPACE;
  }  
  else
  {
     pHandle->HFRate = *((uint8_t *) &cfgdata[2]);
 8007bb8:	788b      	ldrb	r3, [r1, #2]
 8007bba:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     pHandle->HFNum  = *((uint8_t *) &cfgdata[3]);
 8007bbe:	78cf      	ldrb	r7, [r1, #3]
 8007bc0:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
     pHandle->MFRate = *((uint8_t *) &cfgdata[4]);
 8007bc4:	790b      	ldrb	r3, [r1, #4]
 8007bc6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8007bca:	794a      	ldrb	r2, [r1, #5]
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8007bcc:	7f83      	ldrb	r3, [r0, #30]
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 8007bce:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8007bd2:	4417      	add	r7, r2
 8007bd4:	429f      	cmp	r7, r3
 8007bd6:	dc4f      	bgt.n	8007c78 <MCPA_cfgLog+0xd4>
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
 8007bd8:	3106      	adds	r1, #6
     {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007bda:	2f00      	cmp	r7, #0
 8007bdc:	d053      	beq.n	8007c86 <MCPA_cfgLog+0xe2>
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
 8007bde:	2700      	movs	r7, #0
 8007be0:	4688      	mov	r8, r1
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007be2:	463d      	mov	r5, r7
 8007be4:	e010      	b.n	8007c08 <MCPA_cfgLog+0x64>
       {
         newID = *((uint16_t *) cfgdata);
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8007be6:	2002      	movs	r0, #2
 8007be8:	68e3      	ldr	r3, [r4, #12]
 8007bea:	5558      	strb	r0, [r3, r5]
         logSize = logSize+pHandle->dataSizeTable[i];
 8007bec:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007bee:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 8007bf2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
         logSize = logSize+pHandle->dataSizeTable[i];
 8007bf6:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007bf8:	3501      	adds	r5, #1
 8007bfa:	440b      	add	r3, r1
 8007bfc:	b2ed      	uxtb	r5, r5
         logSize = logSize+pHandle->dataSizeTable[i];
 8007bfe:	443a      	add	r2, r7
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007c00:	429d      	cmp	r5, r3
         logSize = logSize+pHandle->dataSizeTable[i];
 8007c02:	b2d7      	uxtb	r7, r2
         cfgdata = cfgdata+2; /* Point to the next UID */
 8007c04:	4641      	mov	r1, r8
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007c06:	da0f      	bge.n	8007c28 <MCPA_cfgLog+0x84>
         newID = *((uint16_t *) cfgdata);
 8007c08:	f838 9b02 	ldrh.w	r9, [r8], #2
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8007c0c:	6861      	ldr	r1, [r4, #4]
 8007c0e:	4648      	mov	r0, r9
 8007c10:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007c14:	f7fb fbf4 	bl	8003400 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8007c18:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	d8e2      	bhi.n	8007be6 <MCPA_cfgLog+0x42>
 8007c20:	4648      	mov	r0, r9
 8007c22:	f7fb fbe1 	bl	80033e8 <RI_GetIDSize>
 8007c26:	e7df      	b.n	8007be8 <MCPA_cfgLog+0x44>
 8007c28:	1d7b      	adds	r3, r7, #5
       }
       if (buffSize < (logSize+2+4) ) /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
 8007c2a:	429e      	cmp	r6, r3
 8007c2c:	dc1a      	bgt.n	8007c64 <MCPA_cfgLog+0xc0>
    result = MCP_ERROR_NO_TXASYNC_SPACE;
 8007c2e:	2009      	movs	r0, #9
     {
       result = MCP_ERROR_BAD_RAW_FORMAT;
     }
  }
  return result;
}
 8007c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8007c34:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8007c36:	f880 6029 	strb.w	r6, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8007c3a:	b153      	cbz	r3, 8007c52 <MCPA_cfgLog+0xae>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8007c3c:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8007c3e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8007c42:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8007c44:	8b22      	ldrh	r2, [r4, #24]
 8007c46:	6820      	ldr	r0, [r4, #0]
 8007c48:	3202      	adds	r2, #2
 8007c4a:	6845      	ldr	r5, [r0, #4]
 8007c4c:	b292      	uxth	r2, r2
 8007c4e:	2309      	movs	r3, #9
 8007c50:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8007c52:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8007c54:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8007c58:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8007c5a:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8007c5e:	8320      	strh	r0, [r4, #24]
}
 8007c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
         pHandle->bufferTxTrigger = buffSize-logSize-2; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8007c64:	1eb2      	subs	r2, r6, #2
 8007c66:	1bd2      	subs	r2, r2, r7
 8007c68:	8362      	strh	r2, [r4, #26]
         pHandle->Mark =   *((uint8_t *) cfgdata);
 8007c6a:	780b      	ldrb	r3, [r1, #0]
 8007c6c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
         if (pHandle->Mark == 0)
 8007c70:	b12b      	cbz	r3, 8007c7e <MCPA_cfgLog+0xda>
  uint8_t result = MCP_CMD_OK;
 8007c72:	2000      	movs	r0, #0
}
 8007c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8007c78:	200a      	movs	r0, #10
}
 8007c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8007c7e:	8b23      	ldrh	r3, [r4, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0e6      	beq.n	8007c52 <MCPA_cfgLog+0xae>
 8007c84:	e7da      	b.n	8007c3c <MCPA_cfgLog+0x98>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8007c86:	2305      	movs	r3, #5
 8007c88:	e7cf      	b.n	8007c2a <MCPA_cfgLog+0x86>
 8007c8a:	bf00      	nop

08007c8c <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c92:	4604      	mov	r4, r0
 8007c94:	2100      	movs	r1, #0
 8007c96:	f002 fac9 	bl	800a22c <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8007ca0:	bd10      	pop	{r4, pc}
 8007ca2:	bf00      	nop

08007ca4 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8007ca4:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8007ca8:	1c53      	adds	r3, r2, #1
 8007caa:	b29b      	uxth	r3, r3
{
 8007cac:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8007cae:	2b7f      	cmp	r3, #127	; 0x7f
{
 8007cb0:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8007cb2:	bf88      	it	hi
 8007cb4:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8007cb6:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 8007cba:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8007cbc:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8007cc0:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007cc4:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 8007cc8:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 8007cca:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007ccc:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007cd0:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8007cd2:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8007cd4:	d1fa      	bne.n	8007ccc <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	bfb8      	it	lt
 8007cda:	327f      	addlt	r2, #127	; 0x7f
 8007cdc:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8007cde:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8007ce2:	bc70      	pop	{r4, r5, r6}
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop

08007ce8 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8007ce8:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop

08007cf0 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8007cf0:	8a03      	ldrh	r3, [r0, #16]
 8007cf2:	8b42      	ldrh	r2, [r0, #26]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d306      	bcc.n	8007d06 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8007cf8:	8b82      	ldrh	r2, [r0, #28]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d901      	bls.n	8007d02 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8007cfe:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8007d00:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8007d02:	8ac0      	ldrh	r0, [r0, #22]
 8007d04:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8007d06:	2008      	movs	r0, #8
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop

08007d0c <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	8203      	strh	r3, [r0, #16]
}
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop

08007d14 <NTC_Init>:
{
 8007d14:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007d16:	7803      	ldrb	r3, [r0, #0]
{
 8007d18:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007d1a:	b123      	cbz	r3, 8007d26 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007d1c:	8a43      	ldrh	r3, [r0, #18]
 8007d1e:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8007d20:	2200      	movs	r2, #0
 8007d22:	82c2      	strh	r2, [r0, #22]
}
 8007d24:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8007d26:	3004      	adds	r0, #4
 8007d28:	f7fb fc4e 	bl	80035c8 <RCM_RegisterRegConv>
 8007d2c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8007d30:	4620      	mov	r0, r4
 8007d32:	f7ff ffeb 	bl	8007d0c <NTC_Clear>
}
 8007d36:	bd10      	pop	{r4, pc}

08007d38 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8007d38:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007d3a:	7803      	ldrb	r3, [r0, #0]
{
 8007d3c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8007d3e:	b113      	cbz	r3, 8007d46 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8007d40:	2000      	movs	r0, #0
 8007d42:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8007d44:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007d46:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007d4a:	f7fb fd11 	bl	8003770 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8007d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d52:	4298      	cmp	r0, r3
 8007d54:	d007      	beq.n	8007d66 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007d56:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8007d58:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8007d5a:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8007d5c:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8007d60:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8007d64:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8007d66:	4620      	mov	r0, r4
 8007d68:	f7ff ffc2 	bl	8007cf0 <NTC_SetFaultState>
 8007d6c:	82e0      	strh	r0, [r4, #22]
}
 8007d6e:	bd10      	pop	{r4, pc}

08007d70 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8007d70:	7803      	ldrb	r3, [r0, #0]
 8007d72:	b983      	cbnz	r3, 8007d96 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8007d74:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007d76:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8007d78:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007d7c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8007d7e:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8007d80:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bfbc      	itt	lt
 8007d88:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007d8c:	33ff      	addlt	r3, #255	; 0xff
 8007d8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8007d92:	b200      	sxth	r0, r0
 8007d94:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8007d96:	8a80      	ldrh	r0, [r0, #20]
}
 8007d98:	b200      	sxth	r0, r0
 8007d9a:	4770      	bx	lr

08007d9c <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8007d9c:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007d9e:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007da0:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8007da2:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8007da4:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8007da6:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8007da8:	6283      	str	r3, [r0, #40]	; 0x28
}
 8007daa:	4770      	bx	lr

08007dac <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8007dac:	8081      	strh	r1, [r0, #4]
}
 8007dae:	4770      	bx	lr

08007db0 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8007db0:	80c1      	strh	r1, [r0, #6]
}
 8007db2:	4770      	bx	lr

08007db4 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8007db4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop

08007dbc <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8007dbc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop

08007dc4 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8007dc4:	6081      	str	r1, [r0, #8]

  return;
}
 8007dc6:	4770      	bx	lr

08007dc8 <PID_GetKPDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKpDivisorPOW2: Kp divisor expressed as power of 2
 */
__weak uint16_t PID_GetKPDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
 8007dc8:	b100      	cbz	r0, 8007dcc <PID_GetKPDivisorPOW2+0x4>
 8007dca:	8b80      	ldrh	r0, [r0, #28]
}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop

08007dd0 <PID_SetKPDivisorPOW2>:
 * @retval None
 */
__weak void PID_SetKPDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKpDivisorPOW2 )
{
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	408b      	lsls	r3, r1
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8007dd4:	8381      	strh	r1, [r0, #28]
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8007dd6:	8303      	strh	r3, [r0, #24]
}
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop

08007ddc <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8007ddc:	8b40      	ldrh	r0, [r0, #26]
 8007dde:	4770      	bx	lr

08007de0 <PID_GetKIDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKiDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKIDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
 8007de0:	b100      	cbz	r0, 8007de4 <PID_GetKIDivisorPOW2+0x4>
 8007de2:	8bc0      	ldrh	r0, [r0, #30]
}
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop

08007de8 <PID_SetLowerIntegralTermLimit>:
 * @param  wLowerLimit: new lower integral term limit value
 * @retval None
 */
__weak void PID_SetLowerIntegralTermLimit( PID_Handle_t * pHandle, int32_t wLowerLimit )
{
  pHandle->wLowerIntegralLimit = wLowerLimit;
 8007de8:	6101      	str	r1, [r0, #16]
}
 8007dea:	4770      	bx	lr

08007dec <PID_SetUpperIntegralTermLimit>:
 * @param  wUpperLimit: new upper integral term limit value
 * @retval None
 */
__weak void PID_SetUpperIntegralTermLimit( PID_Handle_t * pHandle, int32_t wUpperLimit )
{
  pHandle->wUpperIntegralLimit = wUpperLimit;
 8007dec:	60c1      	str	r1, [r0, #12]
}
 8007dee:	4770      	bx	lr

08007df0 <PID_SetKIDivisorPOW2>:
{
 8007df0:	b538      	push	{r3, r4, r5, lr}
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8007df2:	2301      	movs	r3, #1
{
 8007df4:	460c      	mov	r4, r1
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8007df6:	408b      	lsls	r3, r1
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8007df8:	f647 71ff 	movw	r1, #32767	; 0x7fff
  pHandle->hKiDivisor = ( uint16_t )( wKiDiv );
 8007dfc:	8343      	strh	r3, [r0, #26]
  pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8007dfe:	83c4      	strh	r4, [r0, #30]
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8007e00:	40a1      	lsls	r1, r4
{
 8007e02:	4605      	mov	r5, r0
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8007e04:	f7ff fff2 	bl	8007dec <PID_SetUpperIntegralTermLimit>
  PID_SetLowerIntegralTermLimit( pHandle, ( int32_t ) - INT16_MAX * wKiDiv );
 8007e08:	4902      	ldr	r1, [pc, #8]	; (8007e14 <PID_SetKIDivisorPOW2+0x24>)
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	40a1      	lsls	r1, r4
 8007e0e:	f7ff ffeb 	bl	8007de8 <PID_SetLowerIntegralTermLimit>
}
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	ffff8001 	.word	0xffff8001

08007e18 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8007e18:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8007e1a:	4770      	bx	lr

08007e1c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8007e1c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop

08007e24 <PID_GetKDDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKdDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKDDivisorPOW2(PID_Handle_t * pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
 8007e24:	b100      	cbz	r0, 8007e28 <PID_GetKDDivisorPOW2+0x4>
 8007e26:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop

08007e2c <PID_SetKDDivisorPOW2>:
 * @param hKdDivisorPOW2
 */
__weak void PID_SetKDDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKdDivisorPOW2 )
{
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	408b      	lsls	r3, r1
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8007e30:	84c1      	strh	r1, [r0, #38]	; 0x26
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8007e32:	8483      	strh	r3, [r0, #36]	; 0x24
}
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop

08007e38 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007e38:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8007e3c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8007e40:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007e46:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8007e4a:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8007e4e:	b162      	cbz	r2, 8007e6a <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8007e50:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8007e52:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8007e56:	1872      	adds	r2, r6, r1
 8007e58:	d420      	bmi.n	8007e9c <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8007e5a:	2e00      	cmp	r6, #0
 8007e5c:	db29      	blt.n	8007eb2 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007e5e:	68c1      	ldr	r1, [r0, #12]
 8007e60:	4291      	cmp	r1, r2
 8007e62:	db03      	blt.n	8007e6c <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8007e64:	6901      	ldr	r1, [r0, #16]
 8007e66:	4291      	cmp	r1, r2
 8007e68:	dc00      	bgt.n	8007e6c <PI_Controller+0x34>
 8007e6a:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8007e6c:	8b86      	ldrh	r6, [r0, #28]
 8007e6e:	8bc2      	ldrh	r2, [r0, #30]
 8007e70:	4133      	asrs	r3, r6
 8007e72:	fa41 f202 	asr.w	r2, r1, r2
 8007e76:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	da05      	bge.n	8007e88 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8007e7c:	1ae3      	subs	r3, r4, r3
 8007e7e:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8007e80:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8007e82:	4620      	mov	r0, r4
 8007e84:	bc70      	pop	{r4, r5, r6}
 8007e86:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8007e88:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8007e8a:	bfc9      	itett	gt
 8007e8c:	1aeb      	subgt	r3, r5, r3
 8007e8e:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8007e90:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8007e92:	18c9      	addgt	r1, r1, r3
 8007e94:	6081      	str	r1, [r0, #8]
}
 8007e96:	4620      	mov	r0, r4
 8007e98:	bc70      	pop	{r4, r5, r6}
 8007e9a:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8007e9c:	2e00      	cmp	r6, #0
 8007e9e:	ddde      	ble.n	8007e5e <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8007ea0:	2900      	cmp	r1, #0
 8007ea2:	dddc      	ble.n	8007e5e <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8007ea4:	68c1      	ldr	r1, [r0, #12]
 8007ea6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007eaa:	4291      	cmp	r1, r2
 8007eac:	d1de      	bne.n	8007e6c <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8007eae:	460a      	mov	r2, r1
 8007eb0:	e7db      	b.n	8007e6a <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8007eb2:	4e03      	ldr	r6, [pc, #12]	; (8007ec0 <PI_Controller+0x88>)
 8007eb4:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8007eb8:	bf28      	it	cs
 8007eba:	4632      	movcs	r2, r6
 8007ebc:	e7cf      	b.n	8007e5e <PI_Controller+0x26>
 8007ebe:	bf00      	nop
 8007ec0:	80000001 	.word	0x80000001

08007ec4 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8007ec4:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007ec6:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007eca:	8b11      	ldrh	r1, [r2, #24]
 8007ecc:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007ece:	8995      	ldrh	r5, [r2, #12]
 8007ed0:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8007ed2:	fb13 f301 	smulbb	r3, r3, r1
{
 8007ed6:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007ed8:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8007edc:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8007ee0:	f7ff fc62 	bl	80077a8 <VBS_GetAvBusVoltage_V>
 8007ee4:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8007ee8:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007eea:	480e      	ldr	r0, [pc, #56]	; (8007f24 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8007eec:	490e      	ldr	r1, [pc, #56]	; (8007f28 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8007eee:	bfb8      	it	lt
 8007ef0:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007ef4:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8007ef8:	bfb8      	it	lt
 8007efa:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007efc:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8007efe:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8007f00:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8007f04:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8007f08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007f0c:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8007f0e:	fb81 2103 	smull	r2, r1, r1, r3
 8007f12:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007f14:	4630      	mov	r0, r6
 8007f16:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8007f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8007f1e:	f7ff bec1 	b.w	8007ca4 <MPM_CalcElMotorPower>
 8007f22:	bf00      	nop
 8007f24:	1b4e81b5 	.word	0x1b4e81b5
 8007f28:	66666667 	.word	0x66666667

08007f2c <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8007f2c:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8007f2e:	4b18      	ldr	r3, [pc, #96]	; (8007f90 <startTimers+0x64>)
 8007f30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f32:	07d2      	lsls	r2, r2, #31
 8007f34:	b082      	sub	sp, #8
 8007f36:	d415      	bmi.n	8007f64 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007f38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f3a:	f042 0201 	orr.w	r2, r2, #1
 8007f3e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007f40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007f42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007f46:	f002 0201 	and.w	r2, r2, #1
 8007f4a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8007f4c:	9a01      	ldr	r2, [sp, #4]
 8007f4e:	694a      	ldr	r2, [r1, #20]
 8007f50:	f042 0201 	orr.w	r2, r2, #1
 8007f54:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8007f56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f58:	f022 0201 	bic.w	r2, r2, #1
 8007f5c:	659a      	str	r2, [r3, #88]	; 0x58
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
#endif
}
 8007f5e:	b002      	add	sp, #8
 8007f60:	bc30      	pop	{r4, r5}
 8007f62:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8007f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007f68:	4c0a      	ldr	r4, [pc, #40]	; (8007f94 <startTimers+0x68>)
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	6859      	ldr	r1, [r3, #4]
 8007f6e:	4d0a      	ldr	r5, [pc, #40]	; (8007f98 <startTimers+0x6c>)
 8007f70:	4021      	ands	r1, r4
 8007f72:	f041 0120 	orr.w	r1, r1, #32
 8007f76:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007f78:	6958      	ldr	r0, [r3, #20]
 8007f7a:	f040 0001 	orr.w	r0, r0, #1
 8007f7e:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007f80:	6859      	ldr	r1, [r3, #4]
 8007f82:	402a      	ands	r2, r5
 8007f84:	4021      	ands	r1, r4
 8007f86:	430a      	orrs	r2, r1
 8007f88:	605a      	str	r2, [r3, #4]
}
 8007f8a:	b002      	add	sp, #8
 8007f8c:	bc30      	pop	{r4, r5}
 8007f8e:	4770      	bx	lr
 8007f90:	40021000 	.word	0x40021000
 8007f94:	fdffff8f 	.word	0xfdffff8f
 8007f98:	02000070 	.word	0x02000070

08007f9c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8007f9c:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8007f9e:	1c56      	adds	r6, r2, #1
 8007fa0:	0876      	lsrs	r6, r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007fa2:	f06f 0702 	mvn.w	r7, #2
 8007fa6:	0176      	lsls	r6, r6, #5
 8007fa8:	6107      	str	r7, [r0, #16]

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8007faa:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8007fac:	781c      	ldrb	r4, [r3, #0]
 8007fae:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8007fb0:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8007fb4:	d80b      	bhi.n	8007fce <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8007fb6:	6904      	ldr	r4, [r0, #16]
 8007fb8:	07a4      	lsls	r4, r4, #30
 8007fba:	d5f7      	bpl.n	8007fac <waitForPolarizationEnd+0x10>
      hCalibrationPeriodCounter++;
 8007fbc:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8007fbe:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007fc0:	6107      	str	r7, [r0, #16]
 8007fc2:	d8f3      	bhi.n	8007fac <waitForPolarizationEnd+0x10>
      {
        if (*cnt < NB_CONVERSIONS)
 8007fc4:	781c      	ldrb	r4, [r3, #0]
 8007fc6:	2c0f      	cmp	r4, #15
 8007fc8:	d8f0      	bhi.n	8007fac <waitForPolarizationEnd+0x10>
        {
          *SWerror = 1u;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8007fce:	bcf0      	pop	{r4, r5, r6, r7}
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop

08007fd4 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007fd4:	6883      	ldr	r3, [r0, #8]
 8007fd6:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007fda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fde:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007fe0:	6883      	ldr	r3, [r0, #8]
 8007fe2:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	d418      	bmi.n	800801a <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8007fe8:	4b24      	ldr	r3, [pc, #144]	; (800807c <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8007fea:	6882      	ldr	r2, [r0, #8]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4924      	ldr	r1, [pc, #144]	; (8008080 <R3_2_ADCxInit+0xac>)
 8007ff0:	099b      	lsrs	r3, r3, #6
 8007ff2:	fba1 1303 	umull	r1, r3, r1, r3
 8007ff6:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8007ffa:	099b      	lsrs	r3, r3, #6
 8007ffc:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008006:	6082      	str	r2, [r0, #8]
 8008008:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800800a:	9b01      	ldr	r3, [sp, #4]
 800800c:	b12b      	cbz	r3, 800801a <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	3b01      	subs	r3, #1
 8008012:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8008014:	9b01      	ldr	r3, [sp, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1f9      	bne.n	800800e <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800801a:	6883      	ldr	r3, [r0, #8]
 800801c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008028:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800802a:	6883      	ldr	r3, [r0, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	dbfc      	blt.n	800802a <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008030:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 8008032:	07da      	lsls	r2, r3, #31
 8008034:	d408      	bmi.n	8008048 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8008036:	4a13      	ldr	r2, [pc, #76]	; (8008084 <R3_2_ADCxInit+0xb0>)
 8008038:	6883      	ldr	r3, [r0, #8]
 800803a:	4013      	ands	r3, r2
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008042:	6803      	ldr	r3, [r0, #0]
 8008044:	07db      	lsls	r3, r3, #31
 8008046:	d5f7      	bpl.n	8008038 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8008048:	6882      	ldr	r2, [r0, #8]
 800804a:	490e      	ldr	r1, [pc, #56]	; (8008084 <R3_2_ADCxInit+0xb0>)
 800804c:	400a      	ands	r2, r1
 800804e:	f042 0208 	orr.w	r2, r2, #8
 8008052:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8008054:	6882      	ldr	r2, [r0, #8]
 8008056:	400a      	ands	r2, r1
 8008058:	f042 0220 	orr.w	r2, r2, #32
 800805c:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800805e:	68c3      	ldr	r3, [r0, #12]
 8008060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008064:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800806c:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 800806e:	6883      	ldr	r3, [r0, #8]
 8008070:	400b      	ands	r3, r1
 8008072:	f043 0304 	orr.w	r3, r3, #4
 8008076:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8008078:	b002      	add	sp, #8
 800807a:	4770      	bx	lr
 800807c:	20000658 	.word	0x20000658
 8008080:	053e2d63 	.word	0x053e2d63
 8008084:	7fffffc0 	.word	0x7fffffc0

08008088 <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008088:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800808c:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
{
 8008090:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008092:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8008094:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008098:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800809a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800809c:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800809e:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80080a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080aa:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 80080ac:	2a05      	cmp	r2, #5
 80080ae:	f200 8099 	bhi.w	80081e4 <R3_2_GetPhaseCurrents+0x15c>
 80080b2:	e8df f002 	tbb	[pc, r2]
 80080b6:	1e38      	.short	0x1e38
 80080b8:	3803031e 	.word	0x3803031e
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80080bc:	6f04      	ldr	r4, [r0, #112]	; 0x70

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 80080be:	4b4d      	ldr	r3, [pc, #308]	; (80081f4 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80080c0:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80080c2:	429c      	cmp	r4, r3
 80080c4:	da55      	bge.n	8008172 <R3_2_GetPhaseCurrents+0xea>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 80080c6:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80080c8:	6f42      	ldr	r2, [r0, #116]	; 0x74

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 80080ca:	4f4a      	ldr	r7, [pc, #296]	; (80081f4 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80080cc:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 80080ce:	42ba      	cmp	r2, r7
 80080d0:	da55      	bge.n	800817e <R3_2_GetPhaseCurrents+0xf6>
      {
        Iab->b = -INT16_MAX;
 80080d2:	f9b1 5000 	ldrsh.w	r5, [r1]
 80080d6:	804f      	strh	r7, [r1, #2]
 80080d8:	b2ab      	uxth	r3, r5
 80080da:	f248 0201 	movw	r2, #32769	; 0x8001
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80080de:	4413      	add	r3, r2
 80080e0:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 80080e2:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = Iab->b;
 80080e6:	f8a0 704e 	strh.w	r7, [r0, #78]	; 0x4e
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80080ea:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 80080ee:	bcf0      	pop	{r4, r5, r6, r7}
 80080f0:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80080f2:	6f04      	ldr	r4, [r0, #112]	; 0x70
      if ( Aux < -INT16_MAX )
 80080f4:	4b3f      	ldr	r3, [pc, #252]	; (80081f4 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80080f6:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80080f8:	429c      	cmp	r4, r3
 80080fa:	db34      	blt.n	8008166 <R3_2_GetPhaseCurrents+0xde>
      else  if ( Aux > INT16_MAX )
 80080fc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008100:	db68      	blt.n	80081d4 <R3_2_GetPhaseCurrents+0x14c>
        Iab->a = INT16_MAX;
 8008102:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008106:	4613      	mov	r3, r2
 8008108:	800a      	strh	r2, [r1, #0]
 800810a:	4614      	mov	r4, r2
 800810c:	4615      	mov	r5, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800810e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8008110:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8008112:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8008114:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008118:	db44      	blt.n	80081a4 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = INT16_MAX;
 800811a:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800811e:	4622      	mov	r2, r4
 8008120:	804c      	strh	r4, [r1, #2]
 8008122:	4627      	mov	r7, r4
 8008124:	e7db      	b.n	80080de <R3_2_GetPhaseCurrents+0x56>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8008126:	6f44      	ldr	r4, [r0, #116]	; 0x74
      if ( Aux < -INT16_MAX )
 8008128:	4b32      	ldr	r3, [pc, #200]	; (80081f4 <R3_2_GetPhaseCurrents+0x16c>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800812a:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 800812c:	429c      	cmp	r4, r3
 800812e:	db14      	blt.n	800815a <R3_2_GetPhaseCurrents+0xd2>
      else  if ( Aux > INT16_MAX )
 8008130:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008134:	db43      	blt.n	80081be <R3_2_GetPhaseCurrents+0x136>
        Iab->b = INT16_MAX;
 8008136:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800813a:	461a      	mov	r2, r3
 800813c:	804b      	strh	r3, [r1, #2]
 800813e:	461c      	mov	r4, r3
 8008140:	461f      	mov	r7, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8008142:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8008144:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8008146:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8008148:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800814c:	db23      	blt.n	8008196 <R3_2_GetPhaseCurrents+0x10e>
        Iab->a = INT16_MAX;
 800814e:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8008152:	4623      	mov	r3, r4
 8008154:	800c      	strh	r4, [r1, #0]
 8008156:	4625      	mov	r5, r4
 8008158:	e7c1      	b.n	80080de <R3_2_GetPhaseCurrents+0x56>
        Iab->b = -INT16_MAX;
 800815a:	461c      	mov	r4, r3
 800815c:	804b      	strh	r3, [r1, #2]
 800815e:	461f      	mov	r7, r3
 8008160:	f248 0201 	movw	r2, #32769	; 0x8001
 8008164:	e7ed      	b.n	8008142 <R3_2_GetPhaseCurrents+0xba>
        Iab->a = -INT16_MAX;
 8008166:	461c      	mov	r4, r3
 8008168:	800b      	strh	r3, [r1, #0]
 800816a:	461d      	mov	r5, r3
 800816c:	f248 0301 	movw	r3, #32769	; 0x8001
 8008170:	e7cd      	b.n	800810e <R3_2_GetPhaseCurrents+0x86>
      else  if ( Aux > INT16_MAX )
 8008172:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008176:	db1c      	blt.n	80081b2 <R3_2_GetPhaseCurrents+0x12a>
        Iab->a = INT16_MAX;
 8008178:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800817c:	e7a3      	b.n	80080c6 <R3_2_GetPhaseCurrents+0x3e>
      else  if ( Aux > INT16_MAX )
 800817e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008182:	db20      	blt.n	80081c6 <R3_2_GetPhaseCurrents+0x13e>
        Iab->b = INT16_MAX;
 8008184:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008188:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800818c:	804b      	strh	r3, [r1, #2]
 800818e:	461a      	mov	r2, r3
 8008190:	461f      	mov	r7, r3
 8008192:	b2ab      	uxth	r3, r5
 8008194:	e7a3      	b.n	80080de <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8008196:	4d17      	ldr	r5, [pc, #92]	; (80081f4 <R3_2_GetPhaseCurrents+0x16c>)
 8008198:	42ac      	cmp	r4, r5
 800819a:	da1f      	bge.n	80081dc <R3_2_GetPhaseCurrents+0x154>
        Iab->a = -INT16_MAX;
 800819c:	800d      	strh	r5, [r1, #0]
 800819e:	f248 0301 	movw	r3, #32769	; 0x8001
 80081a2:	e79c      	b.n	80080de <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 80081a4:	4f13      	ldr	r7, [pc, #76]	; (80081f4 <R3_2_GetPhaseCurrents+0x16c>)
 80081a6:	42ba      	cmp	r2, r7
 80081a8:	da05      	bge.n	80081b6 <R3_2_GetPhaseCurrents+0x12e>
        Iab->b = -INT16_MAX;
 80081aa:	804f      	strh	r7, [r1, #2]
 80081ac:	f248 0201 	movw	r2, #32769	; 0x8001
 80081b0:	e795      	b.n	80080de <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 80081b2:	800c      	strh	r4, [r1, #0]
 80081b4:	e788      	b.n	80080c8 <R3_2_GetPhaseCurrents+0x40>
        Iab->b = ( int16_t )Aux;
 80081b6:	b217      	sxth	r7, r2
 80081b8:	804f      	strh	r7, [r1, #2]
 80081ba:	b292      	uxth	r2, r2
 80081bc:	e78f      	b.n	80080de <R3_2_GetPhaseCurrents+0x56>
        Iab->b = ( int16_t )Aux;
 80081be:	b227      	sxth	r7, r4
 80081c0:	804f      	strh	r7, [r1, #2]
 80081c2:	b2a2      	uxth	r2, r4
 80081c4:	e7bd      	b.n	8008142 <R3_2_GetPhaseCurrents+0xba>
        Iab->b = ( int16_t )Aux;
 80081c6:	f9b1 5000 	ldrsh.w	r5, [r1]
 80081ca:	b217      	sxth	r7, r2
 80081cc:	b2ab      	uxth	r3, r5
 80081ce:	804f      	strh	r7, [r1, #2]
 80081d0:	b292      	uxth	r2, r2
 80081d2:	e784      	b.n	80080de <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 80081d4:	b225      	sxth	r5, r4
 80081d6:	800d      	strh	r5, [r1, #0]
 80081d8:	b2a3      	uxth	r3, r4
 80081da:	e798      	b.n	800810e <R3_2_GetPhaseCurrents+0x86>
        Iab->a = ( int16_t )Aux;
 80081dc:	b225      	sxth	r5, r4
 80081de:	800d      	strh	r5, [r1, #0]
 80081e0:	b2a3      	uxth	r3, r4
 80081e2:	e77c      	b.n	80080de <R3_2_GetPhaseCurrents+0x56>
 80081e4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80081e8:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 80081ec:	880b      	ldrh	r3, [r1, #0]
 80081ee:	884a      	ldrh	r2, [r1, #2]
 80081f0:	e775      	b.n	80080de <R3_2_GetPhaseCurrents+0x56>
 80081f2:	bf00      	nop
 80081f4:	ffff8001 	.word	0xffff8001

080081f8 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 80081f8:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80081fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 80081fe:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 8008202:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008206:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800820a:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800820c:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
  WRITE_REG(TIMx->CCR1, CompareValue);
 800820e:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008210:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8008212:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8008214:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008216:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8008218:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800821a:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800821c:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800821e:	4904      	ldr	r1, [pc, #16]	; (8008230 <R3_2_SetADCSampPointPolarization+0x38>)
 8008220:	685b      	ldr	r3, [r3, #4]
}
 8008222:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008226:	420b      	tst	r3, r1
}
 8008228:	bf14      	ite	ne
 800822a:	2001      	movne	r0, #1
 800822c:	2000      	moveq	r0, #0
 800822e:	4770      	bx	lr
 8008230:	02000070 	.word	0x02000070

08008234 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8008234:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008236:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800823a:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 800823e:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8008240:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008244:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8008246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8008248:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800824a:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800824c:	6853      	ldr	r3, [r2, #4]
 800824e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008256:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8008258:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800825c:	2b0f      	cmp	r3, #15
 800825e:	d80b      	bhi.n	8008278 <R3_2_HFCurrentsPolarizationAB+0x44>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 8008260:	e9d0 421c 	ldrd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 8008264:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseAOffset += ADCDataReg1;
 8008268:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 800826a:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 800826c:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 800826e:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8008278:	2300      	movs	r3, #0
  Iab->b = 0;
}
 800827a:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 800827c:	600b      	str	r3, [r1, #0]
}
 800827e:	4770      	bx	lr

08008280 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008280:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8008284:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8008286:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800828a:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800828c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008292:	681c      	ldr	r4, [r3, #0]
 8008294:	6853      	ldr	r3, [r2, #4]
 8008296:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800829a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829e:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80082a0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80082a4:	2b0f      	cmp	r3, #15
 80082a6:	d808      	bhi.n	80082ba <R3_2_HFCurrentsPolarizationC+0x3a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 80082a8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80082ac:	6f82      	ldr	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 80082ae:	3301      	adds	r3, #1
 80082b0:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80082b2:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80082b4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    pHandle-> PhaseCOffset += ADCDataReg2;    
 80082b8:	6782      	str	r2, [r0, #120]	; 0x78
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 80082ba:	2300      	movs	r3, #0
  Iab->b = 0;
}
 80082bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 80082c0:	600b      	str	r3, [r1, #0]
}
 80082c2:	4770      	bx	lr

080082c4 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80082c4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 80082c8:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80082ca:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80082cc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  WRITE_REG(TIMx->CCR1, CompareValue);
 80082d0:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80082d2:	f06f 0001 	mvn.w	r0, #1
 80082d6:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80082d8:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80082da:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80082dc:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80082de:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80082e0:	07db      	lsls	r3, r3, #31
 80082e2:	d5fc      	bpl.n	80082de <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80082e4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80082e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ea:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80082ec:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d000      	beq.n	80082f6 <R3_2_TurnOnLowSides+0x32>
 80082f4:	4770      	bx	lr
{
 80082f6:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80082f8:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80082fc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80082fe:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008302:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008306:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800830a:	61ae      	str	r6, [r5, #24]
 800830c:	6184      	str	r4, [r0, #24]
  }
  return;
}
 800830e:	bc70      	pop	{r4, r5, r6}
 8008310:	619a      	str	r2, [r3, #24]
 8008312:	4770      	bx	lr

08008314 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008314:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8008318:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800831c:	688b      	ldr	r3, [r1, #8]
{
 800831e:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 8008320:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008322:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 8008324:	f880 408c 	strb.w	r4, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 8008328:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800832c:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008330:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8008334:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008336:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008338:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800833a:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800833c:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800833e:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008340:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8008342:	07d2      	lsls	r2, r2, #31
 8008344:	d5fc      	bpl.n	8008340 <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008346:	f06f 0201 	mvn.w	r2, #1
 800834a:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800834c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800834e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008352:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800835a:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800835c:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8008360:	2a02      	cmp	r2, #2
 8008362:	d008      	beq.n	8008376 <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008364:	f06f 0201 	mvn.w	r2, #1
 8008368:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8008370:	bc30      	pop	{r4, r5}
 8008372:	60da      	str	r2, [r3, #12]
 8008374:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008376:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008378:	6a0c      	ldr	r4, [r1, #32]
 800837a:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800837e:	f240 5255 	movw	r2, #1365	; 0x555
 8008382:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008384:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8008388:	d007      	beq.n	800839a <R3_2_SwitchOnPWM+0x86>
 800838a:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800838c:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008390:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008394:	6184      	str	r4, [r0, #24]
 8008396:	6191      	str	r1, [r2, #24]
}
 8008398:	e7e4      	b.n	8008364 <R3_2_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800839a:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800839c:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80083a0:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80083a4:	6284      	str	r4, [r0, #40]	; 0x28
 80083a6:	6291      	str	r1, [r2, #40]	; 0x28
}
 80083a8:	e7dc      	b.n	8008364 <R3_2_SwitchOnPWM+0x50>
 80083aa:	bf00      	nop

080083ac <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80083ac:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80083b0:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80083b2:	68d3      	ldr	r3, [r2, #12]
 80083b4:	f023 0301 	bic.w	r3, r3, #1
{
 80083b8:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 80083ba:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
 80083be:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80083c0:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 80083c2:	2500      	movs	r5, #0
 80083c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083c8:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
 80083cc:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 80083ce:	b91c      	cbnz	r4, 80083d8 <R3_2_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80083d0:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d00d      	beq.n	80083f4 <R3_2_SwitchOffPWM+0x48>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80083d8:	f06f 0301 	mvn.w	r3, #1
 80083dc:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80083de:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80083e0:	07db      	lsls	r3, r3, #31
 80083e2:	d5fc      	bpl.n	80083de <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80083e4:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 80083e8:	2300      	movs	r3, #0
 80083ea:	6111      	str	r1, [r2, #16]
}
 80083ec:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 80083ee:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
 80083f2:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80083f4:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80083f8:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 80083fc:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80083fe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008400:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008404:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8008408:	62a5      	str	r5, [r4, #40]	; 0x28
 800840a:	6299      	str	r1, [r3, #40]	; 0x28
}
 800840c:	e7e4      	b.n	80083d8 <R3_2_SwitchOffPWM+0x2c>
 800840e:	bf00      	nop

08008410 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8008410:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008412:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8008416:	6f43      	ldr	r3, [r0, #116]	; 0x74
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008418:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800841a:	686a      	ldr	r2, [r5, #4]
 800841c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008420:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008424:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 8008426:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800842a:	4a0d      	ldr	r2, [pc, #52]	; (8008460 <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800842c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008430:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8008432:	6800      	ldr	r0, [r0, #0]
 8008434:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 8008436:	4293      	cmp	r3, r2
 8008438:	db05      	blt.n	8008446 <R3_2_RLGetPhaseCurrents+0x36>
  {
    if ( wAux < INT16_MAX )
 800843a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800843e:	4293      	cmp	r3, r2
 8008440:	dc0a      	bgt.n	8008458 <R3_2_RLGetPhaseCurrents+0x48>
 8008442:	b21b      	sxth	r3, r3
 8008444:	e000      	b.n	8008448 <R3_2_RLGetPhaseCurrents+0x38>
 8008446:	4b07      	ldr	r3, [pc, #28]	; (8008464 <R3_2_RLGetPhaseCurrents+0x54>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8008448:	2200      	movs	r2, #0
 800844a:	f363 020f 	bfi	r2, r3, #0, #16
 800844e:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 8008452:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 8008454:	600a      	str	r2, [r1, #0]
}
 8008456:	4770      	bx	lr
 8008458:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800845c:	e7f4      	b.n	8008448 <R3_2_RLGetPhaseCurrents+0x38>
 800845e:	bf00      	nop
 8008460:	ffff8002 	.word	0xffff8002
 8008464:	ffff8001 	.word	0xffff8001

08008468 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008468:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked=true;
 800846c:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800846e:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 8008470:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008474:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008476:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800847a:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800847c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800847e:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8008480:	07db      	lsls	r3, r3, #31
 8008482:	d5fc      	bpl.n	800847e <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008484:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800848a:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800848c:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8008490:	2b02      	cmp	r3, #2
 8008492:	d000      	beq.n	8008496 <R3_2_RLTurnOnLowSides+0x2e>
 8008494:	4770      	bx	lr
{
 8008496:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008498:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800849c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800849e:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80084a2:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80084a6:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 80084aa:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80084ac:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 80084ae:	bc70      	pop	{r4, r5, r6}
 80084b0:	629a      	str	r2, [r3, #40]	; 0x28
 80084b2:	4770      	bx	lr

080084b4 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80084b4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 80084b8:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80084ba:	688b      	ldr	r3, [r1, #8]
{
 80084bc:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80084be:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 80084c2:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80084c6:	f06f 0201 	mvn.w	r2, #1
 80084ca:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80084cc:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80084ce:	07d6      	lsls	r6, r2, #31
 80084d0:	d5fc      	bpl.n	80084cc <R3_2_RLSwitchOnPWM+0x18>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 80084d2:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80084d6:	f06f 0701 	mvn.w	r7, #1
 80084da:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80084dc:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80084de:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80084e0:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80084e2:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80084e4:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80084e6:	07d2      	lsls	r2, r2, #31
 80084e8:	d5fc      	bpl.n	80084e4 <R3_2_RLSwitchOnPWM+0x30>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	f042 0201 	orr.w	r2, r2, #1
 80084f0:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 80084f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084f8:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80084fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008500:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008502:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8008506:	2a02      	cmp	r2, #2
 8008508:	d00f      	beq.n	800852a <R3_2_RLSwitchOnPWM+0x76>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800850a:	2303      	movs	r3, #3
 800850c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  MODIFY_REG(ADCx->CR,
 8008510:	68aa      	ldr	r2, [r5, #8]
 8008512:	4913      	ldr	r1, [pc, #76]	; (8008560 <R3_2_RLSwitchOnPWM+0xac>)
 8008514:	400a      	ands	r2, r1
 8008516:	f042 0208 	orr.w	r2, r2, #8
 800851a:	60aa      	str	r2, [r5, #8]
 800851c:	68a3      	ldr	r3, [r4, #8]
 800851e:	400b      	ands	r3, r1
 8008520:	f043 0308 	orr.w	r3, r3, #8
 8008524:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 8008526:	bcf0      	pop	{r4, r5, r6, r7}
 8008528:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800852a:	6a1a      	ldr	r2, [r3, #32]
 800852c:	f240 5355 	movw	r3, #1365	; 0x555
 8008530:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008532:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008536:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800853a:	d008      	beq.n	800854e <R3_2_RLSwitchOnPWM+0x9a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800853c:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800853e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008540:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008544:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8008548:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800854a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800854c:	e7dd      	b.n	800850a <R3_2_RLSwitchOnPWM+0x56>
  WRITE_REG(GPIOx->BRR, PinMask);
 800854e:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008550:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008552:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008556:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 800855a:	62b7      	str	r7, [r6, #40]	; 0x28
 800855c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800855e:	e7d4      	b.n	800850a <R3_2_RLSwitchOnPWM+0x56>
 8008560:	7fffffc0 	.word	0x7fffffc0

08008564 <R3_2_SetAOReferenceVoltage>:
{
 8008564:	b430      	push	{r4, r5}
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8008566:	0c84      	lsrs	r4, r0, #18
 8008568:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 800856c:	f101 0508 	add.w	r5, r1, #8
 8008570:	b082      	sub	sp, #8
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8008572:	5963      	ldr	r3, [r4, r5]
 8008574:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800857c:	431a      	orrs	r2, r3
 800857e:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 8008580:	684a      	ldr	r2, [r1, #4]
 8008582:	f000 0303 	and.w	r3, r0, #3
 8008586:	4313      	orrs	r3, r2
 8008588:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800858a:	680a      	ldr	r2, [r1, #0]
 800858c:	2301      	movs	r3, #1
 800858e:	f000 0010 	and.w	r0, r0, #16
 8008592:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008596:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800859a:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <R3_2_SetAOReferenceVoltage+0x8c>)
 800859c:	d014      	beq.n	80085c8 <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4c14      	ldr	r4, [pc, #80]	; (80085f4 <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 80085a2:	680a      	ldr	r2, [r1, #0]
 80085a4:	fba4 4303 	umull	r4, r3, r4, r3
 80085a8:	0cdb      	lsrs	r3, r3, #19
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	4310      	orrs	r0, r2
 80085ae:	6008      	str	r0, [r1, #0]
 80085b0:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 80085b2:	9b00      	ldr	r3, [sp, #0]
 80085b4:	b12b      	cbz	r3, 80085c2 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 80085b6:	9b00      	ldr	r3, [sp, #0]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 80085bc:	9b00      	ldr	r3, [sp, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f9      	bne.n	80085b6 <R3_2_SetAOReferenceVoltage+0x52>
}
 80085c2:	b002      	add	sp, #8
 80085c4:	bc30      	pop	{r4, r5}
 80085c6:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 80085c8:	4a0a      	ldr	r2, [pc, #40]	; (80085f4 <R3_2_SetAOReferenceVoltage+0x90>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	fba2 2303 	umull	r2, r3, r2, r3
 80085d0:	0cdb      	lsrs	r3, r3, #19
 80085d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80085d6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80085d8:	9b01      	ldr	r3, [sp, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0f1      	beq.n	80085c2 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 80085e4:	9b01      	ldr	r3, [sp, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f9      	bne.n	80085de <R3_2_SetAOReferenceVoltage+0x7a>
}
 80085ea:	b002      	add	sp, #8
 80085ec:	bc30      	pop	{r4, r5}
 80085ee:	4770      	bx	lr
 80085f0:	20000658 	.word	0x20000658
 80085f4:	431bde83 	.word	0x431bde83

080085f8 <R3_2_Init>:
{
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	4607      	mov	r7, r0
 80085fe:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008600:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    if ( TIMx == TIM1 )
 8008604:	f8df e28c 	ldr.w	lr, [pc, #652]	; 8008894 <R3_2_Init+0x29c>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 8008608:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 800860a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800860c:	686a      	ldr	r2, [r5, #4]
 800860e:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8008610:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008612:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008614:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8008616:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008618:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800861c:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800861e:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008622:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8008626:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008628:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800862a:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800862e:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 8008632:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008634:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008636:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008638:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800863a:	f022 0220 	bic.w	r2, r2, #32
 800863e:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008640:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8008642:	6872      	ldr	r2, [r6, #4]
 8008644:	f022 0204 	bic.w	r2, r2, #4
 8008648:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800864a:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800864c:	6872      	ldr	r2, [r6, #4]
 800864e:	f022 0220 	bic.w	r2, r2, #32
 8008652:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008654:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008656:	498e      	ldr	r1, [pc, #568]	; (8008890 <R3_2_Init+0x298>)
 8008658:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 800865a:	4574      	cmp	r4, lr
 800865c:	bf0c      	ite	eq
 800865e:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8008662:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8008666:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 8008668:	f1bc 0f00 	cmp.w	ip, #0
 800866c:	d014      	beq.n	8008698 <R3_2_Init+0xa0>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 800866e:	f8dc 2000 	ldr.w	r2, [ip]
 8008672:	b11a      	cbz	r2, 800867c <R3_2_Init+0x84>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8008674:	6811      	ldr	r1, [r2, #0]
 8008676:	f041 0101 	orr.w	r1, r1, #1
 800867a:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 800867c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008680:	b11a      	cbz	r2, 800868a <R3_2_Init+0x92>
 8008682:	6811      	ldr	r1, [r2, #0]
 8008684:	f041 0101 	orr.w	r1, r1, #1
 8008688:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 800868a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800868e:	b11a      	cbz	r2, 8008698 <R3_2_Init+0xa0>
 8008690:	6811      	ldr	r1, [r2, #0]
 8008692:	f041 0101 	orr.w	r1, r1, #1
 8008696:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 8008698:	f1bb 0f00 	cmp.w	fp, #0
 800869c:	d017      	beq.n	80086ce <R3_2_Init+0xd6>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 800869e:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 80086a2:	2a01      	cmp	r2, #1
 80086a4:	d007      	beq.n	80086b6 <R3_2_Init+0xbe>
 80086a6:	9a00      	ldr	r2, [sp, #0]
 80086a8:	b12a      	cbz	r2, 80086b6 <R3_2_Init+0xbe>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80086aa:	4611      	mov	r1, r2
 80086ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80086ae:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 80086b2:	f7ff ff57 	bl	8008564 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80086b6:	f8db 3000 	ldr.w	r3, [fp]
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80086c2:	f8db 3000 	ldr.w	r3, [fp]
 80086c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086ca:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 80086ce:	f1ba 0f00 	cmp.w	sl, #0
 80086d2:	d019      	beq.n	8008708 <R3_2_Init+0x110>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 80086d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086d8:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80086dc:	2a01      	cmp	r2, #1
 80086de:	d007      	beq.n	80086f0 <R3_2_Init+0xf8>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	b12a      	cbz	r2, 80086f0 <R3_2_Init+0xf8>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80086e4:	4611      	mov	r1, r2
 80086e6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80086e8:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 80086ec:	f7ff ff3a 	bl	8008564 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80086f0:	f8da 3000 	ldr.w	r3, [sl]
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80086fc:	f8da 3000 	ldr.w	r3, [sl]
 8008700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008704:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 8008708:	f1b9 0f00 	cmp.w	r9, #0
 800870c:	d019      	beq.n	8008742 <R3_2_Init+0x14a>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 800870e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008712:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8008716:	2a01      	cmp	r2, #1
 8008718:	d007      	beq.n	800872a <R3_2_Init+0x132>
 800871a:	9a02      	ldr	r2, [sp, #8]
 800871c:	b12a      	cbz	r2, 800872a <R3_2_Init+0x132>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800871e:	4611      	mov	r1, r2
 8008720:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8008722:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8008726:	f7ff ff1d 	bl	8008564 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800872a:	f8d9 3000 	ldr.w	r3, [r9]
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008736:	f8d9 3000 	ldr.w	r3, [r9]
 800873a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800873e:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 8008742:	f1b8 0f00 	cmp.w	r8, #0
 8008746:	d019      	beq.n	800877c <R3_2_Init+0x184>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 8008748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800874c:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 8008750:	2a01      	cmp	r2, #1
 8008752:	d007      	beq.n	8008764 <R3_2_Init+0x16c>
 8008754:	9a03      	ldr	r2, [sp, #12]
 8008756:	b12a      	cbz	r2, 8008764 <R3_2_Init+0x16c>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 8008758:	4611      	mov	r1, r2
 800875a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800875c:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 8008760:	f7ff ff00 	bl	8008564 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008764:	f8d8 3000 	ldr.w	r3, [r8]
 8008768:	f043 0301 	orr.w	r3, r3, #1
 800876c:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008770:	f8d8 3000 	ldr.w	r3, [r8]
 8008774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008778:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800877c:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 800877e:	07d8      	lsls	r0, r3, #31
 8008780:	d56d      	bpl.n	800885e <R3_2_Init+0x266>
 8008782:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8008784:	07d9      	lsls	r1, r3, #31
 8008786:	d576      	bpl.n	8008876 <R3_2_Init+0x27e>
  volatile uint32_t Brk2Timeout = 1000;
 8008788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800878c:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800878e:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8008790:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008794:	f023 0301 	bic.w	r3, r3, #1
 8008798:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800879a:	6863      	ldr	r3, [r4, #4]
 800879c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80087a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a4:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80087a6:	69a3      	ldr	r3, [r4, #24]
 80087a8:	f043 0308 	orr.w	r3, r3, #8
 80087ac:	61a3      	str	r3, [r4, #24]
 80087ae:	69a3      	ldr	r3, [r4, #24]
 80087b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80087b4:	61a3      	str	r3, [r4, #24]
 80087b6:	69e3      	ldr	r3, [r4, #28]
 80087b8:	f043 0308 	orr.w	r3, r3, #8
 80087bc:	61e3      	str	r3, [r4, #28]
 80087be:	69e3      	ldr	r3, [r4, #28]
 80087c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80087c4:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80087c6:	6963      	ldr	r3, [r4, #20]
 80087c8:	f043 0301 	orr.w	r3, r3, #1
 80087cc:	6163      	str	r3, [r4, #20]
 80087ce:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d029      	beq.n	800882a <R3_2_Init+0x232>
    if ( pHandle->_Super.Motor == M1 )
 80087d6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80087da:	b92b      	cbnz	r3, 80087e8 <R3_2_Init+0x1f0>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 80087dc:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d030      	beq.n	8008846 <R3_2_Init+0x24e>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d04a      	beq.n	800887e <R3_2_Init+0x286>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80087e8:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80087ec:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80087ee:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 80087f2:	b16b      	cbz	r3, 8008810 <R3_2_Init+0x218>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	05da      	lsls	r2, r3, #23
 80087f8:	d50a      	bpl.n	8008810 <R3_2_Init+0x218>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80087fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 80087fe:	9b05      	ldr	r3, [sp, #20]
 8008800:	b133      	cbz	r3, 8008810 <R3_2_Init+0x218>
 8008802:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 8008804:	9b05      	ldr	r3, [sp, #20]
 8008806:	3b01      	subs	r3, #1
 8008808:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	05db      	lsls	r3, r3, #23
 800880e:	d4f6      	bmi.n	80087fe <R3_2_Init+0x206>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8008810:	68e3      	ldr	r3, [r4, #12]
 8008812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008816:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8008818:	6a23      	ldr	r3, [r4, #32]
 800881a:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800881e:	f043 0305 	orr.w	r3, r3, #5
 8008822:	6223      	str	r3, [r4, #32]
}
 8008824:	b007      	add	sp, #28
 8008826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800882a:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
 800882e:	2b01      	cmp	r3, #1
 8008830:	d109      	bne.n	8008846 <R3_2_Init+0x24e>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8008832:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 8008836:	2903      	cmp	r1, #3
 8008838:	d105      	bne.n	8008846 <R3_2_Init+0x24e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800883a:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800883c:	6963      	ldr	r3, [r4, #20]
 800883e:	f043 0301 	orr.w	r3, r3, #1
 8008842:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008844:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8008846:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800884a:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800884c:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800884e:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8008852:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8008854:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1cb      	bne.n	80087f4 <R3_2_Init+0x1fc>
 800885c:	e7d8      	b.n	8008810 <R3_2_Init+0x218>
      R3_2_ADCxInit (ADCx_1);
 800885e:	4628      	mov	r0, r5
 8008860:	f7ff fbb8 	bl	8007fd4 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8008868:	686b      	ldr	r3, [r5, #4]
 800886a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800886e:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008870:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8008872:	07d9      	lsls	r1, r3, #31
 8008874:	d488      	bmi.n	8008788 <R3_2_Init+0x190>
      R3_2_ADCxInit (ADCx_2);
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff fbac 	bl	8007fd4 <R3_2_ADCxInit>
 800887c:	e784      	b.n	8008788 <R3_2_Init+0x190>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800887e:	2101      	movs	r1, #1
 8008880:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008882:	6961      	ldr	r1, [r4, #20]
 8008884:	f041 0101 	orr.w	r1, r1, #1
 8008888:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800888a:	6323      	str	r3, [r4, #48]	; 0x30
}
 800888c:	e7ac      	b.n	80087e8 <R3_2_Init+0x1f0>
 800888e:	bf00      	nop
 8008890:	e0042000 	.word	0xe0042000
 8008894:	40012c00 	.word	0x40012c00

08008898 <R3_2_CurrentReadingPolarization>:
{
 8008898:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800889a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800889e:	6846      	ldr	r6, [r0, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80088a0:	689d      	ldr	r5, [r3, #8]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 80088a2:	6981      	ldr	r1, [r0, #24]
{
 80088a4:	b085      	sub	sp, #20
  pHandle->PhaseAOffset = 0u;
 80088a6:	2200      	movs	r2, #0
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 80088a8:	9602      	str	r6, [sp, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80088aa:	e9d3 7600 	ldrd	r7, r6, [r3]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 80088ae:	9103      	str	r1, [sp, #12]
  pHandle->PolarizationCounter = 0u;
 80088b0:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  CLEAR_BIT(TIMx->CCER, Channels);
 80088b4:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 80088b6:	6702      	str	r2, [r0, #112]	; 0x70
 80088b8:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80088bc:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 80088c0:	e9c0 221d 	strd	r2, r2, [r0, #116]	; 0x74
 80088c4:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80088c6:	4a3f      	ldr	r2, [pc, #252]	; (80089c4 <R3_2_CurrentReadingPolarization+0x12c>)
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80088c8:	4b3f      	ldr	r3, [pc, #252]	; (80089c8 <R3_2_CurrentReadingPolarization+0x130>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80088ca:	6042      	str	r2, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80088cc:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80088ce:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 80088d0:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80088d2:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
  pHandle->PolarizationSector=SECTOR_5;
 80088d6:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 80088da:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
{
 80088de:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80088e0:	f7ff fd18 	bl	8008314 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 80088e4:	4a39      	ldr	r2, [pc, #228]	; (80089cc <R3_2_CurrentReadingPolarization+0x134>)
 80088e6:	686b      	ldr	r3, [r5, #4]
 80088e8:	4013      	ands	r3, r2
 80088ea:	2b70      	cmp	r3, #112	; 0x70
 80088ec:	d1fb      	bne.n	80088e6 <R3_2_CurrentReadingPolarization+0x4e>
  MODIFY_REG(ADCx->CR,
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4937      	ldr	r1, [pc, #220]	; (80089d0 <R3_2_CurrentReadingPolarization+0x138>)
  waitForPolarizationEnd( TIMx,
 80088f2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80088f6:	400a      	ands	r2, r1
 80088f8:	f042 0208 	orr.w	r2, r2, #8
 80088fc:	60ba      	str	r2, [r7, #8]
 80088fe:	68b3      	ldr	r3, [r6, #8]
 8008900:	400b      	ands	r3, r1
 8008902:	f043 0308 	orr.w	r3, r3, #8
 8008906:	60b3      	str	r3, [r6, #8]
 8008908:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800890c:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8008910:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
 8008914:	4628      	mov	r0, r5
 8008916:	e9cd 3100 	strd	r3, r1, [sp]
 800891a:	f7ff fb3f 	bl	8007f9c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800891e:	4620      	mov	r0, r4
 8008920:	f7ff fd44 	bl	80083ac <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8008924:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008926:	4a2b      	ldr	r2, [pc, #172]	; (80089d4 <R3_2_CurrentReadingPolarization+0x13c>)
 8008928:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800892a:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 800892c:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 8008930:	f884 6081 	strb.w	r6, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 8008934:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8008938:	f7ff fcec 	bl	8008314 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 800893c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8008940:	e9dd 3100 	ldrd	r3, r1, [sp]
 8008944:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8008948:	4628      	mov	r0, r5
 800894a:	f7ff fb27 	bl	8007f9c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800894e:	4620      	mov	r0, r4
 8008950:	f7ff fd2c 	bl	80083ac <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008954:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008958:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800895a:	9f02      	ldr	r7, [sp, #8]
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800895c:	9803      	ldr	r0, [sp, #12]
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800895e:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008960:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8008962:	0912      	lsrs	r2, r2, #4
 8008964:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008968:	091b      	lsrs	r3, r3, #4
 800896a:	67a3      	str	r3, [r4, #120]	; 0x78
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800896c:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800896e:	61a0      	str	r0, [r4, #24]
 8008970:	f023 0308 	bic.w	r3, r3, #8
 8008974:	61ab      	str	r3, [r5, #24]
 8008976:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8008978:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800897c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008980:	61aa      	str	r2, [r5, #24]
 8008982:	69ea      	ldr	r2, [r5, #28]
 8008984:	f022 0208 	bic.w	r2, r2, #8
 8008988:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800898a:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800898c:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800898e:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008990:	69ab      	ldr	r3, [r5, #24]
 8008992:	f043 0308 	orr.w	r3, r3, #8
 8008996:	61ab      	str	r3, [r5, #24]
 8008998:	69ab      	ldr	r3, [r5, #24]
 800899a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800899e:	61ab      	str	r3, [r5, #24]
 80089a0:	69eb      	ldr	r3, [r5, #28]
 80089a2:	f043 0308 	orr.w	r3, r3, #8
 80089a6:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 80089a8:	6a2b      	ldr	r3, [r5, #32]
 80089aa:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80089ae:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 80089b2:	2204      	movs	r2, #4
 80089b4:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 80089b6:	f884 6084 	strb.w	r6, [r4, #132]	; 0x84
  pHandle->_Super.Sector=SECTOR_5;
 80089ba:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
}
 80089be:	b005      	add	sp, #20
 80089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c2:	bf00      	nop
 80089c4:	08008235 	.word	0x08008235
 80089c8:	080081f9 	.word	0x080081f9
 80089cc:	02000070 	.word	0x02000070
 80089d0:	7fffffc0 	.word	0x7fffffc0
 80089d4:	08008281 	.word	0x08008281

080089d8 <R3_2_SetADCSampPointSectX>:
{
 80089d8:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 80089da:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 80089de:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 80089e2:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 80089e6:	1aca      	subs	r2, r1, r3
 80089e8:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 80089ec:	b292      	uxth	r2, r2
 80089ee:	42b2      	cmp	r2, r6
 80089f0:	d914      	bls.n	8008a1c <R3_2_SetADCSampPointSectX+0x44>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 80089f2:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 80089f4:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 80089f6:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 80089f8:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80089fc:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 80089fe:	8f45      	ldrh	r5, [r0, #58]	; 0x3a
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8008a00:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8008a02:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008a04:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008a06:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008a08:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008a0a:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008a0c:	6852      	ldr	r2, [r2, #4]
 8008a0e:	4b10      	ldr	r3, [pc, #64]	; (8008a50 <R3_2_SetADCSampPointSectX+0x78>)
 8008a10:	421a      	tst	r2, r3
}
 8008a12:	bf14      	ite	ne
 8008a14:	2001      	movne	r0, #1
 8008a16:	2000      	moveq	r0, #0
 8008a18:	bc70      	pop	{r4, r5, r6}
 8008a1a:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8008a1c:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 8008a20:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8008a22:	b2ad      	uxth	r5, r5
 8008a24:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8008a28:	d904      	bls.n	8008a34 <R3_2_SetADCSampPointSectX+0x5c>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8008a2a:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
 8008a2e:	1a9b      	subs	r3, r3, r2
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	e7e3      	b.n	80089fc <R3_2_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8008a34:	4433      	add	r3, r6
 8008a36:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	d8df      	bhi.n	80089fc <R3_2_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8008a42:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8008a46:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8008a48:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8008a4c:	e7d6      	b.n	80089fc <R3_2_SetADCSampPointSectX+0x24>
 8008a4e:	bf00      	nop
 8008a50:	02000070 	.word	0x02000070

08008a54 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008a54:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008a5e:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8008a62:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d033      	beq.n	8008ad2 <R3_2_TIMx_UP_IRQHandler+0x7e>
    while (ADCx_1->JSQR != 0x0u)
 8008a6a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1fc      	bne.n	8008a6a <R3_2_TIMx_UP_IRQHandler+0x16>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8008a70:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
 8008a74:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8008a78:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 8008a7a:	b12f      	cbz	r7, 8008a88 <R3_2_TIMx_UP_IRQHandler+0x34>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8008a7c:	6838      	ldr	r0, [r7, #0]
 8008a7e:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8008a80:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8008a84:	4330      	orrs	r0, r6
 8008a86:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8008a88:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8008a8a:	b13f      	cbz	r7, 8008a9c <R3_2_TIMx_UP_IRQHandler+0x48>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8008a8c:	6838      	ldr	r0, [r7, #0]
 8008a8e:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 8008a92:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 8008a96:	ea43 030e 	orr.w	r3, r3, lr
 8008a9a:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008a9c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8008aa0:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 8008aa4:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008aa6:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008aaa:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008aac:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008aae:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8008ab0:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008ab4:	686b      	ldr	r3, [r5, #4]
 8008ab6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008ac2:	2280      	movs	r2, #128	; 0x80
 8008ac4:	606b      	str	r3, [r5, #4]
}
 8008ac6:	f104 0066 	add.w	r0, r4, #102	; 0x66
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8008aca:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
}
 8008ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad2:	f894 c068 	ldrb.w	ip, [r4, #104]	; 0x68
 8008ad6:	e7e1      	b.n	8008a9c <R3_2_TIMx_UP_IRQHandler+0x48>

08008ad8 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8008ad8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8008adc:	b92b      	cbnz	r3, 8008aea <R3_2_BRK2_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008ade:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008ae2:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8008ae6:	2a02      	cmp	r2, #2
 8008ae8:	d004      	beq.n	8008af4 <R3_2_BRK2_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8008af0:	3066      	adds	r0, #102	; 0x66
 8008af2:	4770      	bx	lr
{
 8008af4:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008af6:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008afa:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8008b00:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008b02:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008b06:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008b0a:	628c      	str	r4, [r1, #40]	; 0x28
 8008b0c:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8008b14:	bc30      	pop	{r4, r5}
 8008b16:	3066      	adds	r0, #102	; 0x66
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop

08008b1c <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008b1c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8008b20:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008b22:	6890      	ldr	r0, [r2, #8]
 8008b24:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8008b26:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8008b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b2c:	6442      	str	r2, [r0, #68]	; 0x44
}
 8008b2e:	f103 0066 	add.w	r0, r3, #102	; 0x66
  pHandle->OverVoltageFlag = true;
 8008b32:	f883 1083 	strb.w	r1, [r3, #131]	; 0x83
  pHandle->BrakeActionLock = true;
 8008b36:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8008b3a:	4770      	bx	lr

08008b3c <R3_2_IsOverCurrentOccurred>:
{
 8008b3c:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 8008b3e:	f890 0083 	ldrb.w	r0, [r0, #131]	; 0x83
 8008b42:	b160      	cbz	r0, 8008b5e <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8008b4a:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8008b4c:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8008b4e:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8008b52:	b11a      	cbz	r2, 8008b5c <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8008b54:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 8008b56:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8008b58:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8008b5c:	4770      	bx	lr
 8008b5e:	2140      	movs	r1, #64	; 0x40
 8008b60:	e7f5      	b.n	8008b4e <R3_2_IsOverCurrentOccurred+0x12>
 8008b62:	bf00      	nop

08008b64 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8008b64:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
{
 8008b68:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8008b6a:	2900      	cmp	r1, #0
 8008b6c:	d13d      	bne.n	8008bea <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008b6e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8008b72:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b7a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008b7e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008b82:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008b84:	6a1a      	ldr	r2, [r3, #32]
 8008b86:	f042 0201 	orr.w	r2, r2, #1
 8008b8a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	f022 0204 	bic.w	r2, r2, #4
 8008b92:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008b94:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008b96:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8008b9a:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008b9c:	f103 0118 	add.w	r1, r3, #24
 8008ba0:	d031      	beq.n	8008c06 <R3_2_RLDetectionModeEnable+0xa2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008ba2:	2a02      	cmp	r2, #2
 8008ba4:	d10f      	bne.n	8008bc6 <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008ba6:	699a      	ldr	r2, [r3, #24]
 8008ba8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008bac:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bb4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008bb6:	6a1a      	ldr	r2, [r3, #32]
 8008bb8:	f042 0210 	orr.w	r2, r2, #16
 8008bbc:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008bbe:	6a1a      	ldr	r2, [r3, #32]
 8008bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc4:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008bc6:	684a      	ldr	r2, [r1, #4]
 8008bc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008bcc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008bd0:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8008bd4:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008bd6:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8008bd8:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8008bda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bde:	621a      	str	r2, [r3, #32]
 8008be0:	6a1a      	ldr	r2, [r3, #32]
 8008be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008be6:	621a      	str	r2, [r3, #32]
 8008be8:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008bea:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8008bec:	490f      	ldr	r1, [pc, #60]	; (8008c2c <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008bee:	4a10      	ldr	r2, [pc, #64]	; (8008c30 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008bf0:	4c10      	ldr	r4, [pc, #64]	; (8008c34 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008bf2:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8008bf4:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008bf6:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008bf8:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8008bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8008c00:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8008c04:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008c06:	699a      	ldr	r2, [r3, #24]
 8008c08:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008c0c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c14:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	f022 0210 	bic.w	r2, r2, #16
 8008c1c:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8008c1e:	6a1a      	ldr	r2, [r3, #32]
 8008c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c24:	621a      	str	r2, [r3, #32]
}
 8008c26:	e7ce      	b.n	8008bc6 <R3_2_RLDetectionModeEnable+0x62>
 8008c28:	08008411 	.word	0x08008411
 8008c2c:	080084b5 	.word	0x080084b5
 8008c30:	080083ad 	.word	0x080083ad
 8008c34:	08008469 	.word	0x08008469

08008c38 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8008c38:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d05a      	beq.n	8008cf6 <R3_2_RLDetectionModeDisable+0xbe>
{
 8008c40:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008c42:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
 8008c46:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008c48:	699a      	ldr	r2, [r3, #24]
 8008c4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c4e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008c52:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008c56:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	f042 0201 	orr.w	r2, r2, #1
 8008c5e:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008c60:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8008c64:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8008c66:	f103 0518 	add.w	r5, r3, #24
 8008c6a:	d045      	beq.n	8008cf8 <R3_2_RLDetectionModeDisable+0xc0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008c6c:	2a02      	cmp	r2, #2
 8008c6e:	d103      	bne.n	8008c78 <R3_2_RLDetectionModeDisable+0x40>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008c70:	6a1a      	ldr	r2, [r3, #32]
 8008c72:	f022 0204 	bic.w	r2, r2, #4
 8008c76:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8008c78:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
 8008c7c:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008c7e:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008c80:	699a      	ldr	r2, [r3, #24]
 8008c82:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008c86:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008c8a:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8008c8e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008c90:	6a1a      	ldr	r2, [r3, #32]
 8008c92:	f042 0210 	orr.w	r2, r2, #16
 8008c96:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008c98:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8008c9c:	2a01      	cmp	r2, #1
 8008c9e:	d035      	beq.n	8008d0c <R3_2_RLDetectionModeDisable+0xd4>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008ca0:	2a02      	cmp	r2, #2
 8008ca2:	d103      	bne.n	8008cac <R3_2_RLDetectionModeDisable+0x74>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008ca4:	6a1a      	ldr	r2, [r3, #32]
 8008ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008caa:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008cac:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008cae:	686a      	ldr	r2, [r5, #4]
 8008cb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008cb4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008cb8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8008cbc:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 8008cbe:	6a1a      	ldr	r2, [r3, #32]
 8008cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cc4:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8008cc6:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
 8008cca:	2a01      	cmp	r2, #1
 8008ccc:	d019      	beq.n	8008d02 <R3_2_RLDetectionModeDisable+0xca>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8008cce:	2a02      	cmp	r2, #2
 8008cd0:	d103      	bne.n	8008cda <R3_2_RLDetectionModeDisable+0xa2>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008cd2:	6a1a      	ldr	r2, [r3, #32]
 8008cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cd8:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8008cda:	4c0f      	ldr	r4, [pc, #60]	; (8008d18 <R3_2_RLDetectionModeDisable+0xe0>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008cdc:	4a0f      	ldr	r2, [pc, #60]	; (8008d1c <R3_2_RLDetectionModeDisable+0xe4>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008cde:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008ce0:	4e0f      	ldr	r6, [pc, #60]	; (8008d20 <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8008ce2:	4d10      	ldr	r5, [pc, #64]	; (8008d24 <R3_2_RLDetectionModeDisable+0xec>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008ce4:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8008ce6:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008ce8:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8008cec:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8008cee:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8008cf2:	bc70      	pop	{r4, r5, r6}
 8008cf4:	4770      	bx	lr
 8008cf6:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8008cf8:	6a1a      	ldr	r2, [r3, #32]
 8008cfa:	f042 0204 	orr.w	r2, r2, #4
 8008cfe:	621a      	str	r2, [r3, #32]
}
 8008d00:	e7ba      	b.n	8008c78 <R3_2_RLDetectionModeDisable+0x40>
  SET_BIT(TIMx->CCER, Channels);
 8008d02:	6a1a      	ldr	r2, [r3, #32]
 8008d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d08:	621a      	str	r2, [r3, #32]
}
 8008d0a:	e7e6      	b.n	8008cda <R3_2_RLDetectionModeDisable+0xa2>
  SET_BIT(TIMx->CCER, Channels);
 8008d0c:	6a1a      	ldr	r2, [r3, #32]
 8008d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d12:	621a      	str	r2, [r3, #32]
}
 8008d14:	e7ca      	b.n	8008cac <R3_2_RLDetectionModeDisable+0x74>
 8008d16:	bf00      	nop
 8008d18:	08008315 	.word	0x08008315
 8008d1c:	080083ad 	.word	0x080083ad
 8008d20:	08008089 	.word	0x08008089
 8008d24:	080082c5 	.word	0x080082c5

08008d28 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008d28:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008d2c:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8008d2e:	69da      	ldr	r2, [r3, #28]
{
 8008d30:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008d32:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8008d36:	f8b0 6062 	ldrh.w	r6, [r0, #98]	; 0x62
 8008d3a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008d3e:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 8008d42:	2501      	movs	r5, #1
 8008d44:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8008d48:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8008d4c:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8008d4e:	f8b0 5064 	ldrh.w	r5, [r0, #100]	; 0x64
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8008d52:	8741      	strh	r1, [r0, #58]	; 0x3a
 8008d54:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8008d58:	1ba4      	subs	r4, r4, r6
 8008d5a:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008d5c:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008d5e:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008d60:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008d62:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8008d64:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
 8008d68:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8008d6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008d70:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8008d74:	2403      	movs	r4, #3
 8008d76:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8008d78:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 8008d7a:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008d7e:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8008d80:	d007      	beq.n	8008d92 <R3_2_RLDetectionModeSetDuty+0x6a>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8008d82:	4a07      	ldr	r2, [pc, #28]	; (8008da0 <R3_2_RLDetectionModeSetDuty+0x78>)
 8008d84:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 8008d86:	bf14      	ite	ne
 8008d88:	2101      	movne	r1, #1
 8008d8a:	2100      	moveq	r1, #0
}
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	bc70      	pop	{r4, r5, r6}
 8008d90:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8008d92:	2300      	movs	r3, #0
 8008d94:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8008d98:	bc70      	pop	{r4, r5, r6}
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	02000070 	.word	0x02000070

08008da4 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8008da4:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8008da6:	8b82      	ldrh	r2, [r0, #28]
 8008da8:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008daa:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8008dac:	4414      	add	r4, r2
 8008dae:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008db0:	b14b      	cbz	r3, 8008dc6 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8008db2:	6a05      	ldr	r5, [r0, #32]
 8008db4:	2300      	movs	r3, #0
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	3301      	adds	r3, #1
 8008dba:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8008dbe:	8b01      	ldrh	r1, [r0, #24]
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	4291      	cmp	r1, r2
 8008dc4:	d8f7      	bhi.n	8008db6 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f364 030f 	bfi	r3, r4, #0, #16
 8008dcc:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8008dd0:	2200      	movs	r2, #0
}
 8008dd2:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8008dd4:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8008dd6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8008dda:	4770      	bx	lr

08008ddc <RVBS_Init>:
{
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8008de0:	300c      	adds	r0, #12
 8008de2:	f7fa fbf1 	bl	80035c8 <RCM_RegisterRegConv>
 8008de6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8008dea:	4620      	mov	r0, r4
 8008dec:	f7ff ffda 	bl	8008da4 <RVBS_Clear>
}
 8008df0:	bd10      	pop	{r4, pc}
 8008df2:	bf00      	nop

08008df4 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8008df4:	88c3      	ldrh	r3, [r0, #6]
 8008df6:	8b42      	ldrh	r2, [r0, #26]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d305      	bcc.n	8008e08 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8008dfc:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8008dfe:	4298      	cmp	r0, r3
 8008e00:	bf8c      	ite	hi
 8008e02:	2004      	movhi	r0, #4
 8008e04:	2000      	movls	r0, #0
 8008e06:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8008e08:	2002      	movs	r0, #2
  }
  return fault;
}
 8008e0a:	4770      	bx	lr

08008e0c <RVBS_CalcAvVbus>:
{
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008e10:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008e14:	f7fa fcac 	bl	8003770 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8008e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e1c:	4298      	cmp	r0, r3
 8008e1e:	d01c      	beq.n	8008e5a <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8008e20:	6a2f      	ldr	r7, [r5, #32]
 8008e22:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8008e26:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008e2a:	8b2e      	ldrh	r6, [r5, #24]
 8008e2c:	b1d6      	cbz	r6, 8008e64 <RVBS_CalcAvVbus+0x58>
 8008e2e:	2300      	movs	r3, #0
    wtemp = 0;
 8008e30:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8008e32:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008e36:	3301      	adds	r3, #1
 8008e38:	b2d9      	uxtb	r1, r3
 8008e3a:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 8008e3c:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8008e3e:	460b      	mov	r3, r1
 8008e40:	d3f7      	bcc.n	8008e32 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8008e42:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008e46:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8008e4a:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008e4c:	3e01      	subs	r6, #1
 8008e4e:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8008e50:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8008e52:	da09      	bge.n	8008e68 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8008e54:	3301      	adds	r3, #1
 8008e56:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f7ff ffca 	bl	8008df4 <RVBS_CheckFaultState>
 8008e60:	8128      	strh	r0, [r5, #8]
}
 8008e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8008e64:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8008e66:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f7ff ffc0 	bl	8008df4 <RVBS_CheckFaultState>
 8008e74:	8128      	strh	r0, [r5, #8]
}
 8008e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e78 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8008e78:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8008e7a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8008e7c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8008e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8008e84:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8008e86:	4770      	bx	lr

08008e88 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8008e88:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8008e8c:	2901      	cmp	r1, #1
 8008e8e:	d90c      	bls.n	8008eaa <REMNG_Calc+0x22>
{
 8008e90:	b410      	push	{r4}
 8008e92:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8008e96:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8008e98:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8008e9a:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8008e9c:	6083      	str	r3, [r0, #8]
 8008e9e:	fb93 f2f2 	sdiv	r2, r3, r2
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 8008ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8008eaa:	d005      	beq.n	8008eb8 <REMNG_Calc+0x30>
 8008eac:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 8008eae:	6083      	str	r3, [r0, #8]
 8008eb0:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8008eb8:	6842      	ldr	r2, [r0, #4]
 8008eba:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8008ebc:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8008ebe:	fb03 f302 	mul.w	r3, r3, r2
    pHandle->RampRemainingStep = 0u;
 8008ec2:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8008ec4:	6083      	str	r3, [r0, #8]
}
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop

08008ecc <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8008ecc:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8008ece:	fab0 f080 	clz	r0, r0
 8008ed2:	0940      	lsrs	r0, r0, #5
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop

08008ed8 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	bfb8      	it	lt
 8008edc:	4240      	neglt	r0, r0
{
 8008ede:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8008ee0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008ee4:	e002      	b.n	8008eec <getScalingFactor+0x14>
 8008ee6:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 8008ee8:	2b20      	cmp	r3, #32
 8008eea:	d007      	beq.n	8008efc <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8008eec:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 8008ef0:	4290      	cmp	r0, r2
 8008ef2:	d3f8      	bcc.n	8008ee6 <getScalingFactor+0xe>
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	4098      	lsls	r0, r3
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 8008efa:	4770      	bx	lr
 8008efc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop

08008f04 <REMNG_ExecRamp>:
{
 8008f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f08:	4604      	mov	r4, r0
 8008f0a:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 8008f0c:	4690      	mov	r8, r2
 8008f0e:	b95a      	cbnz	r2, 8008f28 <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8008f10:	4608      	mov	r0, r1
 8008f12:	f7ff ffe1 	bl	8008ed8 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8008f16:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8008f1a:	6160      	str	r0, [r4, #20]
    pHandle->IncDecAmount = 0;
 8008f1c:	e9c4 8803 	strd	r8, r8, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8008f20:	60a5      	str	r5, [r4, #8]
}
 8008f22:	2001      	movs	r0, #1
 8008f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8008f28:	6943      	ldr	r3, [r0, #20]
 8008f2a:	6887      	ldr	r7, [r0, #8]
 8008f2c:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8008f30:	1bce      	subs	r6, r1, r7
 8008f32:	4630      	mov	r0, r6
 8008f34:	f7ff ffd0 	bl	8008ed8 <getScalingFactor>
 8008f38:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	f7ff ffcc 	bl	8008ed8 <getScalingFactor>
 8008f40:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8008f42:	4628      	mov	r0, r5
 8008f44:	f7ff ffc8 	bl	8008ed8 <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8008f48:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8008f4a:	4603      	mov	r3, r0
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8008f4c:	6821      	ldr	r1, [r4, #0]
    pHandle->TargetFinal = TargetFinal;
 8008f4e:	6065      	str	r5, [r4, #4]
 8008f50:	bf2c      	ite	cs
 8008f52:	4648      	movcs	r0, r9
 8008f54:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 8008f56:	4298      	cmp	r0, r3
 8008f58:	bf28      	it	cs
 8008f5a:	4618      	movcs	r0, r3
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8008f5c:	fb01 f308 	mul.w	r3, r1, r8
    aux /= 1000u;
 8008f60:	4908      	ldr	r1, [pc, #32]	; (8008f84 <REMNG_ExecRamp+0x80>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8008f62:	6160      	str	r0, [r4, #20]
    aux /= 1000u;
 8008f64:	fba1 2303 	umull	r2, r3, r1, r3
 8008f68:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8008f6a:	fb07 f700 	mul.w	r7, r7, r0
    pHandle->RampRemainingStep++;
 8008f6e:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8008f70:	fb00 f006 	mul.w	r0, r0, r6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8008f74:	60a7      	str	r7, [r4, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8008f76:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->IncDecAmount = aux1;
 8008f7a:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8008f7e:	2001      	movs	r0, #1
 8008f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f84:	10624dd3 	.word	0x10624dd3

08008f88 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8008f88:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop

08008f90 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8008f90:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop

08008f98 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8008f98:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop

08008fa0 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8008fa0:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008fa4:	8a81      	ldrh	r1, [r0, #20]
{
 8008fa6:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8008fa8:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8008faa:	bfb8      	it	lt
 8008fac:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008fae:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008fb0:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008fb2:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8008fb4:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8008fb6:	429d      	cmp	r5, r3
 8008fb8:	d817      	bhi.n	8008fea <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8008fba:	4299      	cmp	r1, r3
 8008fbc:	bf2c      	ite	cs
 8008fbe:	2300      	movcs	r3, #0
 8008fc0:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8008fc2:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008fc6:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8008fc8:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8008fca:	bfb8      	it	lt
 8008fcc:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8008fce:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8008fd0:	428d      	cmp	r5, r1
 8008fd2:	d300      	bcc.n	8008fd6 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8008fd4:	b15b      	cbz	r3, 8008fee <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8008fd6:	4294      	cmp	r4, r2
 8008fd8:	d901      	bls.n	8008fde <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 8008fda:	3201      	adds	r2, #1
 8008fdc:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008fde:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8008fe0:	1b10      	subs	r0, r2, r4
 8008fe2:	bf18      	it	ne
 8008fe4:	2001      	movne	r0, #1
 8008fe6:	bc30      	pop	{r4, r5}
 8008fe8:	4770      	bx	lr
    SpeedError = true;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e7e9      	b.n	8008fc2 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 8008fee:	4294      	cmp	r4, r2
 8008ff0:	bf88      	it	hi
 8008ff2:	2200      	movhi	r2, #0
 8008ff4:	e7f3      	b.n	8008fde <SPD_IsMecSpeedReliable+0x3e>
 8008ff6:	bf00      	nop

08008ff8 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8008ff8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8008ffc:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8009000:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8009004:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8009008:	b200      	sxth	r0, r0
 800900a:	4770      	bx	lr

0800900c <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800900c:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800900e:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8009012:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 8009016:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 800901a:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800901c:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800901e:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 8009020:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8009022:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8009026:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 8009028:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800902a:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 800902c:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 800902e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8009030:	6183      	str	r3, [r0, #24]
}
 8009032:	4770      	bx	lr

08009034 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8009034:	6141      	str	r1, [r0, #20]
}
 8009036:	4770      	bx	lr

08009038 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8009038:	6940      	ldr	r0, [r0, #20]
 800903a:	4770      	bx	lr

0800903c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800903c:	7803      	ldrb	r3, [r0, #0]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d000      	beq.n	8009044 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8009042:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8009044:	6900      	ldr	r0, [r0, #16]
 8009046:	2100      	movs	r1, #0
 8009048:	f7fe bebc 	b.w	8007dc4 <PID_SetIntegralTerm>

0800904c <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800904c:	6840      	ldr	r0, [r0, #4]
 800904e:	2800      	cmp	r0, #0
 8009050:	bfbc      	itt	lt
 8009052:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8009056:	30ff      	addlt	r0, #255	; 0xff
}
 8009058:	1400      	asrs	r0, r0, #16
 800905a:	4770      	bx	lr

0800905c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800905c:	6880      	ldr	r0, [r0, #8]
 800905e:	2800      	cmp	r0, #0
 8009060:	bfbc      	itt	lt
 8009062:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8009066:	30ff      	addlt	r0, #255	; 0xff
}
 8009068:	1400      	asrs	r0, r0, #16
 800906a:	4770      	bx	lr

0800906c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800906c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800906e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009070:	60c3      	str	r3, [r0, #12]
}
 8009072:	4770      	bx	lr

08009074 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009076:	7806      	ldrb	r6, [r0, #0]
{
 8009078:	4604      	mov	r4, r0
 800907a:	460d      	mov	r5, r1
 800907c:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800907e:	b326      	cbz	r6, 80090ca <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009080:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009082:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009084:	2800      	cmp	r0, #0
 8009086:	bfbc      	itt	lt
 8009088:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800908c:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800908e:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8009090:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8009094:	dd01      	ble.n	800909a <STC_ExecRamp+0x26>
      AllowedRange = false;
 8009096:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8009098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800909a:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800909e:	42a9      	cmp	r1, r5
 80090a0:	dcf9      	bgt.n	8009096 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 80090a2:	8c23      	ldrh	r3, [r4, #32]
 80090a4:	429d      	cmp	r5, r3
 80090a6:	da03      	bge.n	80090b0 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 80090a8:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80090ac:	42ab      	cmp	r3, r5
 80090ae:	dbf2      	blt.n	8009096 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 80090b0:	b9af      	cbnz	r7, 80090de <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80090b2:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80090b4:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 80090b6:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 80090b8:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80090bc:	bf0c      	ite	eq
 80090be:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80090c0:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80090c2:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80090c4:	61a3      	str	r3, [r4, #24]
 80090c6:	2001      	movs	r0, #1
}
 80090c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80090ca:	f7ff ffc7 	bl	800905c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80090ce:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 80090d0:	42b5      	cmp	r5, r6
 80090d2:	dce0      	bgt.n	8009096 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80090d4:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80090d8:	42ab      	cmp	r3, r5
 80090da:	dcdc      	bgt.n	8009096 <STC_ExecRamp+0x22>
 80090dc:	e7e8      	b.n	80090b0 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80090de:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 80090e0:	4a07      	ldr	r2, [pc, #28]	; (8009100 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 80090e2:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80090e4:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 80090e8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ec:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80090ee:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80090f0:	1a2d      	subs	r5, r5, r0
 80090f2:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 80090f4:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80090f6:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 80090fa:	2001      	movs	r0, #1
 80090fc:	61a5      	str	r5, [r4, #24]
}
 80090fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009100:	10624dd3 	.word	0x10624dd3

08009104 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8009104:	2300      	movs	r3, #0
 8009106:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8009108:	6183      	str	r3, [r0, #24]
}
 800910a:	4770      	bx	lr

0800910c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800910c:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800910e:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8009112:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8009114:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8009116:	2a00      	cmp	r2, #0
 8009118:	bf08      	it	eq
 800911a:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 800911c:	2b01      	cmp	r3, #1
{
 800911e:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8009120:	d90c      	bls.n	800913c <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8009122:	6981      	ldr	r1, [r0, #24]
 8009124:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8009126:	3b01      	subs	r3, #1
 8009128:	2e00      	cmp	r6, #0
 800912a:	60c3      	str	r3, [r0, #12]
 800912c:	4630      	mov	r0, r6
 800912e:	db09      	blt.n	8009144 <STC_CalcTorqueReference+0x38>
 8009130:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8009132:	2a01      	cmp	r2, #1
 8009134:	d00a      	beq.n	800914c <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8009136:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8009138:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 800913a:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 800913c:	d012      	beq.n	8009164 <STC_CalcTorqueReference+0x58>
 800913e:	2e00      	cmp	r6, #0
 8009140:	4630      	mov	r0, r6
 8009142:	daf5      	bge.n	8009130 <STC_CalcTorqueReference+0x24>
 8009144:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8009148:	30ff      	adds	r0, #255	; 0xff
 800914a:	e7f1      	b.n	8009130 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800914c:	6960      	ldr	r0, [r4, #20]
 800914e:	f7ff ff1f 	bl	8008f90 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8009152:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8009154:	b201      	sxth	r1, r0
 8009156:	6920      	ldr	r0, [r4, #16]
 8009158:	f7fe fe6e 	bl	8007e38 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800915c:	0403      	lsls	r3, r0, #16
 800915e:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8009162:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8009164:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8009168:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800916a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800916c:	60c3      	str	r3, [r0, #12]
 800916e:	e7e0      	b.n	8009132 <STC_CalcTorqueReference+0x26>

08009170 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8009170:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop

08009178 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8009178:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 800917c:	2200      	movs	r2, #0
 800917e:	b299      	uxth	r1, r3
 8009180:	f361 020f 	bfi	r2, r1, #0, #16
 8009184:	0c1b      	lsrs	r3, r3, #16
 8009186:	f363 421f 	bfi	r2, r3, #16, #16
{
 800918a:	b082      	sub	sp, #8
}
 800918c:	4610      	mov	r0, r2
 800918e:	b002      	add	sp, #8
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop

08009194 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8009194:	b510      	push	{r4, lr}
 8009196:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8009198:	6940      	ldr	r0, [r0, #20]
 800919a:	f7ff fef9 	bl	8008f90 <SPD_GetAvrgMecSpeedUnit>
 800919e:	0400      	lsls	r0, r0, #16
 80091a0:	6060      	str	r0, [r4, #4]
}
 80091a2:	bd10      	pop	{r4, pc}

080091a4 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80091a8:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop

080091b0 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 80091b0:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80091b2:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80091b4:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 80091b6:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80091b8:	430b      	orrs	r3, r1
 80091ba:	ea23 0202 	bic.w	r2, r3, r2
 80091be:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80091c0:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 80091c2:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80091c4:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80091c6:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 80091c8:	d008      	beq.n	80091dc <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80091ca:	b912      	cbnz	r2, 80091d2 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80091cc:	4620      	mov	r0, r4
 80091ce:	bc30      	pop	{r4, r5}
 80091d0:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80091d2:	240a      	movs	r4, #10
 80091d4:	7004      	strb	r4, [r0, #0]
}
 80091d6:	4620      	mov	r0, r4
 80091d8:	bc30      	pop	{r4, r5}
 80091da:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80091dc:	2a00      	cmp	r2, #0
 80091de:	d1f5      	bne.n	80091cc <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 80091e0:	240b      	movs	r4, #11
 80091e2:	7004      	strb	r4, [r0, #0]
}
 80091e4:	4620      	mov	r0, r4
 80091e6:	bc30      	pop	{r4, r5}
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop

080091ec <STM_NextState>:
{
 80091ec:	b508      	push	{r3, lr}
 80091ee:	7803      	ldrb	r3, [r0, #0]
 80091f0:	2b14      	cmp	r3, #20
 80091f2:	d810      	bhi.n	8009216 <STM_NextState+0x2a>
 80091f4:	e8df f003 	tbb	[pc, r3]
 80091f8:	240d545e 	.word	0x240d545e
 80091fc:	390d352e 	.word	0x390d352e
 8009200:	0f0f3f3c 	.word	0x0f0f3f3c
 8009204:	47650b44 	.word	0x47650b44
 8009208:	504d1b4a 	.word	0x504d1b4a
 800920c:	5b          	.byte	0x5b
 800920d:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800920e:	290e      	cmp	r1, #14
 8009210:	d013      	beq.n	800923a <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 8009212:	2907      	cmp	r1, #7
 8009214:	d011      	beq.n	800923a <STM_NextState+0x4e>
 8009216:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800921a:	2b01      	cmp	r3, #1
 800921c:	d018      	beq.n	8009250 <STM_NextState+0x64>
 800921e:	2907      	cmp	r1, #7
 8009220:	d016      	beq.n	8009250 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8009222:	2200      	movs	r2, #0
 8009224:	2180      	movs	r1, #128	; 0x80
 8009226:	f7ff ffc3 	bl	80091b0 <STM_FaultProcessing>
 800922a:	2000      	movs	r0, #0
}
 800922c:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800922e:	2914      	cmp	r1, #20
 8009230:	d8f1      	bhi.n	8009216 <STM_NextState+0x2a>
 8009232:	4b26      	ldr	r3, [pc, #152]	; (80092cc <STM_NextState+0xe0>)
 8009234:	40cb      	lsrs	r3, r1
 8009236:	07db      	lsls	r3, r3, #31
 8009238:	d5ed      	bpl.n	8009216 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800923a:	7001      	strb	r1, [r0, #0]
 800923c:	2001      	movs	r0, #1
}
 800923e:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8009240:	2911      	cmp	r1, #17
 8009242:	d8ee      	bhi.n	8009222 <STM_NextState+0x36>
 8009244:	4b22      	ldr	r3, [pc, #136]	; (80092d0 <STM_NextState+0xe4>)
 8009246:	40cb      	lsrs	r3, r1
 8009248:	07da      	lsls	r2, r3, #31
 800924a:	d4f6      	bmi.n	800923a <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800924c:	2903      	cmp	r1, #3
 800924e:	d1e8      	bne.n	8009222 <STM_NextState+0x36>
 8009250:	2000      	movs	r0, #0
}
 8009252:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8009254:	2913      	cmp	r1, #19
 8009256:	d0f0      	beq.n	800923a <STM_NextState+0x4e>
 8009258:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800925c:	2b05      	cmp	r3, #5
 800925e:	d1dc      	bne.n	800921a <STM_NextState+0x2e>
 8009260:	e7eb      	b.n	800923a <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8009262:	1f8b      	subs	r3, r1, #6
 8009264:	2b01      	cmp	r3, #1
 8009266:	d8d6      	bhi.n	8009216 <STM_NextState+0x2a>
 8009268:	e7e7      	b.n	800923a <STM_NextState+0x4e>
      if ( bState == STOP )
 800926a:	2908      	cmp	r1, #8
 800926c:	d1d3      	bne.n	8009216 <STM_NextState+0x2a>
 800926e:	e7e4      	b.n	800923a <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8009270:	2909      	cmp	r1, #9
 8009272:	d1d0      	bne.n	8009216 <STM_NextState+0x2a>
 8009274:	e7e1      	b.n	800923a <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8009276:	2900      	cmp	r1, #0
 8009278:	d0df      	beq.n	800923a <STM_NextState+0x4e>
 800927a:	290c      	cmp	r1, #12
 800927c:	d1cb      	bne.n	8009216 <STM_NextState+0x2a>
 800927e:	e7dc      	b.n	800923a <STM_NextState+0x4e>
      if ( bState == IDLE )
 8009280:	2900      	cmp	r1, #0
 8009282:	d0da      	beq.n	800923a <STM_NextState+0x4e>
 8009284:	e7c7      	b.n	8009216 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8009286:	2902      	cmp	r1, #2
 8009288:	d1c3      	bne.n	8009212 <STM_NextState+0x26>
 800928a:	e7d6      	b.n	800923a <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800928c:	2911      	cmp	r1, #17
 800928e:	d1c0      	bne.n	8009212 <STM_NextState+0x26>
 8009290:	e7d3      	b.n	800923a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8009292:	2904      	cmp	r1, #4
 8009294:	d1bd      	bne.n	8009212 <STM_NextState+0x26>
 8009296:	e7d0      	b.n	800923a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8009298:	1f0b      	subs	r3, r1, #4
 800929a:	2b01      	cmp	r3, #1
 800929c:	d8b9      	bhi.n	8009212 <STM_NextState+0x26>
 800929e:	e7cc      	b.n	800923a <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80092a0:	2907      	cmp	r1, #7
 80092a2:	d0ca      	beq.n	800923a <STM_NextState+0x4e>
 80092a4:	f1a1 030d 	sub.w	r3, r1, #13
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d8b4      	bhi.n	8009216 <STM_NextState+0x2a>
 80092ac:	e7c5      	b.n	800923a <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 80092ae:	2912      	cmp	r1, #18
 80092b0:	d1af      	bne.n	8009212 <STM_NextState+0x26>
 80092b2:	e7c2      	b.n	800923a <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80092b4:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d0be      	beq.n	800923a <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 80092bc:	290c      	cmp	r1, #12
 80092be:	d1ae      	bne.n	800921e <STM_NextState+0x32>
 80092c0:	e7bb      	b.n	800923a <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80092c2:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80092c6:	2b07      	cmp	r3, #7
 80092c8:	d1a5      	bne.n	8009216 <STM_NextState+0x2a>
 80092ca:	e7b6      	b.n	800923a <STM_NextState+0x4e>
 80092cc:	00140080 	.word	0x00140080
 80092d0:	00030092 	.word	0x00030092

080092d4 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80092d4:	7800      	ldrb	r0, [r0, #0]
 80092d6:	4770      	bx	lr

080092d8 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80092d8:	7803      	ldrb	r3, [r0, #0]
 80092da:	2b0b      	cmp	r3, #11
 80092dc:	d001      	beq.n	80092e2 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80092de:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80092e0:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80092e2:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80092e4:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80092e6:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80092e8:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80092ea:	2001      	movs	r0, #1
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop

080092f0 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80092f0:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80092f2:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80092f4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop

080092fc <STSPIN32G4_init>:
extern I2C_HandleTypeDef hi2c3;

void SystemClock_Config(void);

HAL_StatusTypeDef STSPIN32G4_init(STSPIN32G4_HandleTypeDef* hdl)
{
 80092fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092fe:	b089      	sub	sp, #36	; 0x24
  HAL_StatusTypeDef status = HAL_OK;
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009300:	2400      	movs	r4, #0
 8009302:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8009306:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800930a:	9406      	str	r4, [sp, #24]
  
  if(hdl == NULL)
 800930c:	2800      	cmp	r0, #0
 800930e:	d034      	beq.n	800937a <STSPIN32G4_init+0x7e>
    return HAL_ERROR;
  
  hdl->i2cHdl = &hi2c3;

  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009310:	4b1b      	ldr	r3, [pc, #108]	; (8009380 <STSPIN32G4_init+0x84>)
  hdl->i2cHdl = &hi2c3;
 8009312:	491c      	ldr	r1, [pc, #112]	; (8009384 <STSPIN32G4_init+0x88>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdl->i2cHdl = &hi2c3;
 8009316:	6001      	str	r1, [r0, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009318:	f042 0210 	orr.w	r2, r2, #16
 800931c:	64da      	str	r2, [r3, #76]	; 0x4c
 800931e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8009320:	4819      	ldr	r0, [pc, #100]	; (8009388 <STSPIN32G4_init+0x8c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009322:	f003 0310 	and.w	r3, r3, #16
 8009326:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8009328:	2201      	movs	r2, #1
 800932a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800932c:	9b01      	ldr	r3, [sp, #4]

  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 800932e:	2680      	movs	r6, #128	; 0x80
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8009330:	f7fc f936 	bl	80055a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 8009334:	2701      	movs	r7, #1
 8009336:	2200      	movs	r2, #0
 8009338:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 800933a:	a902      	add	r1, sp, #8
 800933c:	4812      	ldr	r0, [pc, #72]	; (8009388 <STSPIN32G4_init+0x8c>)
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 800933e:	e9cd 2304 	strd	r2, r3, [sp, #16]

  GPIO_InitStruct.Pin = GD_NFAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009342:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 8009344:	e9cd 6702 	strd	r6, r7, [sp, #8]
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 8009348:	f7fc f836 	bl	80053b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GD_NFAULT_Pin;
 800934c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009350:	2300      	movs	r3, #0
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 8009352:	a902      	add	r1, sp, #8
 8009354:	480c      	ldr	r0, [pc, #48]	; (8009388 <STSPIN32G4_init+0x8c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009356:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pin = GD_NFAULT_Pin;
 8009358:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 800935c:	f7fc f82c 	bl	80053b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GD_READY_Pin;
 8009360:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009364:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 8009366:	4808      	ldr	r0, [pc, #32]	; (8009388 <STSPIN32G4_init+0x8c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009368:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 800936a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GD_READY_Pin;
 800936c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GD_NFAULT_GPIO_Port, &GPIO_InitStruct);
 8009370:	f7fc f822 	bl	80053b8 <HAL_GPIO_Init>

  if(status != HAL_OK)
    return status;
  
  return status;
 8009374:	4620      	mov	r0, r4
}
 8009376:	b009      	add	sp, #36	; 0x24
 8009378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800937a:	2001      	movs	r0, #1
}
 800937c:	b009      	add	sp, #36	; 0x24
 800937e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009380:	40021000 	.word	0x40021000
 8009384:	200006dc 	.word	0x200006dc
 8009388:	48001000 	.word	0x48001000

0800938c <STSPIN32G4_setVCC>:
  
  return status;
}

HAL_StatusTypeDef STSPIN32G4_setVCC(STSPIN32G4_HandleTypeDef* hdl, STSPIN32G4_confVCC vcc)
{
 800938c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009390:	b088      	sub	sp, #32
  HAL_StatusTypeDef status;
  uint8_t i2cReg = 0;
 8009392:	2300      	movs	r3, #0
{
 8009394:	9105      	str	r1, [sp, #20]
  uint8_t i2cReg = 0;
 8009396:	f88d 301b 	strb.w	r3, [sp, #27]
  
  if(hdl == NULL)
 800939a:	2800      	cmp	r0, #0
 800939c:	d04d      	beq.n	800943a <STSPIN32G4_setVCC+0xae>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 800939e:	2501      	movs	r5, #1
 80093a0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80093a4:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80093a8:	f10d 071b 	add.w	r7, sp, #27
 80093ac:	9700      	str	r7, [sp, #0]
 80093ae:	4604      	mov	r4, r0
 80093b0:	462b      	mov	r3, r5
 80093b2:	6800      	ldr	r0, [r0, #0]
 80093b4:	462a      	mov	r2, r5
 80093b6:	218e      	movs	r1, #142	; 0x8e
 80093b8:	f7fc fb24 	bl	8005a04 <HAL_I2C_Mem_Read>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80093bc:	ae07      	add	r6, sp, #28
    return HAL_ERROR;
  
  status = STSPIN32G4_readReg(hdl, STSPIN32G4_I2C_POWMNG, &i2cReg);
  
  if(status == HAL_OK)
 80093be:	b1a8      	cbz	r0, 80093ec <STSPIN32G4_setVCC+0x60>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80093c0:	2701      	movs	r7, #1
 80093c2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80093c6:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 80093ca:	25dd      	movs	r5, #221	; 0xdd
 80093cc:	6820      	ldr	r0, [r4, #0]
 80093ce:	f88d 501c 	strb.w	r5, [sp, #28]
 80093d2:	463b      	mov	r3, r7
 80093d4:	220b      	movs	r2, #11
 80093d6:	218e      	movs	r1, #142	; 0x8e
 80093d8:	f7fc f9e6 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80093dc:	4605      	mov	r5, r0
 80093de:	2800      	cmp	r0, #0
 80093e0:	f000 80d3 	beq.w	800958a <STSPIN32G4_setVCC+0x1fe>
  }
  else
  {
    return STSPIN32G4_lockReg(hdl);
  }
}
 80093e4:	4628      	mov	r0, r5
 80093e6:	b008      	add	sp, #32
 80093e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80093ec:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80093f0:	9600      	str	r6, [sp, #0]
 80093f2:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80093f6:	6820      	ldr	r0, [r4, #0]
 80093f8:	f88d c01c 	strb.w	ip, [sp, #28]
 80093fc:	462b      	mov	r3, r5
 80093fe:	220b      	movs	r2, #11
 8009400:	218e      	movs	r1, #142	; 0x8e
 8009402:	f7fc f9d1 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009406:	2800      	cmp	r0, #0
 8009408:	d1da      	bne.n	80093c0 <STSPIN32G4_setVCC+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 800940a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800940e:	9600      	str	r6, [sp, #0]
 8009410:	6820      	ldr	r0, [r4, #0]
 8009412:	462b      	mov	r3, r5
 8009414:	2280      	movs	r2, #128	; 0x80
 8009416:	218e      	movs	r1, #142	; 0x8e
 8009418:	f7fc faf4 	bl	8005a04 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 800941c:	2800      	cmp	r0, #0
 800941e:	d1cf      	bne.n	80093c0 <STSPIN32G4_setVCC+0x34>
    if(statusReg.lock == 1)
 8009420:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 8009424:	2b00      	cmp	r3, #0
 8009426:	dbcb      	blt.n	80093c0 <STSPIN32G4_setVCC+0x34>
    switch(vcc.voltage)
 8009428:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800942c:	2b04      	cmp	r3, #4
 800942e:	d8c7      	bhi.n	80093c0 <STSPIN32G4_setVCC+0x34>
 8009430:	e8df f003 	tbb	[pc, r3]
 8009434:	8b949da4 	.word	0x8b949da4
 8009438:	08          	.byte	0x08
 8009439:	00          	.byte	0x00
    return HAL_ERROR;
 800943a:	2501      	movs	r5, #1
}
 800943c:	4628      	mov	r0, r5
 800943e:	b008      	add	sp, #32
 8009440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg &= ~STSPIN32G4_I2C_VCC_DIS;
 8009444:	f89d 501b 	ldrb.w	r5, [sp, #27]
 8009448:	f025 0520 	bic.w	r5, r5, #32
      i2cReg |= STSPIN32G4_I2C_VCC_VAL_3;
 800944c:	f045 0503 	orr.w	r5, r5, #3
 8009450:	f88d 501b 	strb.w	r5, [sp, #27]
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009454:	2301      	movs	r3, #1
 8009456:	f04f 0864 	mov.w	r8, #100	; 0x64
 800945a:	e9cd 3801 	strd	r3, r8, [sp, #4]
 800945e:	9600      	str	r6, [sp, #0]
 8009460:	6820      	ldr	r0, [r4, #0]
 8009462:	f88d 501c 	strb.w	r5, [sp, #28]
 8009466:	461a      	mov	r2, r3
 8009468:	218e      	movs	r1, #142	; 0x8e
 800946a:	f7fc f99d 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 800946e:	2800      	cmp	r0, #0
 8009470:	d1a6      	bne.n	80093c0 <STSPIN32G4_setVCC+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009472:	2301      	movs	r3, #1
 8009474:	e9cd 7300 	strd	r7, r3, [sp]
 8009478:	f8cd 8008 	str.w	r8, [sp, #8]
 800947c:	6820      	ldr	r0, [r4, #0]
 800947e:	2208      	movs	r2, #8
 8009480:	218e      	movs	r1, #142	; 0x8e
 8009482:	f7fc fabf 	bl	8005a04 <HAL_I2C_Mem_Read>
  if(status == HAL_OK) // configuration of nFAULT pin
 8009486:	2800      	cmp	r0, #0
 8009488:	d19a      	bne.n	80093c0 <STSPIN32G4_setVCC+0x34>
    if(vcc.useNFAULT)
 800948a:	f89d 3015 	ldrb.w	r3, [sp, #21]
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_FLT;
 800948e:	f89d c01b 	ldrb.w	ip, [sp, #27]
    if(vcc.useNFAULT)
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 8092 	beq.w	80095bc <STSPIN32G4_setVCC+0x230>
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_FLT;
 8009498:	f04c 0c01 	orr.w	ip, ip, #1
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 800949c:	2501      	movs	r5, #1
 800949e:	f04f 0864 	mov.w	r8, #100	; 0x64
 80094a2:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80094a6:	9600      	str	r6, [sp, #0]
 80094a8:	6820      	ldr	r0, [r4, #0]
 80094aa:	f88d c01b 	strb.w	ip, [sp, #27]
 80094ae:	462b      	mov	r3, r5
 80094b0:	2208      	movs	r2, #8
 80094b2:	218e      	movs	r1, #142	; 0x8e
 80094b4:	f88d c01c 	strb.w	ip, [sp, #28]
 80094b8:	f7fc f976 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80094bc:	2800      	cmp	r0, #0
 80094be:	f47f af7f 	bne.w	80093c0 <STSPIN32G4_setVCC+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 80094c2:	e9cd 5801 	strd	r5, r8, [sp, #4]
 80094c6:	9700      	str	r7, [sp, #0]
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	462b      	mov	r3, r5
 80094cc:	2207      	movs	r2, #7
 80094ce:	218e      	movs	r1, #142	; 0x8e
 80094d0:	f7fc fa98 	bl	8005a04 <HAL_I2C_Mem_Read>
  if(status == HAL_OK) // configuration of READY pin
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f47f af73 	bne.w	80093c0 <STSPIN32G4_setVCC+0x34>
    if(vcc.useREADY)
 80094da:	f89d 3016 	ldrb.w	r3, [sp, #22]
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_RDY;
 80094de:	f89d 501b 	ldrb.w	r5, [sp, #27]
    if(vcc.useREADY)
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d067      	beq.n	80095b6 <STSPIN32G4_setVCC+0x22a>
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_RDY;
 80094e6:	f045 0501 	orr.w	r5, r5, #1
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80094ea:	2701      	movs	r7, #1
 80094ec:	f04f 0864 	mov.w	r8, #100	; 0x64
 80094f0:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 80094f4:	463b      	mov	r3, r7
 80094f6:	6820      	ldr	r0, [r4, #0]
 80094f8:	f88d 501b 	strb.w	r5, [sp, #27]
 80094fc:	2207      	movs	r2, #7
 80094fe:	218e      	movs	r1, #142	; 0x8e
 8009500:	f88d 501c 	strb.w	r5, [sp, #28]
 8009504:	f7fc f950 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009508:	4605      	mov	r5, r0
 800950a:	2800      	cmp	r0, #0
 800950c:	f47f af58 	bne.w	80093c0 <STSPIN32G4_setVCC+0x34>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009510:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009514:	9600      	str	r6, [sp, #0]
 8009516:	f04f 0cdd 	mov.w	ip, #221	; 0xdd
 800951a:	6820      	ldr	r0, [r4, #0]
 800951c:	f88d c01c 	strb.w	ip, [sp, #28]
 8009520:	463b      	mov	r3, r7
 8009522:	220b      	movs	r2, #11
 8009524:	218e      	movs	r1, #142	; 0x8e
 8009526:	f7fc f93f 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 800952a:	2800      	cmp	r0, #0
 800952c:	f47f af5a 	bne.w	80093e4 <STSPIN32G4_setVCC+0x58>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009530:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009534:	9600      	str	r6, [sp, #0]
 8009536:	6820      	ldr	r0, [r4, #0]
 8009538:	463b      	mov	r3, r7
 800953a:	2280      	movs	r2, #128	; 0x80
 800953c:	218e      	movs	r1, #142	; 0x8e
 800953e:	f7fc fa61 	bl	8005a04 <HAL_I2C_Mem_Read>
}
 8009542:	4628      	mov	r0, r5
 8009544:	b008      	add	sp, #32
 8009546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg &= ~(STSPIN32G4_I2C_VCC_DIS|STSPIN32G4_I2C_VCC_VAL_3);
 800954a:	f89d 501b 	ldrb.w	r5, [sp, #27]
 800954e:	f025 0523 	bic.w	r5, r5, #35	; 0x23
      i2cReg |= STSPIN32G4_I2C_VCC_VAL_2;
 8009552:	f045 0502 	orr.w	r5, r5, #2
 8009556:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 800955a:	e77b      	b.n	8009454 <STSPIN32G4_setVCC+0xc8>
      i2cReg &= ~(STSPIN32G4_I2C_VCC_DIS|STSPIN32G4_I2C_VCC_VAL_3);
 800955c:	f89d 501b 	ldrb.w	r5, [sp, #27]
 8009560:	f025 0523 	bic.w	r5, r5, #35	; 0x23
      i2cReg |= STSPIN32G4_I2C_VCC_VAL_1;
 8009564:	f045 0501 	orr.w	r5, r5, #1
 8009568:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 800956c:	e772      	b.n	8009454 <STSPIN32G4_setVCC+0xc8>
      i2cReg &= ~(STSPIN32G4_I2C_VCC_DIS|STSPIN32G4_I2C_VCC_VAL_3);
 800956e:	f89d 501b 	ldrb.w	r5, [sp, #27]
 8009572:	f005 05dc 	and.w	r5, r5, #220	; 0xdc
 8009576:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 800957a:	e76b      	b.n	8009454 <STSPIN32G4_setVCC+0xc8>
      i2cReg |= STSPIN32G4_I2C_VCC_DIS;
 800957c:	f89d 501b 	ldrb.w	r5, [sp, #27]
 8009580:	f045 0520 	orr.w	r5, r5, #32
 8009584:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 8009588:	e764      	b.n	8009454 <STSPIN32G4_setVCC+0xc8>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 800958a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800958e:	9600      	str	r6, [sp, #0]
 8009590:	6820      	ldr	r0, [r4, #0]
 8009592:	463b      	mov	r3, r7
 8009594:	2280      	movs	r2, #128	; 0x80
 8009596:	218e      	movs	r1, #142	; 0x8e
 8009598:	f7fc fa34 	bl	8005a04 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 800959c:	4605      	mov	r5, r0
 800959e:	2800      	cmp	r0, #0
 80095a0:	f47f af20 	bne.w	80093e4 <STSPIN32G4_setVCC+0x58>
    if(statusReg.lock != 1)
 80095a4:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80095a8:	43ed      	mvns	r5, r5
      status = HAL_ERROR;
 80095aa:	f3c5 15c0 	ubfx	r5, r5, #7, #1
}
 80095ae:	4628      	mov	r0, r5
 80095b0:	b008      	add	sp, #32
 80095b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg &= ~STSPIN32G4_I2C_VCC_UVLO_RDY;
 80095b6:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80095ba:	e796      	b.n	80094ea <STSPIN32G4_setVCC+0x15e>
      i2cReg &= ~STSPIN32G4_I2C_VCC_UVLO_FLT;
 80095bc:	f00c 0cfe 	and.w	ip, ip, #254	; 0xfe
 80095c0:	e76c      	b.n	800949c <STSPIN32G4_setVCC+0x110>
 80095c2:	bf00      	nop

080095c4 <STSPIN32G4_setVDSP>:
  
  return status;
}

HAL_StatusTypeDef STSPIN32G4_setVDSP(STSPIN32G4_HandleTypeDef* hdl, STSPIN32G4_confVDSP vdsp)
{
 80095c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c8:	b088      	sub	sp, #32
  HAL_StatusTypeDef status;
  uint8_t i2cReg = 0;
 80095ca:	2300      	movs	r3, #0
{
 80095cc:	f8ad 1014 	strh.w	r1, [sp, #20]
  uint8_t i2cReg = 0;
 80095d0:	f88d 301b 	strb.w	r3, [sp, #27]
  
  if(hdl == NULL)
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d051      	beq.n	800967c <STSPIN32G4_setVDSP+0xb8>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 80095d8:	2501      	movs	r5, #1
 80095da:	2764      	movs	r7, #100	; 0x64
 80095dc:	e9cd 5701 	strd	r5, r7, [sp, #4]
 80095e0:	f10d 021b 	add.w	r2, sp, #27
 80095e4:	9200      	str	r2, [sp, #0]
 80095e6:	4604      	mov	r4, r0
 80095e8:	462b      	mov	r3, r5
 80095ea:	6800      	ldr	r0, [r0, #0]
 80095ec:	2202      	movs	r2, #2
 80095ee:	218e      	movs	r1, #142	; 0x8e
 80095f0:	f7fc fa08 	bl	8005a04 <HAL_I2C_Mem_Read>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80095f4:	ae07      	add	r6, sp, #28
    return HAL_ERROR;	
  
  status = STSPIN32G4_readReg(hdl, STSPIN32G4_I2C_LOGIC, &i2cReg);
  
  if(status == HAL_OK)
 80095f6:	b1a8      	cbz	r0, 8009624 <STSPIN32G4_setVDSP+0x60>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80095f8:	2701      	movs	r7, #1
 80095fa:	f04f 0864 	mov.w	r8, #100	; 0x64
 80095fe:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 8009602:	25dd      	movs	r5, #221	; 0xdd
 8009604:	6820      	ldr	r0, [r4, #0]
 8009606:	f88d 501c 	strb.w	r5, [sp, #28]
 800960a:	463b      	mov	r3, r7
 800960c:	220b      	movs	r2, #11
 800960e:	218e      	movs	r1, #142	; 0x8e
 8009610:	f7fc f8ca 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009614:	4605      	mov	r5, r0
 8009616:	2800      	cmp	r0, #0
 8009618:	f000 8096 	beq.w	8009748 <STSPIN32G4_setVDSP+0x184>
  }
  else
  {
    return STSPIN32G4_lockReg(hdl);
  }
}
 800961c:	4628      	mov	r0, r5
 800961e:	b008      	add	sp, #32
 8009620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009624:	e9cd 5701 	strd	r5, r7, [sp, #4]
 8009628:	9600      	str	r6, [sp, #0]
 800962a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 800962e:	6820      	ldr	r0, [r4, #0]
 8009630:	f88d c01c 	strb.w	ip, [sp, #28]
 8009634:	462b      	mov	r3, r5
 8009636:	220b      	movs	r2, #11
 8009638:	218e      	movs	r1, #142	; 0x8e
 800963a:	f7fc f8b5 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 800963e:	2800      	cmp	r0, #0
 8009640:	d1da      	bne.n	80095f8 <STSPIN32G4_setVDSP+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009642:	e9cd 5701 	strd	r5, r7, [sp, #4]
 8009646:	9600      	str	r6, [sp, #0]
 8009648:	6820      	ldr	r0, [r4, #0]
 800964a:	462b      	mov	r3, r5
 800964c:	2280      	movs	r2, #128	; 0x80
 800964e:	218e      	movs	r1, #142	; 0x8e
 8009650:	f7fc f9d8 	bl	8005a04 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 8009654:	2800      	cmp	r0, #0
 8009656:	d1cf      	bne.n	80095f8 <STSPIN32G4_setVDSP+0x34>
    if(statusReg.lock == 1)
 8009658:	f99d 301c 	ldrsb.w	r3, [sp, #28]
 800965c:	2b00      	cmp	r3, #0
 800965e:	dbcb      	blt.n	80095f8 <STSPIN32G4_setVDSP+0x34>
    i2cReg &= ~STSPIN32G4_I2C_VDS_P_DEG_3;
 8009660:	f89d 501b 	ldrb.w	r5, [sp, #27]
 8009664:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009668:	f005 05f3 	and.w	r5, r5, #243	; 0xf3
 800966c:	f88d 501b 	strb.w	r5, [sp, #27]
    switch(vdsp.deglitchTime)
 8009670:	2b03      	cmp	r3, #3
 8009672:	d8c1      	bhi.n	80095f8 <STSPIN32G4_setVDSP+0x34>
 8009674:	e8df f003 	tbb	[pc, r3]
 8009678:	075e630b 	.word	0x075e630b
    return HAL_ERROR;	
 800967c:	2501      	movs	r5, #1
}
 800967e:	4628      	mov	r0, r5
 8009680:	b008      	add	sp, #32
 8009682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg |= STSPIN32G4_I2C_VDS_P_DEG_3;
 8009686:	f045 050c 	orr.w	r5, r5, #12
 800968a:	f88d 501b 	strb.w	r5, [sp, #27]
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 800968e:	2701      	movs	r7, #1
 8009690:	f04f 0864 	mov.w	r8, #100	; 0x64
 8009694:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 8009698:	463b      	mov	r3, r7
 800969a:	6820      	ldr	r0, [r4, #0]
 800969c:	f88d 501c 	strb.w	r5, [sp, #28]
 80096a0:	2202      	movs	r2, #2
 80096a2:	218e      	movs	r1, #142	; 0x8e
 80096a4:	f7fc f880 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d1a5      	bne.n	80095f8 <STSPIN32G4_setVDSP+0x34>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 80096ac:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80096b0:	f10d 031b 	add.w	r3, sp, #27
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	6820      	ldr	r0, [r4, #0]
 80096b8:	463b      	mov	r3, r7
 80096ba:	2208      	movs	r2, #8
 80096bc:	218e      	movs	r1, #142	; 0x8e
 80096be:	f7fc f9a1 	bl	8005a04 <HAL_I2C_Mem_Read>
  if(status == HAL_OK) // configure nFault signaling
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d198      	bne.n	80095f8 <STSPIN32G4_setVDSP+0x34>
    if(vdsp.useNFAULT)
 80096c6:	f89d 3015 	ldrb.w	r3, [sp, #21]
      i2cReg |= STSPIN32G4_I2C_VDS_P_FLT;
 80096ca:	f89d 501b 	ldrb.w	r5, [sp, #27]
    if(vdsp.useNFAULT)
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d050      	beq.n	8009774 <STSPIN32G4_setVDSP+0x1b0>
      i2cReg |= STSPIN32G4_I2C_VDS_P_FLT;
 80096d2:	f045 0504 	orr.w	r5, r5, #4
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80096d6:	2701      	movs	r7, #1
 80096d8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80096dc:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 80096e0:	463b      	mov	r3, r7
 80096e2:	6820      	ldr	r0, [r4, #0]
 80096e4:	f88d 501b 	strb.w	r5, [sp, #27]
 80096e8:	2208      	movs	r2, #8
 80096ea:	218e      	movs	r1, #142	; 0x8e
 80096ec:	f88d 501c 	strb.w	r5, [sp, #28]
 80096f0:	f7fc f85a 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80096f4:	4605      	mov	r5, r0
 80096f6:	2800      	cmp	r0, #0
 80096f8:	f47f af7e 	bne.w	80095f8 <STSPIN32G4_setVDSP+0x34>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80096fc:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009700:	9600      	str	r6, [sp, #0]
 8009702:	f04f 0cdd 	mov.w	ip, #221	; 0xdd
 8009706:	6820      	ldr	r0, [r4, #0]
 8009708:	f88d c01c 	strb.w	ip, [sp, #28]
 800970c:	463b      	mov	r3, r7
 800970e:	220b      	movs	r2, #11
 8009710:	218e      	movs	r1, #142	; 0x8e
 8009712:	f7fc f849 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009716:	2800      	cmp	r0, #0
 8009718:	d180      	bne.n	800961c <STSPIN32G4_setVDSP+0x58>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 800971a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800971e:	9600      	str	r6, [sp, #0]
 8009720:	6820      	ldr	r0, [r4, #0]
 8009722:	463b      	mov	r3, r7
 8009724:	2280      	movs	r2, #128	; 0x80
 8009726:	218e      	movs	r1, #142	; 0x8e
 8009728:	f7fc f96c 	bl	8005a04 <HAL_I2C_Mem_Read>
}
 800972c:	4628      	mov	r0, r5
 800972e:	b008      	add	sp, #32
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg |= STSPIN32G4_I2C_VDS_P_DEG_2;
 8009734:	f045 0508 	orr.w	r5, r5, #8
 8009738:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 800973c:	e7a7      	b.n	800968e <STSPIN32G4_setVDSP+0xca>
      i2cReg |= STSPIN32G4_I2C_VDS_P_DEG_1;
 800973e:	f045 0504 	orr.w	r5, r5, #4
 8009742:	f88d 501b 	strb.w	r5, [sp, #27]
  if(status == HAL_OK)
 8009746:	e7a2      	b.n	800968e <STSPIN32G4_setVDSP+0xca>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009748:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800974c:	9600      	str	r6, [sp, #0]
 800974e:	6820      	ldr	r0, [r4, #0]
 8009750:	463b      	mov	r3, r7
 8009752:	2280      	movs	r2, #128	; 0x80
 8009754:	218e      	movs	r1, #142	; 0x8e
 8009756:	f7fc f955 	bl	8005a04 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 800975a:	4605      	mov	r5, r0
 800975c:	2800      	cmp	r0, #0
 800975e:	f47f af5d 	bne.w	800961c <STSPIN32G4_setVDSP+0x58>
    if(statusReg.lock != 1)
 8009762:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8009766:	43ed      	mvns	r5, r5
      status = HAL_ERROR;
 8009768:	f3c5 15c0 	ubfx	r5, r5, #7, #1
}
 800976c:	4628      	mov	r0, r5
 800976e:	b008      	add	sp, #32
 8009770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      i2cReg &= ~STSPIN32G4_I2C_VDS_P_FLT;
 8009774:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 8009778:	e7ad      	b.n	80096d6 <STSPIN32G4_setVDSP+0x112>
 800977a:	bf00      	nop

0800977c <STSPIN32G4_clearFaults>:

HAL_StatusTypeDef STSPIN32G4_clearFaults(STSPIN32G4_HandleTypeDef* hdl)
{
  uint8_t i2cReg = 0xff;	
  
  if(hdl == NULL)
 800977c:	b190      	cbz	r0, 80097a4 <STSPIN32G4_clearFaults+0x28>
{
 800977e:	b510      	push	{r4, lr}
 8009780:	b086      	sub	sp, #24
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009782:	2301      	movs	r3, #1
 8009784:	f10d 0217 	add.w	r2, sp, #23
 8009788:	2164      	movs	r1, #100	; 0x64
 800978a:	6800      	ldr	r0, [r0, #0]
 800978c:	9200      	str	r2, [sp, #0]
 800978e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009792:	24ff      	movs	r4, #255	; 0xff
 8009794:	2209      	movs	r2, #9
 8009796:	218e      	movs	r1, #142	; 0x8e
 8009798:	f88d 4017 	strb.w	r4, [sp, #23]
 800979c:	f7fc f804 	bl	80057a8 <HAL_I2C_Mem_Write>
    return HAL_ERROR;
  
  return STSPIN32G4_writeReg(hdl, STSPIN32G4_I2C_CLEAR, i2cReg);
}
 80097a0:	b006      	add	sp, #24
 80097a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80097a4:	2001      	movs	r0, #1
}
 80097a6:	4770      	bx	lr

080097a8 <STSPIN32G4_reset>:

HAL_StatusTypeDef STSPIN32G4_reset(STSPIN32G4_HandleTypeDef* hdl)
{
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	b086      	sub	sp, #24
  HAL_StatusTypeDef status;
  uint8_t i2cReg = 0xff;
  
  if(hdl == NULL)
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d051      	beq.n	8009856 <STSPIN32G4_reset+0xae>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 80097b2:	2701      	movs	r7, #1
 80097b4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80097b8:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80097bc:	ad05      	add	r5, sp, #20
 80097be:	9500      	str	r5, [sp, #0]
 80097c0:	242d      	movs	r4, #45	; 0x2d
 80097c2:	4606      	mov	r6, r0
 80097c4:	463b      	mov	r3, r7
 80097c6:	6800      	ldr	r0, [r0, #0]
 80097c8:	f88d 4014 	strb.w	r4, [sp, #20]
 80097cc:	220b      	movs	r2, #11
 80097ce:	218e      	movs	r1, #142	; 0x8e
 80097d0:	f7fb ffea 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 80097d4:	4604      	mov	r4, r0
 80097d6:	b118      	cbz	r0, 80097e0 <STSPIN32G4_reset+0x38>
  
  if(status == HAL_OK)
    STSPIN32G4_lockReg(hdl);
  
  return status;
}
 80097d8:	4620      	mov	r0, r4
 80097da:	b006      	add	sp, #24
 80097dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 80097e0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80097e4:	9500      	str	r5, [sp, #0]
 80097e6:	6830      	ldr	r0, [r6, #0]
 80097e8:	463b      	mov	r3, r7
 80097ea:	2280      	movs	r2, #128	; 0x80
 80097ec:	218e      	movs	r1, #142	; 0x8e
 80097ee:	f7fc f909 	bl	8005a04 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 80097f2:	4604      	mov	r4, r0
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d1ef      	bne.n	80097d8 <STSPIN32G4_reset+0x30>
    if(statusReg.lock == 1)
 80097f8:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	db2a      	blt.n	8009856 <STSPIN32G4_reset+0xae>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 8009800:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009804:	9500      	str	r5, [sp, #0]
 8009806:	24ff      	movs	r4, #255	; 0xff
 8009808:	6830      	ldr	r0, [r6, #0]
 800980a:	f88d 4014 	strb.w	r4, [sp, #20]
 800980e:	463b      	mov	r3, r7
 8009810:	220c      	movs	r2, #12
 8009812:	218e      	movs	r1, #142	; 0x8e
 8009814:	f7fb ffc8 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009818:	4604      	mov	r4, r0
 800981a:	2800      	cmp	r0, #0
 800981c:	d1dc      	bne.n	80097d8 <STSPIN32G4_reset+0x30>
  status = HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, STSPIN32G4_I2C_TIMEOUT);
 800981e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009822:	9500      	str	r5, [sp, #0]
 8009824:	f04f 0cdd 	mov.w	ip, #221	; 0xdd
 8009828:	6830      	ldr	r0, [r6, #0]
 800982a:	f88d c014 	strb.w	ip, [sp, #20]
 800982e:	463b      	mov	r3, r7
 8009830:	220b      	movs	r2, #11
 8009832:	218e      	movs	r1, #142	; 0x8e
 8009834:	f7fb ffb8 	bl	80057a8 <HAL_I2C_Mem_Write>
  if(status == HAL_OK)
 8009838:	2800      	cmp	r0, #0
 800983a:	d1cd      	bne.n	80097d8 <STSPIN32G4_reset+0x30>
  status = HAL_I2C_Mem_Read(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, value, 1, STSPIN32G4_I2C_TIMEOUT);
 800983c:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8009840:	9500      	str	r5, [sp, #0]
 8009842:	6830      	ldr	r0, [r6, #0]
 8009844:	463b      	mov	r3, r7
 8009846:	2280      	movs	r2, #128	; 0x80
 8009848:	218e      	movs	r1, #142	; 0x8e
 800984a:	f7fc f8db 	bl	8005a04 <HAL_I2C_Mem_Read>
}
 800984e:	4620      	mov	r0, r4
 8009850:	b006      	add	sp, #24
 8009852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8009856:	2401      	movs	r4, #1
}
 8009858:	4620      	mov	r0, r4
 800985a:	b006      	add	sp, #24
 800985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009860 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8009860:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8009862:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8009864:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 8009866:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800986a:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 800986c:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800986e:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8009870:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8009872:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8009874:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 8009876:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop

0800987c <VSS_Init>:
{
 800987c:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 800987e:	f7ff ffef 	bl	8009860 <VSS_Clear>
}
 8009882:	bd08      	pop	{r3, pc}

08009884 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8009884:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8009888:	b123      	cbz	r3, 8009894 <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 800988a:	f9b1 2000 	ldrsh.w	r2, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800988e:	8082      	strh	r2, [r0, #4]
  return hRetAngle;
}
 8009890:	4610      	mov	r0, r2
 8009892:	4770      	bx	lr
{
 8009894:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8009896:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8009898:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800989c:	88c7      	ldrh	r7, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 800989e:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 80098a2:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80098a4:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80098a8:	442b      	add	r3, r5
 80098aa:	b21a      	sxth	r2, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80098ac:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80098ae:	8602      	strh	r2, [r0, #48]	; 0x30
 80098b0:	b29b      	uxth	r3, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80098b2:	80c4      	strh	r4, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 80098b4:	b1de      	cbz	r6, 80098ee <VSS_CalcElAngle+0x6a>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 80098b6:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 80098ba:	b1e4      	cbz	r4, 80098f6 <VSS_CalcElAngle+0x72>
        pHandle->hTransitionRemainingSteps--;
 80098bc:	3c01      	subs	r4, #1
 80098be:	b224      	sxth	r4, r4
 80098c0:	85c4      	strh	r4, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 80098c2:	2d00      	cmp	r5, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80098c4:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 80098c6:	db27      	blt.n	8009918 <VSS_CalcElAngle+0x94>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80098c8:	1acb      	subs	r3, r1, r3
 80098ca:	b21b      	sxth	r3, r3
 80098cc:	2601      	movs	r6, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80098ce:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 80098d2:	fb03 f404 	mul.w	r4, r3, r4
        if ( hAngleDiff >= 0 )
 80098d6:	2b00      	cmp	r3, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80098d8:	fb94 f4f5 	sdiv	r4, r4, r5
        hAngleCorr *= hSignCorr;
 80098dc:	fb14 f406 	smulbb	r4, r4, r6
 80098e0:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 80098e2:	db12      	blt.n	800990a <VSS_CalcElAngle+0x86>
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80098e4:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 80098e6:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80098e8:	b222      	sxth	r2, r4
          pHandle->bTransitionLocked = true;
 80098ea:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  pHandle->_Super.hElAngle = hRetAngle;
 80098ee:	8082      	strh	r2, [r0, #4]
}
 80098f0:	bcf0      	pop	{r4, r5, r6, r7}
 80098f2:	4610      	mov	r0, r2
 80098f4:	4770      	bx	lr
        hRetAngle = *( int16_t * )pInputVars_str;
 80098f6:	f9b1 2000 	ldrsh.w	r2, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 80098fa:	7004      	strb	r4, [r0, #0]
        pHandle->bTransitionEnded = true;
 80098fc:	2301      	movs	r3, #1
 80098fe:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 8009902:	8082      	strh	r2, [r0, #4]
}
 8009904:	bcf0      	pop	{r4, r5, r6, r7}
 8009906:	4610      	mov	r0, r2
 8009908:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 800990a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0ed      	beq.n	80098ee <VSS_CalcElAngle+0x6a>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8009912:	440c      	add	r4, r1
 8009914:	b222      	sxth	r2, r4
 8009916:	e7ea      	b.n	80098ee <VSS_CalcElAngle+0x6a>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8009918:	1a5b      	subs	r3, r3, r1
 800991a:	b21b      	sxth	r3, r3
 800991c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8009920:	e7d5      	b.n	80098ce <VSS_CalcElAngle+0x4a>
 8009922:	bf00      	nop

08009924 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8009924:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8009926:	2b01      	cmp	r3, #1
{
 8009928:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 800992a:	d925      	bls.n	8009978 <VSS_CalcAvrgMecSpeedUnit+0x54>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800992c:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8009930:	4413      	add	r3, r2
 8009932:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8009934:	2b00      	cmp	r3, #0
 8009936:	bfb8      	it	lt
 8009938:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800993c:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800993e:	7846      	ldrb	r6, [r0, #1]
 8009940:	69c5      	ldr	r5, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8009942:	bfb8      	it	lt
 8009944:	33ff      	addlt	r3, #255	; 0xff
 8009946:	141c      	asrs	r4, r3, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8009948:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800994c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009950:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8009952:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8009956:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800995a:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800995c:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800995e:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8009960:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8009962:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8009964:	1e53      	subs	r3, r2, #1
 8009966:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8009968:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800996c:	b963      	cbnz	r3, 8009988 <VSS_CalcAvrgMecSpeedUnit+0x64>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800996e:	78c2      	ldrb	r2, [r0, #3]
 8009970:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8009972:	bc70      	pop	{r4, r5, r6}
 8009974:	4618      	mov	r0, r3
 8009976:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8009978:	d009      	beq.n	800998e <VSS_CalcAvrgMecSpeedUnit+0x6a>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800997a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800997e:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8009980:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0f2      	beq.n	800996e <VSS_CalcAvrgMecSpeedUnit+0x4a>
}
 8009988:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800998a:	f7ff bb09 	b.w	8008fa0 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800998e:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
 8009992:	800d      	strh	r5, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009994:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8009996:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8009998:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800999a:	8185      	strh	r5, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800999c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 80099a0:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80099a4:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 80099a6:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->hRemainingStep = 0u;
 80099aa:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80099ac:	fb14 f303 	smulbb	r3, r4, r3
 80099b0:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 80099b2:	8502      	strh	r2, [r0, #40]	; 0x28
 80099b4:	e7d8      	b.n	8009968 <VSS_CalcAvrgMecSpeedUnit+0x44>
 80099b6:	bf00      	nop

080099b8 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 80099b8:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 80099ba:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 80099bc:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 80099be:	fb91 f1f3 	sdiv	r1, r1, r3
 80099c2:	80c1      	strh	r1, [r0, #6]
}
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop

080099c8 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 80099c8:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 80099ca:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80099ce:	b984      	cbnz	r4, 80099f2 <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 80099d0:	b98a      	cbnz	r2, 80099f6 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80099d2:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 80099d4:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80099d6:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80099d8:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80099da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80099de:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 80099e0:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80099e4:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80099e8:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 80099ec:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80099ee:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80099f0:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 80099f2:	bc70      	pop	{r4, r5, r6}
 80099f4:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80099f6:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80099f8:	4d11      	ldr	r5, [pc, #68]	; (8009a40 <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80099fa:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80099fc:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009a00:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8009a02:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8009a06:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009a0a:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8009a0c:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8009a0e:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8009a12:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009a16:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009a18:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 8009a1c:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8009a1e:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8009a22:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8009a26:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 8009a28:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8009a2a:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8009a2c:	0412      	lsls	r2, r2, #16
 8009a2e:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8009a32:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8009a36:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8009a3a:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8009a3c:	bc70      	pop	{r4, r5, r6}
 8009a3e:	4770      	bx	lr
 8009a40:	10624dd3 	.word	0x10624dd3

08009a44 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8009a44:	b151      	cbz	r1, 8009a5c <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8009a46:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8009a50:	b923      	cbnz	r3, 8009a5c <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8009a52:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8009a56:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8009a58:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8009a5a:	4770      	bx	lr
  bool bAux = true;
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	4770      	bx	lr

08009a60 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8009a60:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop

08009a68 <RUC_Init>:
 8009a68:	b430      	push	{r4, r5}
 8009a6a:	6681      	str	r1, [r0, #104]	; 0x68
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	9c02      	ldr	r4, [sp, #8]
 8009a70:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8009a74:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 8009a78:	f110 010c 	adds.w	r1, r0, #12
 8009a7c:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 8009a80:	6744      	str	r4, [r0, #116]	; 0x74
 8009a82:	d023      	beq.n	8009acc <RUC_Init+0x64>
 8009a84:	6943      	ldr	r3, [r0, #20]
 8009a86:	b323      	cbz	r3, 8009ad2 <RUC_Init+0x6a>
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	b323      	cbz	r3, 8009ad6 <RUC_Init+0x6e>
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	b323      	cbz	r3, 8009ada <RUC_Init+0x72>
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	b1c3      	cbz	r3, 8009ac6 <RUC_Init+0x5e>
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	2105      	movs	r1, #5
 8009a98:	b1b3      	cbz	r3, 8009ac8 <RUC_Init+0x60>
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	2105      	movs	r1, #5
 8009a9e:	8805      	ldrh	r5, [r0, #0]
 8009aa0:	4c0f      	ldr	r4, [pc, #60]	; (8009ae0 <RUC_Init+0x78>)
 8009aa2:	2364      	movs	r3, #100	; 0x64
 8009aa4:	fb03 f305 	mul.w	r3, r3, r5
 8009aa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009aac:	fba4 4303 	umull	r4, r3, r4, r3
 8009ab0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009ab4:	2400      	movs	r4, #0
 8009ab6:	099b      	lsrs	r3, r3, #6
 8009ab8:	6154      	str	r4, [r2, #20]
 8009aba:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 8009abe:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8009ac2:	bc30      	pop	{r4, r5}
 8009ac4:	4770      	bx	lr
 8009ac6:	2104      	movs	r1, #4
 8009ac8:	1e4a      	subs	r2, r1, #1
 8009aca:	e7e8      	b.n	8009a9e <RUC_Init+0x36>
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad0:	e7e5      	b.n	8009a9e <RUC_Init+0x36>
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	e7f8      	b.n	8009ac8 <RUC_Init+0x60>
 8009ad6:	2102      	movs	r1, #2
 8009ad8:	e7f6      	b.n	8009ac8 <RUC_Init+0x60>
 8009ada:	2103      	movs	r1, #3
 8009adc:	e7f4      	b.n	8009ac8 <RUC_Init+0x60>
 8009ade:	bf00      	nop
 8009ae0:	10624dd3 	.word	0x10624dd3

08009ae4 <RUC_Clear>:
 8009ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae8:	4604      	mov	r4, r0
 8009aea:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 8009aec:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 8009af0:	80e1      	strh	r1, [r4, #6]
 8009af2:	2500      	movs	r5, #0
 8009af4:	4638      	mov	r0, r7
 8009af6:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 8009afa:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8009afe:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8009b02:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8009b06:	460e      	mov	r6, r1
 8009b08:	f7ff feaa 	bl	8009860 <VSS_Clear>
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4640      	mov	r0, r8
 8009b10:	f7ff faac 	bl	800906c <STC_SetControlMode>
 8009b14:	8861      	ldrh	r1, [r4, #2]
 8009b16:	b2b6      	uxth	r6, r6
 8009b18:	fb11 f106 	smulbb	r1, r1, r6
 8009b1c:	b209      	sxth	r1, r1
 8009b1e:	4638      	mov	r0, r7
 8009b20:	f7ff ff4a 	bl	80099b8 <VSS_SetMecAngle>
 8009b24:	462a      	mov	r2, r5
 8009b26:	4629      	mov	r1, r5
 8009b28:	4640      	mov	r0, r8
 8009b2a:	f7ff faa3 	bl	8009074 <STC_ExecRamp>
 8009b2e:	8a21      	ldrh	r1, [r4, #16]
 8009b30:	89a2      	ldrh	r2, [r4, #12]
 8009b32:	fb11 f106 	smulbb	r1, r1, r6
 8009b36:	b209      	sxth	r1, r1
 8009b38:	4640      	mov	r0, r8
 8009b3a:	f7ff fa9b 	bl	8009074 <STC_ExecRamp>
 8009b3e:	89e1      	ldrh	r1, [r4, #14]
 8009b40:	89a2      	ldrh	r2, [r4, #12]
 8009b42:	fb11 f106 	smulbb	r1, r1, r6
 8009b46:	4638      	mov	r0, r7
 8009b48:	b209      	sxth	r1, r1
 8009b4a:	f7ff ff3d 	bl	80099c8 <VSS_SetMecAcceleration>
 8009b4e:	89a0      	ldrh	r0, [r4, #12]
 8009b50:	8823      	ldrh	r3, [r4, #0]
 8009b52:	4907      	ldr	r1, [pc, #28]	; (8009b70 <RUC_Clear+0x8c>)
 8009b54:	6962      	ldr	r2, [r4, #20]
 8009b56:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8009b5a:	fb03 f300 	mul.w	r3, r3, r0
 8009b5e:	fba1 1303 	umull	r1, r3, r1, r3
 8009b62:	099b      	lsrs	r3, r3, #6
 8009b64:	3301      	adds	r3, #1
 8009b66:	80a3      	strh	r3, [r4, #4]
 8009b68:	60a2      	str	r2, [r4, #8]
 8009b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b6e:	bf00      	nop
 8009b70:	10624dd3 	.word	0x10624dd3

08009b74 <RUC_Exec>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	8883      	ldrh	r3, [r0, #4]
 8009b78:	bb53      	cbnz	r3, 8009bd0 <RUC_Exec+0x5c>
 8009b7a:	6883      	ldr	r3, [r0, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d02e      	beq.n	8009bde <RUC_Exec+0x6a>
 8009b80:	88c5      	ldrh	r5, [r0, #6]
 8009b82:	8899      	ldrh	r1, [r3, #4]
 8009b84:	881a      	ldrh	r2, [r3, #0]
 8009b86:	4604      	mov	r4, r0
 8009b88:	fb11 f105 	smulbb	r1, r1, r5
 8009b8c:	b209      	sxth	r1, r1
 8009b8e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8009b90:	f7ff fa70 	bl	8009074 <STC_ExecRamp>
 8009b94:	68a3      	ldr	r3, [r4, #8]
 8009b96:	88e5      	ldrh	r5, [r4, #6]
 8009b98:	8859      	ldrh	r1, [r3, #2]
 8009b9a:	881a      	ldrh	r2, [r3, #0]
 8009b9c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009b9e:	fb11 f105 	smulbb	r1, r1, r5
 8009ba2:	b209      	sxth	r1, r1
 8009ba4:	f7ff ff10 	bl	80099c8 <VSS_SetMecAcceleration>
 8009ba8:	68a2      	ldr	r2, [r4, #8]
 8009baa:	8823      	ldrh	r3, [r4, #0]
 8009bac:	8810      	ldrh	r0, [r2, #0]
 8009bae:	490d      	ldr	r1, [pc, #52]	; (8009be4 <RUC_Exec+0x70>)
 8009bb0:	6892      	ldr	r2, [r2, #8]
 8009bb2:	60a2      	str	r2, [r4, #8]
 8009bb4:	fb03 f300 	mul.w	r3, r3, r0
 8009bb8:	fba1 2303 	umull	r2, r3, r1, r3
 8009bbc:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8009bc0:	099b      	lsrs	r3, r3, #6
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	3201      	adds	r2, #1
 8009bc6:	80a3      	strh	r3, [r4, #4]
 8009bc8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8009bcc:	2001      	movs	r0, #1
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	8083      	strh	r3, [r0, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0cf      	beq.n	8009b7a <RUC_Exec+0x6>
 8009bda:	2001      	movs	r0, #1
 8009bdc:	e7f7      	b.n	8009bce <RUC_Exec+0x5a>
 8009bde:	4618      	mov	r0, r3
 8009be0:	bd38      	pop	{r3, r4, r5, pc}
 8009be2:	bf00      	nop
 8009be4:	10624dd3 	.word	0x10624dd3

08009be8 <RUC_FirstAccelerationStageReached>:
 8009be8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8009bec:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8009bf0:	4282      	cmp	r2, r0
 8009bf2:	bf34      	ite	cc
 8009bf4:	2000      	movcc	r0, #0
 8009bf6:	2001      	movcs	r0, #1
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop

08009bfc <RUC_SetPhase>:
 8009bfc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009c00:	0089      	lsls	r1, r1, #2
 8009c02:	1843      	adds	r3, r0, r1
 8009c04:	b410      	push	{r4}
 8009c06:	f8d2 4002 	ldr.w	r4, [r2, #2]
 8009c0a:	f8c3 400e 	str.w	r4, [r3, #14]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	8813      	ldrh	r3, [r2, #0]
 8009c12:	8183      	strh	r3, [r0, #12]
 8009c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c18:	2001      	movs	r0, #1
 8009c1a:	4770      	bx	lr

08009c1c <RUC_GetNumberOfPhases>:
 8009c1c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop

08009c24 <RUC_GetPhase>:
 8009c24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8009c28:	0089      	lsls	r1, r1, #2
 8009c2a:	f101 0308 	add.w	r3, r1, #8
 8009c2e:	4403      	add	r3, r0
 8009c30:	4401      	add	r1, r0
 8009c32:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8009c36:	f8c2 3002 	str.w	r3, [r2, #2]
 8009c3a:	898b      	ldrh	r3, [r1, #12]
 8009c3c:	8013      	strh	r3, [r2, #0]
 8009c3e:	2001      	movs	r0, #1
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop

08009c44 <STO_PLL_CalcElAngle>:
 8009c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c48:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8009c4c:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8009c50:	4604      	mov	r4, r0
 8009c52:	03d8      	lsls	r0, r3, #15
 8009c54:	1ac2      	subs	r2, r0, r3
 8009c56:	4596      	cmp	lr, r2
 8009c58:	b089      	sub	sp, #36	; 0x24
 8009c5a:	f340 80c1 	ble.w	8009de0 <STO_PLL_CalcElAngle+0x19c>
 8009c5e:	66a2      	str	r2, [r4, #104]	; 0x68
 8009c60:	4696      	mov	lr, r2
 8009c62:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 8009c66:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 8009c6a:	fa4e f605 	asr.w	r6, lr, r5
 8009c6e:	9603      	str	r6, [sp, #12]
 8009c70:	4562      	cmp	r2, ip
 8009c72:	b236      	sxth	r6, r6
 8009c74:	9601      	str	r6, [sp, #4]
 8009c76:	f280 80c8 	bge.w	8009e0a <STO_PLL_CalcElAngle+0x1c6>
 8009c7a:	66e2      	str	r2, [r4, #108]	; 0x6c
 8009c7c:	4694      	mov	ip, r2
 8009c7e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8009c82:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8009c84:	03de      	lsls	r6, r3, #15
 8009c86:	fa4c f205 	asr.w	r2, ip, r5
 8009c8a:	1af5      	subs	r5, r6, r3
 8009c8c:	9204      	str	r2, [sp, #16]
 8009c8e:	42a8      	cmp	r0, r5
 8009c90:	b212      	sxth	r2, r2
 8009c92:	9202      	str	r2, [sp, #8]
 8009c94:	f340 80b3 	ble.w	8009dfe <STO_PLL_CalcElAngle+0x1ba>
 8009c98:	6625      	str	r5, [r4, #96]	; 0x60
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c9e:	4295      	cmp	r5, r2
 8009ca0:	f280 80a7 	bge.w	8009df2 <STO_PLL_CalcElAngle+0x1ae>
 8009ca4:	6665      	str	r5, [r4, #100]	; 0x64
 8009ca6:	462a      	mov	r2, r5
 8009ca8:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8009cac:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8009cb0:	890d      	ldrh	r5, [r1, #8]
 8009cb2:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8009cb6:	888e      	ldrh	r6, [r1, #4]
 8009cb8:	f9b1 7000 	ldrsh.w	r7, [r1]
 8009cbc:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 8009cc0:	9901      	ldr	r1, [sp, #4]
 8009cc2:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 8009cc6:	fa40 f103 	asr.w	r1, r0, r3
 8009cca:	fa42 f303 	asr.w	r3, r2, r3
 8009cce:	1b8e      	subs	r6, r1, r6
 8009cd0:	fb11 f109 	smulbb	r1, r1, r9
 8009cd4:	fb13 f909 	smulbb	r9, r3, r9
 8009cd8:	eba3 030a 	sub.w	r3, r3, sl
 8009cdc:	9305      	str	r3, [sp, #20]
 8009cde:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 8009ce2:	9b02      	ldr	r3, [sp, #8]
 8009ce4:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 8009ce8:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8009cec:	b236      	sxth	r6, r6
 8009cee:	1a41      	subs	r1, r0, r1
 8009cf0:	fb05 f707 	mul.w	r7, r5, r7
 8009cf4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8009cf8:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009cfa:	eba2 0209 	sub.w	r2, r2, r9
 8009cfe:	fb0b 1106 	mla	r1, fp, r6, r1
 8009d02:	143f      	asrs	r7, r7, #16
 8009d04:	fb0b 2b03 	mla	fp, fp, r3, r2
 8009d08:	fb0a 1107 	mla	r1, sl, r7, r1
 8009d0c:	fb05 f508 	mul.w	r5, r5, r8
 8009d10:	9a01      	ldr	r2, [sp, #4]
 8009d12:	9f02      	ldr	r7, [sp, #8]
 8009d14:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8009d18:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 8009d1c:	142d      	asrs	r5, r5, #16
 8009d1e:	fb0a b505 	mla	r5, sl, r5, fp
 8009d22:	4107      	asrs	r7, r0
 8009d24:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8009d28:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 8009d2c:	fa42 f000 	asr.w	r0, r2, r0
 8009d30:	fb06 e609 	mla	r6, r6, r9, lr
 8009d34:	fb09 c303 	mla	r3, r9, r3, ip
 8009d38:	fb07 f708 	mul.w	r7, r7, r8
 8009d3c:	fb00 f008 	mul.w	r0, r0, r8
 8009d40:	fb07 670a 	mla	r7, r7, sl, r6
 8009d44:	fb00 361a 	mls	r6, r0, sl, r3
 8009d48:	9b01      	ldr	r3, [sp, #4]
 8009d4a:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 8009d4e:	fb0b 1813 	mls	r8, fp, r3, r1
 8009d52:	9b02      	ldr	r3, [sp, #8]
 8009d54:	fb0b 5513 	mls	r5, fp, r3, r5
 8009d58:	2a00      	cmp	r2, #0
 8009d5a:	d147      	bne.n	8009dec <STO_PLL_CalcElAngle+0x1a8>
 8009d5c:	f1ba 0f00 	cmp.w	sl, #0
 8009d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d64:	bfb4      	ite	lt
 8009d66:	4691      	movlt	r9, r2
 8009d68:	f04f 0901 	movge.w	r9, #1
 8009d6c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8009d70:	f7f7 fc36 	bl	80015e0 <MCM_Trig_Functions>
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	9a03      	ldr	r2, [sp, #12]
 8009d78:	fb13 f309 	smulbb	r3, r3, r9
 8009d7c:	fb12 f109 	smulbb	r1, r2, r9
 8009d80:	425b      	negs	r3, r3
 8009d82:	fb10 f303 	smulbb	r3, r0, r3
 8009d86:	fb10 f021 	smultb	r0, r0, r1
 8009d8a:	f343 33cf 	sbfx	r3, r3, #15, #16
 8009d8e:	f340 31cf 	sbfx	r1, r0, #15, #16
 8009d92:	1a59      	subs	r1, r3, r1
 8009d94:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009d98:	f7fe f84e 	bl	8007e38 <PI_Controller>
 8009d9c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 8009da0:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 8009da4:	8220      	strh	r0, [r4, #16]
 8009da6:	3301      	adds	r3, #1
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	429a      	cmp	r2, r3
 8009dac:	bf0a      	itet	eq
 8009dae:	2200      	moveq	r2, #0
 8009db0:	461a      	movne	r2, r3
 8009db2:	4613      	moveq	r3, r2
 8009db4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8009db8:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8009dbc:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8009dc0:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 8009dc4:	88a2      	ldrh	r2, [r4, #4]
 8009dc6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 8009dca:	4410      	add	r0, r2
 8009dcc:	b200      	sxth	r0, r0
 8009dce:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 8009dd2:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 8009dd6:	66e6      	str	r6, [r4, #108]	; 0x6c
 8009dd8:	80a0      	strh	r0, [r4, #4]
 8009dda:	b009      	add	sp, #36	; 0x24
 8009ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de0:	1a1d      	subs	r5, r3, r0
 8009de2:	45ae      	cmp	lr, r5
 8009de4:	bfdc      	itt	le
 8009de6:	66a5      	strle	r5, [r4, #104]	; 0x68
 8009de8:	46ae      	movle	lr, r5
 8009dea:	e73a      	b.n	8009c62 <STO_PLL_CalcElAngle+0x1e>
 8009dec:	fa1f f982 	uxth.w	r9, r2
 8009df0:	e7bc      	b.n	8009d6c <STO_PLL_CalcElAngle+0x128>
 8009df2:	1b9b      	subs	r3, r3, r6
 8009df4:	429a      	cmp	r2, r3
 8009df6:	bfdc      	itt	le
 8009df8:	6663      	strle	r3, [r4, #100]	; 0x64
 8009dfa:	461a      	movle	r2, r3
 8009dfc:	e754      	b.n	8009ca8 <STO_PLL_CalcElAngle+0x64>
 8009dfe:	1b9a      	subs	r2, r3, r6
 8009e00:	4290      	cmp	r0, r2
 8009e02:	bfdc      	itt	le
 8009e04:	6622      	strle	r2, [r4, #96]	; 0x60
 8009e06:	4610      	movle	r0, r2
 8009e08:	e748      	b.n	8009c9c <STO_PLL_CalcElAngle+0x58>
 8009e0a:	1a1b      	subs	r3, r3, r0
 8009e0c:	459c      	cmp	ip, r3
 8009e0e:	bfdc      	itt	le
 8009e10:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8009e12:	469c      	movle	ip, r3
 8009e14:	e733      	b.n	8009c7e <STO_PLL_CalcElAngle+0x3a>
 8009e16:	bf00      	nop

08009e18 <STO_PLL_CalcAvrgMecSpeedUnit>:
 8009e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e1a:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 8009e1e:	f1bc 0f00 	cmp.w	ip, #0
 8009e22:	f000 8095 	beq.w	8009f50 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8009e26:	f10c 37ff 	add.w	r7, ip, #4294967295
 8009e2a:	b2fb      	uxtb	r3, r7
 8009e2c:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8009e30:	f100 0774 	add.w	r7, r0, #116	; 0x74
 8009e34:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8009e38:	4632      	mov	r2, r6
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8009e40:	4297      	cmp	r7, r2
 8009e42:	442b      	add	r3, r5
 8009e44:	d1fa      	bne.n	8009e3c <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 8009e46:	fb93 f5fc 	sdiv	r5, r3, ip
 8009e4a:	2400      	movs	r4, #0
 8009e4c:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 8009e50:	1b5b      	subs	r3, r3, r5
 8009e52:	42b2      	cmp	r2, r6
 8009e54:	fb03 4403 	mla	r4, r3, r3, r4
 8009e58:	d1f8      	bne.n	8009e4c <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 8009e5a:	fb94 f4fc 	sdiv	r4, r4, ip
 8009e5e:	fb05 fc05 	mul.w	ip, r5, r5
 8009e62:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 8009e66:	8b43      	ldrh	r3, [r0, #26]
 8009e68:	7887      	ldrb	r7, [r0, #2]
 8009e6a:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 8009e6e:	fb0c fc02 	mul.w	ip, ip, r2
 8009e72:	ea4f 1cec 	mov.w	ip, ip, asr #7
 8009e76:	fb05 f303 	mul.w	r3, r5, r3
 8009e7a:	45a4      	cmp	ip, r4
 8009e7c:	69c2      	ldr	r2, [r0, #28]
 8009e7e:	bfd4      	ite	le
 8009e80:	2500      	movle	r5, #0
 8009e82:	2501      	movgt	r5, #1
 8009e84:	fb03 f307 	mul.w	r3, r3, r7
 8009e88:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e8c:	7842      	ldrb	r2, [r0, #1]
 8009e8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e92:	b21a      	sxth	r2, r3
 8009e94:	800a      	strh	r2, [r1, #0]
 8009e96:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 8009e9a:	8182      	strh	r2, [r0, #12]
 8009e9c:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 8009ea0:	b99e      	cbnz	r6, 8009eca <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 8009ea2:	b355      	cbz	r5, 8009efa <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8009ea4:	45a4      	cmp	ip, r4
 8009ea6:	dc25      	bgt.n	8009ef4 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 8009ea8:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8009eac:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8009eba:	d81e      	bhi.n	8009efa <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	78c2      	ldrb	r2, [r0, #3]
 8009ec0:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8009ec4:	7002      	strb	r2, [r0, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 8009ed0:	bfb8      	it	lt
 8009ed2:	425b      	neglt	r3, r3
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	dc14      	bgt.n	8009f02 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 8009ed8:	2200      	movs	r2, #0
 8009eda:	4613      	mov	r3, r2
 8009edc:	4616      	mov	r6, r2
 8009ede:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 8009ee2:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 8009ee6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8009eea:	b135      	cbz	r5, 8009efa <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8009eec:	45a4      	cmp	ip, r4
 8009eee:	dddb      	ble.n	8009ea8 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8009ef0:	2a00      	cmp	r2, #0
 8009ef2:	d0d9      	beq.n	8009ea8 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8009efa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009efe:	f7ff b84f 	b.w	8008fa0 <SPD_IsMecSpeedReliable>
 8009f02:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 8009f06:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 8009f0a:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 8009f0e:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 8009f12:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8009f16:	fb93 f3fe 	sdiv	r3, r3, lr
 8009f1a:	fb03 f202 	mul.w	r2, r3, r2
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	bfb8      	it	lt
 8009f22:	323f      	addlt	r2, #63	; 0x3f
 8009f24:	1192      	asrs	r2, r2, #6
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
 8009f2a:	fb07 f707 	mul.w	r7, r7, r7
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	fb06 7606 	mla	r6, r6, r6, r7
 8009f34:	461a      	mov	r2, r3
 8009f36:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 8009f3a:	bfb8      	it	lt
 8009f3c:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8009f40:	1192      	asrs	r2, r2, #6
 8009f42:	fb07 3212 	mls	r2, r7, r2, r3
 8009f46:	4296      	cmp	r6, r2
 8009f48:	bfd4      	ite	le
 8009f4a:	2200      	movle	r2, #0
 8009f4c:	2201      	movgt	r2, #1
 8009f4e:	e7c6      	b.n	8009ede <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8009f50:	4664      	mov	r4, ip
 8009f52:	4665      	mov	r5, ip
 8009f54:	e785      	b.n	8009e62 <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 8009f56:	bf00      	nop

08009f58 <STO_PLL_CalcAvrgElSpeedDpp>:
 8009f58:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 8009f5c:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8009f60:	b470      	push	{r4, r5, r6}
 8009f62:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 8009f66:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8009f6a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8009f6e:	b2a6      	uxth	r6, r4
 8009f70:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8009f74:	1af3      	subs	r3, r6, r3
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	442a      	add	r2, r5
 8009f7a:	b19b      	cbz	r3, 8009fa4 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8009f7c:	440b      	add	r3, r1
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	b219      	sxth	r1, r3
 8009f82:	428c      	cmp	r4, r1
 8009f84:	bfdc      	itt	le
 8009f86:	1b9b      	suble	r3, r3, r6
 8009f88:	b219      	sxthle	r1, r3
 8009f8a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8009f8e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 8009f98:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8009f9c:	4113      	asrs	r3, r2
 8009f9e:	81c3      	strh	r3, [r0, #14]
 8009fa0:	bc70      	pop	{r4, r5, r6}
 8009fa2:	4770      	bx	lr
 8009fa4:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	e7f3      	b.n	8009f94 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

08009fac <STO_PLL_Clear>:
 8009fac:	b510      	push	{r4, lr}
 8009fae:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 8009fba:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 8009fbe:	8081      	strh	r1, [r0, #4]
 8009fc0:	81c1      	strh	r1, [r0, #14]
 8009fc2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 8009fc6:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 8009fca:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 8009fce:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 8009fd2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8009fd6:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 8009fda:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 8009fde:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 8009fe2:	b132      	cbz	r2, 8009ff2 <STO_PLL_Clear+0x46>
 8009fe4:	3a01      	subs	r2, #1
 8009fe6:	b2d2      	uxtb	r2, r2
 8009fe8:	3201      	adds	r2, #1
 8009fea:	0052      	lsls	r2, r2, #1
 8009fec:	3074      	adds	r0, #116	; 0x74
 8009fee:	f000 f91d 	bl	800a22c <memset>
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 8009ff8:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8009ffc:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800a000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a004:	f7fd bede 	b.w	8007dc4 <PID_SetIntegralTerm>

0800a008 <STO_PLL_Init>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4604      	mov	r4, r0
 800a00c:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 800a010:	4b18      	ldr	r3, [pc, #96]	; (800a074 <STO_PLL_Init+0x6c>)
 800a012:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 800a016:	fb93 f3f5 	sdiv	r3, r3, r5
 800a01a:	2200      	movs	r2, #0
 800a01c:	2101      	movs	r1, #1
 800a01e:	b21b      	sxth	r3, r3
 800a020:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 800a024:	8662      	strh	r2, [r4, #50]	; 0x32
 800a026:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800a02a:	b303      	cbz	r3, 800a06e <STO_PLL_Init+0x66>
 800a02c:	4608      	mov	r0, r1
 800a02e:	e000      	b.n	800a032 <STO_PLL_Init+0x2a>
 800a030:	4611      	mov	r1, r2
 800a032:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a036:	1c4a      	adds	r2, r1, #1
 800a038:	105b      	asrs	r3, r3, #1
 800a03a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800a03e:	b292      	uxth	r2, r2
 800a040:	d1f6      	bne.n	800a030 <STO_PLL_Init+0x28>
 800a042:	b200      	sxth	r0, r0
 800a044:	fb05 f200 	mul.w	r2, r5, r0
 800a048:	8661      	strh	r1, [r4, #50]	; 0x32
 800a04a:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <STO_PLL_Init+0x70>)
 800a04c:	8620      	strh	r0, [r4, #48]	; 0x30
 800a04e:	fb83 1302 	smull	r1, r3, r3, r2
 800a052:	17d2      	asrs	r2, r2, #31
 800a054:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 800a058:	8562      	strh	r2, [r4, #42]	; 0x2a
 800a05a:	4620      	mov	r0, r4
 800a05c:	f7ff ffa6 	bl	8009fac <STO_PLL_Clear>
 800a060:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800a064:	f7fd fe9a 	bl	8007d9c <PID_HandleInit>
 800a068:	2300      	movs	r3, #0
 800a06a:	8263      	strh	r3, [r4, #18]
 800a06c:	bd38      	pop	{r3, r4, r5, pc}
 800a06e:	462a      	mov	r2, r5
 800a070:	4608      	mov	r0, r1
 800a072:	e7ea      	b.n	800a04a <STO_PLL_Init+0x42>
 800a074:	000fea5e 	.word	0x000fea5e
 800a078:	06488dc5 	.word	0x06488dc5

0800a07c <STO_PLL_IsObserverConverged>:
 800a07c:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 800a080:	4603      	mov	r3, r0
 800a082:	b10a      	cbz	r2, 800a088 <STO_PLL_IsObserverConverged+0xc>
 800a084:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800a088:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d143      	bne.n	800a118 <STO_PLL_IsObserverConverged+0x9c>
 800a090:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800a094:	b430      	push	{r4, r5}
 800a096:	fb02 f501 	mul.w	r5, r2, r1
 800a09a:	2d00      	cmp	r5, #0
 800a09c:	460c      	mov	r4, r1
 800a09e:	dd34      	ble.n	800a10a <STO_PLL_IsObserverConverged+0x8e>
 800a0a0:	2a00      	cmp	r2, #0
 800a0a2:	bfbc      	itt	lt
 800a0a4:	4252      	neglt	r2, r2
 800a0a6:	b212      	sxthlt	r2, r2
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	bfbc      	itt	lt
 800a0ac:	4249      	neglt	r1, r1
 800a0ae:	b20c      	sxthlt	r4, r1
 800a0b0:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 800a0b4:	b359      	cbz	r1, 800a10e <STO_PLL_IsObserverConverged+0x92>
 800a0b6:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800a0ba:	b291      	uxth	r1, r2
 800a0bc:	428d      	cmp	r5, r1
 800a0be:	d226      	bcs.n	800a10e <STO_PLL_IsObserverConverged+0x92>
 800a0c0:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 800a0c4:	fb04 f101 	mul.w	r1, r4, r1
 800a0c8:	2900      	cmp	r1, #0
 800a0ca:	bfb8      	it	lt
 800a0cc:	310f      	addlt	r1, #15
 800a0ce:	f341 110f 	sbfx	r1, r1, #4, #16
 800a0d2:	428a      	cmp	r2, r1
 800a0d4:	db1b      	blt.n	800a10e <STO_PLL_IsObserverConverged+0x92>
 800a0d6:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 800a0da:	fb04 f101 	mul.w	r1, r4, r1
 800a0de:	2900      	cmp	r1, #0
 800a0e0:	bfb8      	it	lt
 800a0e2:	310f      	addlt	r1, #15
 800a0e4:	f341 110f 	sbfx	r1, r1, #4, #16
 800a0e8:	428a      	cmp	r2, r1
 800a0ea:	dc10      	bgt.n	800a10e <STO_PLL_IsObserverConverged+0x92>
 800a0ec:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800a0f0:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 800a0f4:	3201      	adds	r2, #1
 800a0f6:	b2d2      	uxtb	r2, r2
 800a0f8:	4291      	cmp	r1, r2
 800a0fa:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800a0fe:	d804      	bhi.n	800a10a <STO_PLL_IsObserverConverged+0x8e>
 800a100:	2001      	movs	r0, #1
 800a102:	2200      	movs	r2, #0
 800a104:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	bc30      	pop	{r4, r5}
 800a10c:	4770      	bx	lr
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800a114:	bc30      	pop	{r4, r5}
 800a116:	4770      	bx	lr
 800a118:	2001      	movs	r0, #1
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800a120:	701a      	strb	r2, [r3, #0]
 800a122:	4770      	bx	lr

0800a124 <STO_PLL_GetEstimatedBemf>:
 800a124:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800a126:	2000      	movs	r0, #0
 800a128:	b29a      	uxth	r2, r3
 800a12a:	f362 000f 	bfi	r0, r2, #0, #16
 800a12e:	0c1b      	lsrs	r3, r3, #16
 800a130:	b082      	sub	sp, #8
 800a132:	f363 401f 	bfi	r0, r3, #16, #16
 800a136:	b002      	add	sp, #8
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop

0800a13c <STO_PLL_GetEstimatedCurrent>:
 800a13c:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 800a140:	b410      	push	{r4}
 800a142:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800a146:	4122      	asrs	r2, r4
 800a148:	b292      	uxth	r2, r2
 800a14a:	4123      	asrs	r3, r4
 800a14c:	2100      	movs	r1, #0
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f362 010f 	bfi	r1, r2, #0, #16
 800a154:	f363 411f 	bfi	r1, r3, #16, #16
 800a158:	b083      	sub	sp, #12
 800a15a:	4608      	mov	r0, r1
 800a15c:	b003      	add	sp, #12
 800a15e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <STO_PLL_GetObserverGains>:
 800a164:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800a168:	800b      	strh	r3, [r1, #0]
 800a16a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800a16e:	8013      	strh	r3, [r2, #0]
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop

0800a174 <STO_PLL_SetObserverGains>:
 800a174:	8441      	strh	r1, [r0, #34]	; 0x22
 800a176:	84c2      	strh	r2, [r0, #38]	; 0x26
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop

0800a17c <STO_OTF_ResetPLL>:
 800a17c:	6800      	ldr	r0, [r0, #0]
 800a17e:	2100      	movs	r1, #0
 800a180:	3034      	adds	r0, #52	; 0x34
 800a182:	f7fd be1f 	b.w	8007dc4 <PID_SetIntegralTerm>
 800a186:	bf00      	nop

0800a188 <STO_ResetPLL>:
 800a188:	3034      	adds	r0, #52	; 0x34
 800a18a:	2100      	movs	r1, #0
 800a18c:	f7fd be1a 	b.w	8007dc4 <PID_SetIntegralTerm>

0800a190 <STO_PLL_GetEstimatedBemfLevel>:
 800a190:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop

0800a198 <STO_PLL_GetObservedBemfLevel>:
 800a198:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop

0800a1a0 <STO_PLL_IsVarianceTight>:
 800a1a0:	6803      	ldr	r3, [r0, #0]
 800a1a2:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800a1a6:	4770      	bx	lr

0800a1a8 <STO_PLL_ForceConvergency1>:
 800a1a8:	6803      	ldr	r3, [r0, #0]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop

0800a1b4 <STO_PLL_ForceConvergency2>:
 800a1b4:	6803      	ldr	r3, [r0, #0]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop

0800a1c0 <STO_SetDirection>:
 800a1c0:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop

0800a1c8 <__libc_init_array>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	4d0d      	ldr	r5, [pc, #52]	; (800a200 <__libc_init_array+0x38>)
 800a1cc:	4c0d      	ldr	r4, [pc, #52]	; (800a204 <__libc_init_array+0x3c>)
 800a1ce:	1b64      	subs	r4, r4, r5
 800a1d0:	10a4      	asrs	r4, r4, #2
 800a1d2:	2600      	movs	r6, #0
 800a1d4:	42a6      	cmp	r6, r4
 800a1d6:	d109      	bne.n	800a1ec <__libc_init_array+0x24>
 800a1d8:	4d0b      	ldr	r5, [pc, #44]	; (800a208 <__libc_init_array+0x40>)
 800a1da:	4c0c      	ldr	r4, [pc, #48]	; (800a20c <__libc_init_array+0x44>)
 800a1dc:	f000 f82e 	bl	800a23c <_init>
 800a1e0:	1b64      	subs	r4, r4, r5
 800a1e2:	10a4      	asrs	r4, r4, #2
 800a1e4:	2600      	movs	r6, #0
 800a1e6:	42a6      	cmp	r6, r4
 800a1e8:	d105      	bne.n	800a1f6 <__libc_init_array+0x2e>
 800a1ea:	bd70      	pop	{r4, r5, r6, pc}
 800a1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1f0:	4798      	blx	r3
 800a1f2:	3601      	adds	r6, #1
 800a1f4:	e7ee      	b.n	800a1d4 <__libc_init_array+0xc>
 800a1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1fa:	4798      	blx	r3
 800a1fc:	3601      	adds	r6, #1
 800a1fe:	e7f2      	b.n	800a1e6 <__libc_init_array+0x1e>
 800a200:	0800a5b4 	.word	0x0800a5b4
 800a204:	0800a5b4 	.word	0x0800a5b4
 800a208:	0800a5b4 	.word	0x0800a5b4
 800a20c:	0800a5b8 	.word	0x0800a5b8

0800a210 <memcpy>:
 800a210:	440a      	add	r2, r1
 800a212:	4291      	cmp	r1, r2
 800a214:	f100 33ff 	add.w	r3, r0, #4294967295
 800a218:	d100      	bne.n	800a21c <memcpy+0xc>
 800a21a:	4770      	bx	lr
 800a21c:	b510      	push	{r4, lr}
 800a21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a226:	4291      	cmp	r1, r2
 800a228:	d1f9      	bne.n	800a21e <memcpy+0xe>
 800a22a:	bd10      	pop	{r4, pc}

0800a22c <memset>:
 800a22c:	4402      	add	r2, r0
 800a22e:	4603      	mov	r3, r0
 800a230:	4293      	cmp	r3, r2
 800a232:	d100      	bne.n	800a236 <memset+0xa>
 800a234:	4770      	bx	lr
 800a236:	f803 1b01 	strb.w	r1, [r3], #1
 800a23a:	e7f9      	b.n	800a230 <memset+0x4>

0800a23c <_init>:
 800a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23e:	bf00      	nop
 800a240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a242:	bc08      	pop	{r3}
 800a244:	469e      	mov	lr, r3
 800a246:	4770      	bx	lr

0800a248 <_fini>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	bf00      	nop
 800a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24e:	bc08      	pop	{r3}
 800a250:	469e      	mov	lr, r3
 800a252:	4770      	bx	lr
